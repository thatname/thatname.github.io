
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'racing.data';
    var REMOTE_PACKAGE_BASE = 'racing.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
      var REMOTE_PACKAGE_SIZE = 11206;
      var PACKAGE_UUID = '26bc402b-3757-4a2c-b5ab-cc530b2907df';
    
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'media', true, true);
Module['FS_createPath']('/media', 'shaders', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };

      new DataRequest(0, 1913, 0, 0).open('GET', '/Command Prompt.lnk');
    new DataRequest(1913, 2685, 0, 0).open('GET', '/media/f.data');
    new DataRequest(2685, 2793, 0, 0).open('GET', '/media/shaders/axis.fsh');
    new DataRequest(2793, 2975, 0, 0).open('GET', '/media/shaders/axis.vsh');
    new DataRequest(2975, 3692, 0, 0).open('GET', '/media/shaders/bsp.fsh');
    new DataRequest(3692, 4162, 0, 0).open('GET', '/media/shaders/bsp.vsh');
    new DataRequest(4162, 4978, 0, 0).open('GET', '/media/shaders/font.fsh');
    new DataRequest(4978, 5442, 0, 0).open('GET', '/media/shaders/font.vsh');
    new DataRequest(5442, 5853, 0, 0).open('GET', '/media/shaders/standard.fsh');
    new DataRequest(5853, 6843, 0, 0).open('GET', '/media/shaders/standard.vsh');
    new DataRequest(6843, 7232, 0, 0).open('GET', '/media/shaders/static.fsh');
    new DataRequest(7232, 8092, 0, 0).open('GET', '/media/shaders/static.vsh');
    new DataRequest(8092, 8422, 0, 0).open('GET', '/media/shaders/static2.fsh');
    new DataRequest(8422, 8879, 0, 0).open('GET', '/media/shaders/static2.vsh');
    new DataRequest(8879, 9250, 0, 0).open('GET', '/media/shaders/static2clip.fsh');
    new DataRequest(9250, 9650, 0, 0).open('GET', '/media/shaders/terrain_far.fsh');
    new DataRequest(9650, 10027, 0, 0).open('GET', '/media/shaders/terrain_far.vsh');
    new DataRequest(10027, 10740, 0, 0).open('GET', '/media/shaders/terrain_near.fsh');
    new DataRequest(10740, 11206, 0, 0).open('GET', '/media/shaders/terrain_near.vsh');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
      // (we may be allocating before malloc is ready, during startup).
      var ptr = Module['getMemory'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/Command Prompt.lnk"].onload();
          DataRequest.prototype.requests["/media/f.data"].onload();
          DataRequest.prototype.requests["/media/shaders/axis.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/axis.vsh"].onload();
          DataRequest.prototype.requests["/media/shaders/bsp.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/bsp.vsh"].onload();
          DataRequest.prototype.requests["/media/shaders/font.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/font.vsh"].onload();
          DataRequest.prototype.requests["/media/shaders/standard.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/standard.vsh"].onload();
          DataRequest.prototype.requests["/media/shaders/static.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/static.vsh"].onload();
          DataRequest.prototype.requests["/media/shaders/static2.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/static2.vsh"].onload();
          DataRequest.prototype.requests["/media/shaders/static2clip.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/terrain_far.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/terrain_far.vsh"].onload();
          DataRequest.prototype.requests["/media/shaders/terrain_near.fsh"].onload();
          DataRequest.prototype.requests["/media/shaders/terrain_near.vsh"].onload();
          Module['removeRunDependency']('datafile_racing.data');

    };
    Module['addRunDependency']('datafile_racing.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage();

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 56176;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_game_cpp() } }, { func: function() { __GLOBAL__sub_I_device_cpp() } }, { func: function() { __GLOBAL__sub_I_staticScene2_cpp() } });
  

/* memory initializer */ allocate([56,16,0,0,72,16,0,0,88,16,0,0,104,16,0,0,120,16,0,0,144,16,0,0,168,16,0,0,184,16], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([99,97,114,54,55,53,76,84,65,46,77,65,80,0,0,0,99,97,114,57,49,49,71,84,83,46,77,65,80,0,0,0,99,97,114,65,103,101,114,97,65,46,77,65,80,0,0,0,99,97,114,65,103,114,105,115,83,46,77,65,80,0,0,0,99,97,114,65,110,107,111,110,105,97,110,83,46,77,65,80,0,0,0,0,0,0,0,0,99,97,114,65,118,101,110,116,97,100,111,114,65,46,77,65,80,0,0,0,0,0,0,0,99,97,114,66,101,110,122,65,46,77,65,80,0,0,0,0,99,97,114,77,75,50,52,46,77,65,80,0,0,0,0,0,0,0,0,0,216,16,0,0,1,0,0,0,2,0,0,0,216,209,0,0,232,16,0,0,248,16,0,0,0,0,0,0,49,50,115,116,97,116,105,99,83,99,101,110,101,50,0,0,56,210,0,0,32,17,0,0,0,0,0,0,3,0,0,0,80,17,0,0,2,0,0,0,88,17,0,0,2,8,0,0,96,17,0,0,2,16,0,0,56,114,101,115,111,117,114,99,101,73,49,50,115,116,97,116,105,99,83,99,101,110,101,50,56,99,111,117,110,116,114,101,102,76,105,53,49,50,69,69,0,0,0,0,0,0,0,0,176,209,0,0,184,17,0,0,176,209,0,0,168,17,0,0,216,209,0,0,112,17,0,0,152,17,0,0,0,0,0,0,49,50,98,97,115,101,114,101,115,111,117,114,99,101,73,49,50,115,116,97,116,105,99,83,99,101,110,101,50,76,105,53,49,50,69,69,0,0,0,0,176,209,0,0,160,17,0,0,53,110,97,109,101,100,0,0,56,100,117,97,108,108,105,110,107,0,0,0,0,0,0,0,56,99,111,117,110,116,114,101,102,0,0,0,0,0,0,0,0,0,0,0,80,17,0,0,3,0,0,0,4,0,0,0,0,0,0,0,248,16,0,0,5,0,0,0,6,0,0,0,0,0,0,0,248,17,0,0,7,0,0,0,0,0,0,0,56,210,0,0,16,18,0,0,0,0,0,0,1,0,0,0,64,18,0,0,2,4,0,0,78,49,50,98,97,115,101,114,101,115,111,117,114,99,101,73,49,50,115,116,97,116,105,99,83,99,101,110,101,50,76,105,53,49,50,69,69,56,116,109,97,110,97,103,101,114,69,0,176,209,0,0,72,18,0,0,49,48,115,116,114,105,110,103,104,97,115,104,73,49,50,115,116,97,116,105,99,83,99,101,110,101,50,76,105,53,49,50,69,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,101,97,115,105,100,101,46,77,65,80,0,0,0,0,0,115,101,97,115,105,100,101,95,49,46,77,65,80,0,0,0,112,111,114,116,46,77,65,80,0,0,0,0,0,0,0,0,116,117,110,110,101,108,95,48,46,77,65,80,0,0,0,0,116,117,110,110,101,108,95,50,46,77,65,80,0,0,0,0,115,110,111,119,95,48,46,77,65,80,0,0,0,0,0,0,115,110,111,119,95,49,46,77,65,80,0,0,0,0,0,0,115,110,111,119,95,99,108,105,102,102,95,48,46,77,65,80,0,0,0,0,0,0,0,0,115,110,111,119,95,109,111,110,116,97,105,110,95,48,46,77,65,80,0,0,0,0,0,0,109,111,115,99,111,119,46,77,65,80,0,0,0,0,0,0,115,104,105,112,46,77,65,80,0,0,0,0,0,0,0,0,111,105,108,46,77,65,80,0,114,101,102,105,110,101,114,121,46,77,65,80,0,0,0,0,109,111,110,97,99,111,46,77,65,80,0,0,0,0,0,0,109,111,110,97,99,111,95,49,46,77,65,80,0,0,0,0,102,111,114,101,115,116,46,77,65,80,0,0,0,0,0,0,120,102,111,114,101,115,116,95,48,46,77,65,80,0,0,0,120,102,111,114,101,115,116,95,49,46,77,65,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,20,0,0,8,0,0,0,9,0,0,0,216,209,0,0,64,20,0,0,80,17,0,0,0,0,0,0,54,99,97,109,101,114,97,0,37,102,32,10,0,0,0,0,37,115,32,10,0,0,0,0,115,107,121,95,46,77,65,80,0,0,0,0,0,0,0,0,104,97,104,97,97,104,97,104,97,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,37,100,32,102,112,115,0,0,120,21,0,0,0,0,0,0,0,0,0,0,6,128,0,0,10,128,0,0,11,128,0,0,0,0,0,0,1,0,0,0,0,3,0,0,1,3,0,0,6,3,0,0,7,3,0,0,2,3,0,0,3,3,0,0,4,3,0,0,5,3,0,0,1,128,0,0,2,128,0,0,8,3,0,0,0,0,0,0,103,108,67,111,108,111,114,77,97,115,107,40,105,110,115,116,97,116,101,115,46,114,101,100,109,97,115,107,44,105,110,115,116,97,116,101,115,46,103,114,101,101,110,109,97,115,107,44,105,110,115,116,97,116,101,115,46,98,108,117,101,109,97,115,107,44,105,110,115,116,97,116,101,115,46,97,108,112,104,97,109,97,115,107,41,10,0,0,0,2,0,0,1,2,0,0,2,2,0,0,3,2,0,0,4,2,0,0,5,2,0,0,6,2,0,0,7,2,0,0,0,0,0,0,5,4,0,0,4,4,0,0,8,4,0,0,0,0,0,63,0,0,0,63,0,0,0,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,97,116,105,99,50,46,118,115,104,36,115,116,97,116,105,99,50,99,108,105,112,46,102,115,104,0,0,0,0,0,115,116,97,116,105,99,50,46,118,115,104,36,115,116,97,116,105,99,50,46,102,115,104,0,100,105,102,102,117,115,101,77,97,112,0,0,0,0,0,0,108,105,103,104,116,77,97,112,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,118,112,0,0,0,0,0,0,116,101,120,99,111,111,114,100,0,0,0,0,0,0,0,0,108,109,116,101,120,99,111,111,114,100,0,0,0,0,0,0,46,74,80,71,0,0,0,0,37,100,32,109,97,116,115,10,0,0,0,0,0,0,0,0,37,100,32,118,101,114,116,115,10,0,0,0,0,0,0,0,37,100,32,105,110,100,105,99,101,115,10,0,0,0,0,0,117,115,104,111,114,116,32,98,117,102,102,101,114,32,115,105,122,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,44,116,114,121,32,116,111,32,115,112,108,105,116,32,98,97,116,99,104,46,10,0,0,110,118,101,114,116,115,32,61,61,32,118,101,114,116,101,120,111,102,102,115,101,116,0,0,68,58,92,67,111,100,101,92,69,109,115,99,114,105,112,116,101,110,68,101,109,111,92,77,111,98,105,108,101,69,110,103,105,110,101,92,115,116,97,116,105,99,83,99,101,110,101,50,46,99,112,112,0,0,0,0,111,110,76,111,97,100,101,100,0,0,0,0,0,0,0,0,110,105,110,100,105,99,101,115,32,61,61,32,105,110,100,101,120,111,102,102,115,101,116,0,37,102,32,37,102,32,37,102,32,45,32,37,102,32,37,102,32,37,102,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4144);
/* memory initializer */ allocate([37,115,37,115,0,0,0,0,0,0,0,0,40,57,0,0,10,0,0,0,0,0,0,0,56,210,0,0,64,57,0,0,0,0,0,0,1,0,0,0,112,57,0,0,2,4,0,0,78,49,50,98,97,115,101,114,101,115,111,117,114,99,101,73,55,116,101,120,116,117,114,101,76,105,53,49,50,69,69,56,116,109,97,110,97,103,101,114,69,0,0,0,0,0,0,0,176,209,0,0,120,57,0,0,49,48,115,116,114,105,110,103,104,97,115,104,73,55,116,101,120,116,117,114,101,76,105,53,49,50,69,69,0,0,0,0,0,0,0,0,168,57,0,0,11,0,0,0,12,0,0,0,56,210,0,0,208,57,0,0,0,0,0,0,3,0,0,0,80,17,0,0,2,0,0,0,88,17,0,0,2,8,0,0,248,57,0,0,2,16,0,0,56,114,101,115,111,117,114,99,101,73,55,112,114,111,103,114,97,109,56,99,111,117,110,116,114,101,102,76,105,53,49,50,69,69,0,0,0,0,0,0,216,209,0,0,8,58,0,0,152,17,0,0,0,0,0,0,49,50,98,97,115,101,114,101,115,111,117,114,99,101,73,55,112,114,111,103,114,97,109,76,105,53,49,50,69,69,0,0,0,0,0,0,56,58,0,0,13,0,0,0,0,0,0,0,56,210,0,0,80,58,0,0,0,0,0,0,1,0,0,0,128,58,0,0,2,4,0,0,78,49,50,98,97,115,101,114,101,115,111,117,114,99,101,73,55,112,114,111,103,114,97,109,76,105,53,49,50,69,69,56,116,109,97,110,97,103,101,114,69,0,0,0,0,0,0,0,176,209,0,0,136,58,0,0,49,48,115,116,114,105,110,103,104,97,115,104,73,55,112,114,111,103,114,97,109,76,105,53,49,50,69,69,0,0,0,0,0,0,0,0,216,58,0,0,14,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,216,209,0,0,232,58,0,0,80,17,0,0,0,0,0,0,54,115,116,114,101,97,109,0,0,0,0,0,32,59,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,17,0,0,0,18,0,0,0,216,209,0,0,48,59,0,0,216,58,0,0,0,0,0,0,49,54,109,101,109,111,114,121,82,101,97,100,83,116,114,101,97,109], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+14600);
/* memory initializer */ allocate([109,101,100,105,97,47,102,46,100,97,116,97,0,0,0,0,102,46,74,80,71,0,0,0,102,111,110,116,46,118,115,104,36,102,111,110,116,46,102,115,104,0,0,0,0,0,0,0,115,95,115,97,109,112,0,0,99,111,108,111,114,0,0,0,112,111,115,105,116,105,111,110,0,0,0,0,0,0,0,0,116,101,120,0,0,0,0,0,117,95,116,101,120,115,99,97,108,101,0,0,0,0,0,0,102,46,100,97,116,97,32,99,97,110,110,111,116,32,98,101,32,102,111,117,110,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,24,188,0,0,27,0,0,0,28,0,0,0,16,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,17,0,0,0,34,0,0,0,216,209,0,0,40,188,0,0,216,58,0,0,0,0,0,0,49,48,102,105,108,101,115,116,114,101,97,109,0,0,0,0,0,0,0,0,112,188,0,0,35,0,0,0,36,0,0,0,37,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,38,0,0,0,34,0,0,0,114,98,0,0,0,0,0,0,216,209,0,0,128,188,0,0,24,188,0,0,0,0,0,0,49,52,114,101,97,100,102,105,108,101,115,116,114,101,97,109,0,0,0,0,0,0,0,0,248,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,188,0,0,39,0,0,0,40,0,0,0,55,116,101,120,116,117,114,101,0,0,0,0,0,0,0,0,216,209,0,0,192,188,0,0,8,189,0,0,0,0,0,0,37,115,32,108,111,97,100,101,100,32,37,100,32,37,100,10,0,0,0,0,0,0,0,0,109,101,100,105,97,47,116,101,120,116,117,114,101,115,47,0,56,210,0,0,48,189,0,0,0,0,0,0,3,0,0,0,80,17,0,0,2,0,0,0,88,17,0,0,2,8,0,0,88,189,0,0,2,16,0,0,56,114,101,115,111,117,114,99,101,73,55,116,101,120,116,117,114,101,56,99,111,117,110,116,114,101,102,76,105,53,49,50,69,69,0,0,0,0,0,0,216,209,0,0,104,189,0,0,152,17,0,0,0,0,0,0,49,50,98,97,115,101,114,101,115,111,117,114,99,101,73,55,116,101,120,116,117,114,101,76,105,53,49,50,69,69,0,0,0,0,0,0,8,189,0,0,41,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,115,50,103,101,97,114,115,0,0,0,0,0,0,0,0,35,119,105,110,100,111,119,0,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,111,114,105,101,110,116,97,116,105,111,110,32,108,111,99,107,46,46,46,0,0,0,0,0,0,0,0,0,190,0,0,43,0,0,0,44,0,0,0,54,98,117,102,102,101,114,0,216,209,0,0,248,189,0,0,80,17,0,0,0,0,0,0,0,0,0,0,56,190,0,0,45,0,0,0,46,0,0,0,0,0,0,0,88,190,0,0,47,0,0,0,48,0,0,0,54,115,104,97,100,101,114,0,216,209,0,0,48,190,0,0,168,206,0,0,0,0,0,0,55,112,114,111,103,114,97,109,0,0,0,0,0,0,0,0,216,209,0,0,72,190,0,0,168,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,101,100,105,97,47,115,104,97,100,101,114,115,47,0,0,46,118,115,104,0,0,0,0,37,115,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+47952);
/* memory initializer */ allocate([56,210,0,0,208,206,0,0,0,0,0,0,3,0,0,0,80,17,0,0,2,0,0,0,88,17,0,0,2,8,0,0,248,206,0,0,2,16,0,0,56,114,101,115,111,117,114,99,101,73,54,115,104,97,100,101,114,56,99,111,117,110,116,114,101,102,76,105,53,49,50,69,69,0,0,0,0,0,0,0,216,209,0,0,8,207,0,0,152,17,0,0,0,0,0,0,49,50,98,97,115,101,114,101,115,111,117,114,99,101,73,54,115,104,97,100,101,114,76,105,53,49,50,69,69,0,0,0,0,0,0,0,168,206,0,0,49,0,0,0,50,0,0,0,108,111,97,100,98,121,110,97,109,101,32,37,115,10,0,0,0,0,0,0,88,207,0,0,51,0,0,0,0,0,0,0,56,210,0,0,112,207,0,0,0,0,0,0,1,0,0,0,160,207,0,0,2,4,0,0,78,49,50,98,97,115,101,114,101,115,111,117,114,99,101,73,54,115,104,97,100,101,114,76,105,53,49,50,69,69,56,116,109,97,110,97,103,101,114,69,0,0,0,0,0,0,0,0,176,209,0,0,168,207,0,0,49,48,115,116,114,105,110,103,104,97,115,104,73,54,115,104,97,100,101,114,76,105,53,49,50,69,69,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,208,0,0,53,0,0,0,54,0,0,0,55,0,0,0,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,216,209,0,0,240,207,0,0,40,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,176,209,0,0,24,208,0,0,0,0,0,0,96,208,0,0,56,0,0,0,57,0,0,0,58,0,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,216,209,0,0,72,208,0,0,40,208,0,0,0,0,0,0,0,0,0,0,160,208,0,0,56,0,0,0,59,0,0,0,58,0,0,0,0,0,0,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,0,0,0,0,0,216,209,0,0,136,208,0,0,96,208,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,176,209,0,0,176,208,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,216,209,0,0,200,208,0,0,192,208,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,216,209,0,0,0,209,0,0,240,208,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,216,209,0,0,96,209,0,0,240,208,0,0,0,0,0,0,216,209,0,0,56,209,0,0,136,209,0,0,0,0,0,0,0,0,0,0,40,209,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,32,210,0,0,60,0,0,0,68,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,216,209,0,0,248,209,0,0,40,209,0,0,0,0,0,0,0,0,0,0,128,210,0,0,60,0,0,0,72,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,216,209,0,0,88,210,0,0,40,209,0,0,0,0,0,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,100,58,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,52,46,49,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,0,0,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,0,0,100,58,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,52,46,49,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,115,116,114,105,110,103,0,0,0,0,40,213,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,95,95,110,101,120,116,95,112,114,105,109,101,32,111,118,101,114,102,108,111,119,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+52896);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
          case 0x1903 /* GL_RED */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  var _emscripten_resume=true;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0 );
          writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32 );
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88 );
          writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120 );
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.keyEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.mouseEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-e["wheelDeltaY"] /* Invert to unify direction with the DOM Level 3 wheel event. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.uiEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          writeStringToMemory(nodeName, JSEvents.focusEvent + 0 );
          writeStringToMemory(id, JSEvents.focusEvent + 128 );
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.focusEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceOrientationEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceMotionEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.orientationChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 8 );
        writeStringToMemory(id, eventStruct + 136 );
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.fullscreenChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Runtime.dynCall('iiii', strategy.canvasResizedCallback, [37, 0, strategy.canvasResizedCallbackUserData]);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 4 );
        writeStringToMemory(id, eventStruct + 132);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.pointerlockChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.visibilityChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.touchEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // XXX Currently disabled, see bug https://bugzilla.mozilla.org/show_bug.cgi?id=966493
          // Once the above bug is resolved, enable the following condition if possible:
          // allowsDeferredCalls: eventTypeString == 'touchstart',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        writeStringToMemory(e.id, eventStruct + 1304 );
        writeStringToMemory(e.mapping, eventStruct + 1368 );
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.gamepadEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.batteryEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_set_mouseleave_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave");
      return 0;
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  var _floorf=Math_floor;

  function _glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }

  function _emscripten_set_mouseup_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup");
      return 0;
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_lock_orientation(allowedOrientations) {
      var orientations = [];
      if (allowedOrientations & 1) orientations.push("portrait-primary");
      if (allowedOrientations & 2) orientations.push("portrait-secondary");
      if (allowedOrientations & 4) orientations.push("landscape-primary");
      if (allowedOrientations & 8) orientations.push("landscape-secondary");
      var succeeded;
      if (window.screen.lockOrientation) {
        succeeded = window.screen.lockOrientation(orientations);
      } else if (window.screen.mozLockOrientation) {
        succeeded = window.screen.mozLockOrientation(orientations);
      } else if (window.screen.webkitLockOrientation) {
        succeeded = window.screen.webkitLockOrientation(orientations);
      } else if (window.screen.msLockOrientation) {
        succeeded = window.screen.msLockOrientation(orientations);
      } else {
        return -1;
      }
      if (succeeded) {
        return 0;
      } else {
        return -6;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_memmove"] = _memmove;

  function ___cxa_guard_abort() {}

  var _emscripten_preinvoke=true;

  function _glDepthFunc(x0) { GLctx.depthFunc(x0) }

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  var _cosf=Math_cos;

  function _glDisable(x0) { GLctx.disable(x0) }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_async_wget_data(url, arg, onload, onerror) {
      Browser.asyncLoad(Pointer_stringify(url), function(byteArray) {
        var buffer = _malloc(byteArray.length);
        HEAPU8.set(byteArray, buffer);
        Runtime.dynCall('viii', onload, [arg, buffer, byteArray.length]);
        _free(buffer);
      }, function() {
        if (onerror) Runtime.dynCall('vi', onerror, [arg]);
      }, true /* no need for run dependency, this is async but will not do any prepare etc. step */ );
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _glBlendEquation(x0) { GLctx.blendEquation(x0) }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }

  function _glCullFace(x0) { GLctx.cullFace(x0) }

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function _glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }

  
  var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,requestedAnimationFrame:false,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.passiveMotionFunc, [lastX, lastY]);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.motionFunc, [lastX, lastY]);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
        _glutPostRedisplay();
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
                  (function() {});
        CFS.apply(document, []);
      }};function _glutDisplayFunc(func) {
      GLUT.displayFunc = func;
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
      return 0;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _emscripten_get_canvas_size(width, height, isFullscreen) {
      var canvas = Module['canvas'];
      HEAP32[((width)>>2)]=canvas.width;
      HEAP32[((height)>>2)]=canvas.height;
      HEAP32[((isFullscreen)>>2)]=Browser.isFullScreen ? 1 : 0;
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _sinf=Math_sin;

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glUniform1iv(location, count, value) {
      location = GL.uniforms[location];
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform1iv(location, value);
    }

   
  Module["_strcpy"] = _strcpy;

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_async_wget(url, file, onload, onerror) {
      Module['noExitRuntime'] = true;
  
      var _url = Pointer_stringify(url);
      var _file = Pointer_stringify(file);
      function doCallback(callback) {
        if (callback) {
          var stack = Runtime.stackSave();
          Runtime.dynCall('vi', callback, [allocate(intArrayFromString(_file), 'i8', ALLOC_STACK)]);
          Runtime.stackRestore(stack);
        }
      }
      FS.createPreloadedFile(
        PATH.dirname(_file),
        PATH.basename(_file),
        _url, true, true,
        function() {
          doCallback(onload);
        },
        function() {
          doCallback(onerror);
        },
        false, // dontCreateFile
        false, // canOwn
        function() { // preFinish
          // if a file exists there, we overwrite it
          try {
            FS.unlink(_file);
          } catch (e) {}
        }
      );
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glutSwapBuffers() {}

  var _emscripten_landingpad=true;

  
  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

   
  Module["_strncpy"] = _strncpy;

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  
  function _glutPostRedisplay() {
      if (GLUT.displayFunc && !GLUT.requestedAnimationFrame) {
        GLUT.requestedAnimationFrame = true;
        Browser.requestAnimationFrame(function() {
          GLUT.requestedAnimationFrame = false;
          Browser.mainLoop.runIter(function() {
            Runtime.dynCall('v', GLUT.displayFunc);
          });
        });
      }
    }function _glutReshapeWindow(width, height) {
      GLUT.cancelFullScreen();
      Browser.setCanvasSize(width, height);
      if (GLUT.reshapeFunc) {
        Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
      }
      _glutPostRedisplay();
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function ___gxx_personality_v0() {
    }

  function _glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  function _glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  var _BDtoIHigh=true;

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  var _tanf=Math_tan;

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  var _llvm_ctlz_i32=true;

  function ___cxa_guard_release() {}

  
  
  
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _abort() {
      Module['abort']();
    }

  function _glUniform1fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[0];
        view[0] = HEAPF32[((value)>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(location, view);
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  function _glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  var _ceilf=Math_ceil;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _emscripten_set_mousedown_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown");
      return 0;
    }

  function _glutMainLoop() {
      _glutReshapeWindow(Module['canvas'].width, Module['canvas'].height);
      _glutPostRedisplay();
      throw 'SimulateInfiniteLoop';
    }

  function _glutInitWindowSize(width, height) {
      Browser.setCanvasSize( GLUT.initWindowWidth = width,
                             GLUT.initWindowHeight = height );
    }

  function _glDepthMask(x0) { GLctx.depthMask(x0) }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  var _BItoD=true;

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glutReshapeFunc(func) {
      GLUT.reshapeFunc = func;
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_set_mouseenter_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter");
      return 0;
    }

  function _SDL_FreeSurface(surf) {
      if (surf) SDL.freeSurface(surf);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);

var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_d(x) { Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidiiddi(x) { Module["printErr"]("Invalid function pointer called with signature 'vidiiddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidiiddi(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_vidiiddi"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_viddd": nullFunc_viddd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_d": nullFunc_d, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_vidd": nullFunc_vidd, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_vidiiddi": nullFunc_vidiiddi, "nullFunc_viiii": nullFunc_viiii, "invoke_viddd": invoke_viddd, "invoke_iiii": invoke_iiii, "invoke_d": invoke_d, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_vidd": invoke_vidd, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_vidiiddi": invoke_vidiiddi, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_emscripten_set_mouseleave_callback": _emscripten_set_mouseleave_callback, "_glUniformMatrix3fv": _glUniformMatrix3fv, "_glUniformMatrix2fv": _glUniformMatrix2fv, "_fread": _fread, "_glUniformMatrix4fv": _glUniformMatrix4fv, "___cxa_guard_acquire": ___cxa_guard_acquire, "_SDL_RWFromFile": _SDL_RWFromFile, "_glUniform2fv": _glUniform2fv, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_glBlendEquation": _glBlendEquation, "_glBindBuffer": _glBindBuffer, "_glCullFace": _glCullFace, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_ceilf": _ceilf, "_glBlendFunc": _glBlendFunc, "_glGetAttribLocation": _glGetAttribLocation, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "___cxa_begin_catch": ___cxa_begin_catch, "_sinf": _sinf, "_glutSwapBuffers": _glutSwapBuffers, "_sysconf": _sysconf, "_close": _close, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "_tanf": _tanf, "_fileno": _fileno, "_puts": _puts, "___resumeException": ___resumeException, "_emscripten_get_canvas_size": _emscripten_get_canvas_size, "_ftell": _ftell, "_strerror": _strerror, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "___cxa_atexit": ___cxa_atexit, "_Mix_HaltMusic": _Mix_HaltMusic, "_TTF_FontHeight": _TTF_FontHeight, "_glutPostRedisplay": _glutPostRedisplay, "_glVertexAttribPointer": _glVertexAttribPointer, "_send": _send, "_glutDisplayFunc": _glutDisplayFunc, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_SDL_GetTicks": _SDL_GetTicks, "_emscripten_async_wget": _emscripten_async_wget, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_glDrawElements": _glDrawElements, "___cxa_guard_release": ___cxa_guard_release, "_glutInitDisplayMode": _glutInitDisplayMode, "_SDL_LockSurface": _SDL_LockSurface, "_strerror_r": _strerror_r, "_glViewport": _glViewport, "___setErrNo": ___setErrNo, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_emscripten_set_mousedown_callback": _emscripten_set_mousedown_callback, "_unlink": _unlink, "_SDL_PauseAudio": _SDL_PauseAudio, "_emscripten_set_mouseenter_callback": _emscripten_set_mouseenter_callback, "_glutReshapeFunc": _glutReshapeFunc, "_pthread_once": _pthread_once, "_printf": _printf, "_glGenTextures": _glGenTextures, "_glGetString": _glGetString, "_fopen": _fopen, "_emscripten_set_mouseup_callback": _emscripten_set_mouseup_callback, "_emscripten_get_now": _emscripten_get_now, "_glUniform1iv": _glUniform1iv, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "_mkport": _mkport, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "___cxa_guard_abort": ___cxa_guard_abort, "_putenv": _putenv, "_glUniform1fv": _glUniform1fv, "_IMG_Load": _IMG_Load, "_lseek": _lseek, "_vfprintf": _vfprintf, "_rmdir": _rmdir, "___cxa_allocate_exception": ___cxa_allocate_exception, "_sbrk": _sbrk, "_glUniform3fv": _glUniform3fv, "_pwrite": _pwrite, "_open": _open, "_glClearColor": _glClearColor, "_remove": _remove, "_glBindTexture": _glBindTexture, "_glutReshapeWindow": _glutReshapeWindow, "___cxa_end_catch": ___cxa_end_catch, "_SDL_FreeSurface": _SDL_FreeSurface, "_Mix_PlayChannel": _Mix_PlayChannel, "_pthread_getspecific": _pthread_getspecific, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_emscripten_lock_orientation": _emscripten_lock_orientation, "_fseek": _fseek, "_getenv": _getenv, "_fclose": _fclose, "_floorf": _floorf, "_pthread_key_create": _pthread_key_create, "_glActiveTexture": _glActiveTexture, "_write": _write, "_recv": _recv, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_emscripten_async_wget_data": _emscripten_async_wget_data, "_glTexImage2D": _glTexImage2D, "_glutMainLoop": _glutMainLoop, "___cxa_pure_virtual": ___cxa_pure_virtual, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_glDeleteShader": _glDeleteShader, "_cosf": _cosf, "_glGetProgramiv": _glGetProgramiv, "___buildEnvironment": ___buildEnvironment, "_Mix_PlayMusic": _Mix_PlayMusic, "_SDL_CloseAudio": _SDL_CloseAudio, "___gxx_personality_v0": ___gxx_personality_v0, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback, "_fflush": _fflush, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_SDL_FreeRW": _SDL_FreeRW, "__reallyNegative": __reallyNegative, "_glGetUniformLocation": _glGetUniformLocation, "_glutInitWindowSize": _glutInitWindowSize, "_glClear": _glClear, "_glUniform4fv": _glUniform4fv, "_Mix_FreeChunk": _Mix_FreeChunk, "_IMG_Load_RW": _IMG_Load_RW, "_glGetShaderiv": _glGetShaderiv, "_atexit": _atexit, "_pread": _pread, "_glEnable": _glEnable, "_TTF_SizeText": _TTF_SizeText, "_glLinkProgram": _glLinkProgram, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_glDepthMask": _glDepthMask, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "_pthread_setspecific": _pthread_setspecific, "_glBufferSubData": _glBufferSubData, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_glutCreateWindow": _glutCreateWindow, "_glColorMask": _glColorMask, "_glDisable": _glDisable, "_glTexParameteri": _glTexParameteri, "__formatString": __formatString, "_fputs": _fputs, "_SDL_UpperBlit": _SDL_UpperBlit, "_glCreateShader": _glCreateShader, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_d=env.nullFunc_d;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_vidiiddi=env.nullFunc_vidiiddi;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_d=env.invoke_d;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_vidd=env.invoke_vidd;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_vidiiddi=env.invoke_vidiiddi;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _emscripten_set_mouseleave_callback=env._emscripten_set_mouseleave_callback;
  var _glUniformMatrix3fv=env._glUniformMatrix3fv;
  var _glUniformMatrix2fv=env._glUniformMatrix2fv;
  var _fread=env._fread;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _glUniform2fv=env._glUniform2fv;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glBlendEquation=env._glBlendEquation;
  var _glBindBuffer=env._glBindBuffer;
  var _glCullFace=env._glCullFace;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _emscripten_set_touchmove_callback=env._emscripten_set_touchmove_callback;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _ceilf=env._ceilf;
  var _glBlendFunc=env._glBlendFunc;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _sinf=env._sinf;
  var _glutSwapBuffers=env._glutSwapBuffers;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _emscripten_set_touchstart_callback=env._emscripten_set_touchstart_callback;
  var _tanf=env._tanf;
  var _fileno=env._fileno;
  var _puts=env._puts;
  var ___resumeException=env.___resumeException;
  var _emscripten_get_canvas_size=env._emscripten_get_canvas_size;
  var _ftell=env._ftell;
  var _strerror=env._strerror;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var ___cxa_atexit=env.___cxa_atexit;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _glutPostRedisplay=env._glutPostRedisplay;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _send=env._send;
  var _glutDisplayFunc=env._glutDisplayFunc;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _emscripten_async_wget=env._emscripten_async_wget;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _glDrawElements=env._glDrawElements;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _strerror_r=env._strerror_r;
  var _glViewport=env._glViewport;
  var ___setErrNo=env.___setErrNo;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _emscripten_set_mousedown_callback=env._emscripten_set_mousedown_callback;
  var _unlink=env._unlink;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _emscripten_set_mouseenter_callback=env._emscripten_set_mouseenter_callback;
  var _glutReshapeFunc=env._glutReshapeFunc;
  var _pthread_once=env._pthread_once;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _glGetString=env._glGetString;
  var _fopen=env._fopen;
  var _emscripten_set_mouseup_callback=env._emscripten_set_mouseup_callback;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glUniform1iv=env._glUniform1iv;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var _mkport=env._mkport;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _putenv=env._putenv;
  var _glUniform1fv=env._glUniform1fv;
  var _IMG_Load=env._IMG_Load;
  var _lseek=env._lseek;
  var _vfprintf=env._vfprintf;
  var _rmdir=env._rmdir;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _sbrk=env._sbrk;
  var _glUniform3fv=env._glUniform3fv;
  var _pwrite=env._pwrite;
  var _open=env._open;
  var _glClearColor=env._glClearColor;
  var _remove=env._remove;
  var _glBindTexture=env._glBindTexture;
  var _glutReshapeWindow=env._glutReshapeWindow;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _SDL_FreeSurface=env._SDL_FreeSurface;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _pthread_getspecific=env._pthread_getspecific;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _emscripten_lock_orientation=env._emscripten_lock_orientation;
  var _fseek=env._fseek;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _floorf=env._floorf;
  var _pthread_key_create=env._pthread_key_create;
  var _glActiveTexture=env._glActiveTexture;
  var _write=env._write;
  var _recv=env._recv;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _emscripten_async_wget_data=env._emscripten_async_wget_data;
  var _glTexImage2D=env._glTexImage2D;
  var _glutMainLoop=env._glutMainLoop;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _glDeleteShader=env._glDeleteShader;
  var _cosf=env._cosf;
  var _glGetProgramiv=env._glGetProgramiv;
  var ___buildEnvironment=env.___buildEnvironment;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _emscripten_set_touchcancel_callback=env._emscripten_set_touchcancel_callback;
  var _emscripten_set_mousemove_callback=env._emscripten_set_mousemove_callback;
  var _fflush=env._fflush;
  var _emscripten_set_touchend_callback=env._emscripten_set_touchend_callback;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var __reallyNegative=env.__reallyNegative;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glutInitWindowSize=env._glutInitWindowSize;
  var _glClear=env._glClear;
  var _glUniform4fv=env._glUniform4fv;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _glGetShaderiv=env._glGetShaderiv;
  var _atexit=env._atexit;
  var _pread=env._pread;
  var _glEnable=env._glEnable;
  var _TTF_SizeText=env._TTF_SizeText;
  var _glLinkProgram=env._glLinkProgram;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _glDepthMask=env._glDepthMask;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var _pthread_setspecific=env._pthread_setspecific;
  var _glBufferSubData=env._glBufferSubData;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _glutCreateWindow=env._glutCreateWindow;
  var _glColorMask=env._glColorMask;
  var _glDisable=env._glDisable;
  var _glTexParameteri=env._glTexParameteri;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _glCreateShader=env._glCreateShader;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z16initGaragePlayerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 108|0;
 $__annotator$i = sp + 109|0;
 $25 = sp + 44|0;
 $28 = (__ZN19randomize_generator9get_shortEv(5024)|0);
 $29 = $28 << 16 >> 16;
 $30 = (($29>>>0) % 8)&-1;
 $31 = (8 + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[40>>2] = $32;
 $33 = (__ZN12baseresourceI12staticScene2Li512EE10getmanagerEv()|0);
 $34 = HEAP32[40>>2]|0;
 $35 = (__ZN12baseresourceI12staticScene2Li512EE8tmanager3getEPKc($33,$34)|0);
 __ZN6refptrI12staticScene2EC2EPS0_($25,$35);
 $23 = 5032;
 $24 = $25;
 $36 = $23;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $22 = $36;
 $39 = $22;
 $40 = ((($39)) + 8|0);
 $21 = $40;
 $41 = $21;
 $20 = $41;
 $42 = $20;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($38>>>0)<($43>>>0);
 if (!($44)) {
  $70 = $24;
  $16 = $70;
  $71 = $16;
  __THREW__ = 0;
  invoke_vii(78,($36|0),($71|0));
  $72 = __THREW__; __THREW__ = 0;
  $73 = $72&1;
  if ($73) {
   $74 = ___cxa_find_matching_catch()|0;
   $75 = tempRet0;
   $26 = $74;
   $27 = $75;
   __ZN6refptrI12staticScene2ED2Ev($25);
   $76 = $26;
   $77 = $27;
   ___resumeException($76|0);
   // unreachable;
  } else {
   __ZN6refptrI12staticScene2ED2Ev($25);
   STACKTOP = sp;return;
  }
 }
 __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$36,1);
 $19 = $36;
 $45 = $19;
 $46 = ((($45)) + 8|0);
 $18 = $46;
 $47 = $18;
 $17 = $47;
 $48 = $17;
 $49 = ((($36)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $15 = $50;
 $51 = $15;
 $52 = $24;
 $0 = $52;
 $53 = $0;
 $11 = $48;
 $12 = $51;
 $13 = $53;
 $54 = $11;
 $55 = $12;
 $56 = $13;
 $10 = $56;
 $57 = $10;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 $6 = $54;
 $7 = $55;
 $8 = $57;
 $58 = $6;
 $59 = $7;
 $60 = $8;
 $5 = $60;
 $61 = $5;
 $2 = $58;
 $3 = $59;
 $4 = $61;
 $62 = $3;
 $63 = $4;
 $1 = $63;
 $64 = $1;
 __THREW__ = 0;
 invoke_vii(77,($62|0),($64|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  $26 = $74;
  $27 = $75;
  __ZN6refptrI12staticScene2ED2Ev($25);
  $76 = $26;
  $77 = $27;
  ___resumeException($76|0);
  // unreachable;
 }
 __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
 $67 = ((($36)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 4|0);
 HEAP32[$67>>2] = $69;
 __ZN6refptrI12staticScene2ED2Ev($25);
 STACKTOP = sp;return;
}
function __Z15initGarageEnemyv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__annotator$i = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 112|0;
 $__annotator$i = sp + 113|0;
 $25 = sp + 44|0;
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = ($28>>>0)<(8);
  if (!($29)) {
   label = 11;
   break;
  }
  $30 = $i;
  $31 = (8 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[40>>2]|0;
  $34 = ($32|0)!=($33|0);
  if ($34) {
   $35 = (__ZN12baseresourceI12staticScene2Li512EE10getmanagerEv()|0);
   $36 = $i;
   $37 = (8 + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (__ZN12baseresourceI12staticScene2Li512EE8tmanager3getEPKc($35,$38)|0);
   __ZN6refptrI12staticScene2EC2EPS0_($25,$39);
   $23 = 5032;
   $24 = $25;
   $40 = $23;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $22 = $40;
   $43 = $22;
   $44 = ((($43)) + 8|0);
   $21 = $44;
   $45 = $21;
   $20 = $45;
   $46 = $20;
   $47 = HEAP32[$46>>2]|0;
   $48 = ($42>>>0)<($47>>>0);
   if ($48) {
    __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$40,1);
    $19 = $40;
    $49 = $19;
    $50 = ((($49)) + 8|0);
    $18 = $50;
    $51 = $18;
    $17 = $51;
    $52 = $17;
    $53 = ((($40)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $15 = $54;
    $55 = $15;
    $56 = $24;
    $0 = $56;
    $57 = $0;
    $11 = $52;
    $12 = $55;
    $13 = $57;
    $58 = $11;
    $59 = $12;
    $60 = $13;
    $10 = $60;
    $61 = $10;
    ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
    $6 = $58;
    $7 = $59;
    $8 = $61;
    $62 = $6;
    $63 = $7;
    $64 = $8;
    $5 = $64;
    $65 = $5;
    $2 = $62;
    $3 = $63;
    $4 = $65;
    $66 = $3;
    $67 = $4;
    $1 = $67;
    $68 = $1;
    __THREW__ = 0;
    invoke_vii(77,($66|0),($68|0));
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     label = 9;
     break;
    }
    __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
    $71 = ((($40)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($72)) + 4|0);
    HEAP32[$71>>2] = $73;
   } else {
    $74 = $24;
    $16 = $74;
    $75 = $16;
    __THREW__ = 0;
    invoke_vii(78,($40|0),($75|0));
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 9;
     break;
    }
   }
   __ZN6refptrI12staticScene2ED2Ev($25);
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 if ((label|0) == 9) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $26 = $78;
  $27 = $79;
  __ZN6refptrI12staticScene2ED2Ev($25);
  $80 = $26;
  $81 = $27;
  ___resumeException($80|0);
  // unreachable;
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function __ZN19randomize_generator9get_shortEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2*214013)|0;
 $4 = (($3) + 2531011)|0;
 HEAP32[$1>>2] = $4;
 $5 = $4 >>> 16;
 $6 = $5 & 32767;
 $7 = $6&65535;
 STACKTOP = sp;return ($7|0);
}
function __ZN12baseresourceI12staticScene2Li512EE10getmanagerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[4720>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (48|0);
 }
 $4 = (___cxa_guard_acquire((4720|0))|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (48|0);
 }
 __THREW__ = 0;
 invoke_vi(79,(48|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  ___cxa_guard_abort((4720|0));
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((80|0),(48|0),(___dso_handle|0))|0);
 ___cxa_guard_release((4720|0));
 STACKTOP = sp;return (48|0);
}
function __ZN12baseresourceI12staticScene2Li512EE8tmanager3getEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rtn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = $2;
 $6 = (__ZN10stringhashI12staticScene2Li512EE6searchEPKc($4,$5)|0);
 $rtn = $6;
 $7 = $rtn;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $rtn;
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = $2;
  $11 = (__ZN12baseresourceI12staticScene2Li512EE8tmanager9innerloadEPKc($3,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN6refptrI12staticScene2EC2EPS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$2>>2]|0;
 __ZN8countref3refEv($6);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN6refptrI12staticScene2EC2ERKS1_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK6refptrI12staticScene2EcvPS0_Ev($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$2>>2]|0;
 __ZN8countref3refEv($7);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 12|0;
 $34 = sp + 60|0;
 $__v = sp + 92|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferI6refptrI12staticScene2ERNS_9allocatorIS3_EEEC2EjjS6_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __THREW__ = 0;
 invoke_vii(77,($118|0),($120|0));
 $121 = __THREW__; __THREW__ = 0;
 $122 = $121&1;
 if ($122) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferI6refptrI12staticScene2ERNS_9allocatorIS3_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 }
 $123 = ((($__v)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 4|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(81,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferI6refptrI12staticScene2ERNS_9allocatorIS3_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferI6refptrI12staticScene2ERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN6refptrI12staticScene2ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $ptr1 = $4;
 HEAP32[$1>>2] = 0;
 $5 = $ptr1;
 __THREW__ = 0;
 invoke_vi(82,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN12baseresourceI12staticScene2Li512EE8tmanagerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10stringhashI12staticScene2Li512EEC2Ev($2);
 $3 = 4592;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10stringhashI12staticScene2Li512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 4096|0);
 $5 = $3;
 while(1) {
  __THREW__ = 0;
  invoke_vi(83,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 8;
   break;
  }
  $8 = ((($5)) + 8|0);
  $9 = ($8|0)==($4|0);
  if ($9) {
   break;
  } else {
   $5 = $8;
  }
 }
 if ((label|0) == 8) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $1 = $21;
  $2 = $22;
  $23 = ($3|0)==($5|0);
  if ($23) {
   $33 = $1;
   $34 = $2;
   ___resumeException($33|0);
   // unreachable;
  } else {
   $25 = $5;
  }
  while(1) {
   $24 = ((($25)) + -8|0);
   __ZN8duallinkD2Ev($24);
   $26 = ($24|0)==($3|0);
   if ($26) {
    break;
   } else {
    $25 = $24;
   }
  }
  $33 = $1;
  $34 = $2;
  ___resumeException($33|0);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(511);
  if (!($11)) {
   label = 11;
   break;
  }
  $12 = $i;
  $13 = (($3) + ($12<<3)|0);
  $14 = $i;
  $15 = (($14) + 1)|0;
  $16 = (($3) + ($15<<3)|0);
  __THREW__ = 0;
  invoke_vii(84,($13|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $1 = $27;
 $2 = $28;
 $29 = ((($3)) + 4096|0);
 $31 = $29;
 while(1) {
  $30 = ((($31)) + -8|0);
  __ZN8duallinkD2Ev($30);
  $32 = ($30|0)==($3|0);
  if ($32) {
   break;
  } else {
   $31 = $30;
  }
 }
 $33 = $1;
 $34 = $2;
 ___resumeException($33|0);
 // unreachable;
}
function __ZN8duallinkC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$1>>2] = $1;
 STACKTOP = sp;return;
}
function __ZN8duallinkD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(85,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8duallink6unlinkEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$8>>2] = $6;
 HEAP32[$1>>2] = $1;
 $9 = ((($1)) + 4|0);
 HEAP32[$9>>2] = $1;
 STACKTOP = sp;return;
}
function __ZN8duallink10insertbackEPS_($this,$back) {
 $this = $this|0;
 $back = $back|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $back;
 $2 = $0;
 $3 = $1;
 HEAP32[$3>>2] = $2;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = ((($2)) + 4|0);
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN12baseresourceI12staticScene2Li512EE8tmanager4vgetEPc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN12baseresourceI12staticScene2Li512EE8tmanager3getEPKc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN12baseresourceI12staticScene2Li512EE8tmanagerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10stringhashI12staticScene2Li512EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10stringhashI12staticScene2Li512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4096|0);
 $4 = $2;
 while(1) {
  $3 = ((($4)) + -8|0);
  __ZN8duallinkD2Ev($3);
  $5 = ($3|0)==($1|0);
  if ($5) {
   break;
  } else {
   $4 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10stringhashI12staticScene2Li512EE6searchEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN10stringhashI12staticScene2Li512EE8calchashEPKc($4)|0);
 $hash = $5;
 $6 = $hash;
 $7 = (($3) + ($6<<3)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $d = $9;
 while(1) {
  $10 = $d;
  $11 = ($10>>>0)>=($3>>>0);
  $12 = $d;
  $13 = ((($3)) + 4096|0);
  $14 = ($12>>>0)<($13>>>0);
  $15 = $11 ? $14 : 0;
  $16 = $15 ^ 1;
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $2;
  $18 = $d;
  $19 = ($18|0)==(0|0);
  $20 = ((($18)) + -8|0);
  $21 = $19 ? 0 : $20;
  $22 = ((($21)) + 16|0);
  $23 = (__ZNK5named7getnameEv($22)|0);
  $24 = (_strcmp($17,$23)|0);
  $25 = ($24|0)==(0);
  $26 = $d;
  if ($25) {
   label = 4;
   break;
  }
  $30 = ((($26)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $d = $31;
 }
 if ((label|0) == 4) {
  $27 = ($26|0)==(0|0);
  $28 = ((($26)) + -8|0);
  $29 = $27 ? 0 : $28;
  $0 = $29;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZN10stringhashI12staticScene2Li512EE8calchashEPKc($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $hash = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  $4 = $hash;
  if (!($3)) {
   break;
  }
  $5 = $4 << 4;
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($5) + ($8))|0;
  $hash = $9;
  $10 = $hash;
  $11 = $10 & -268435456;
  $g = $11;
  $12 = $g;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $g;
   $15 = $14 >>> 24;
   $16 = $hash;
   $17 = $16 ^ $15;
   $hash = $17;
  }
  $18 = $g;
  $19 = $18 ^ -1;
  $20 = $hash;
  $21 = $20 & $19;
  $hash = $21;
  $22 = $0;
  $23 = ((($22)) + 1|0);
  $0 = $23;
 }
 $24 = $4 & 511;
 STACKTOP = sp;return ($24|0);
}
function __ZNK5named7getnameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN12baseresourceI12staticScene2Li512EE8tmanager9innerloadEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rtn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN12baseresourceI12staticScene2Li512EE10loadbynameEPNS1_8tmanagerEPKc($2,$3)|0);
 $rtn = $4;
 $5 = $rtn;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $9 = $rtn;
  STACKTOP = sp;return ($9|0);
 }
 $7 = ((($2)) + 4|0);
 $8 = $rtn;
 __ZN10stringhashI12staticScene2Li512EE6insertEPS0_($7,$8);
 $9 = $rtn;
 STACKTOP = sp;return ($9|0);
}
function __ZN12baseresourceI12staticScene2Li512EE10loadbynameEPNS1_8tmanagerEPKc($mgr,$filename) {
 $mgr = $mgr|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $der = 0, $r = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = $mgr;
 $1 = $filename;
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $r = $5;
 $6 = (__Znwj(76)|0);
 __THREW__ = 0;
 invoke_vi(86,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $2 = $22;
  $3 = $23;
  __ZdlPv($6);
  $24 = $2;
  $25 = $3;
  ___resumeException($24|0);
  // unreachable;
 } else {
  $der = $6;
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf((53048|0),($vararg_buffer|0))|0);
  $10 = $der;
  $11 = ((($10)) + 16|0);
  $12 = $1;
  __ZN5named7setnameEPKc($11,$12);
  $13 = $der;
  $14 = ((($13)) + 16|0);
  $15 = (__ZNK5named7getnameEv($14)|0);
  HEAP32[$vararg_buffer1>>2] = $15;
  (_printf((53048|0),($vararg_buffer1|0))|0);
  $16 = $der;
  $17 = ((($16)) + 16|0);
  __ZN12baseresourceI12staticScene2Li512EE8reloaderEv($17);
  $18 = $der;
  $19 = ((($18)) + 16|0);
  $20 = (__ZNK5named7getnameEv($19)|0);
  HEAP32[$vararg_buffer4>>2] = $20;
  (_printf((53048|0),($vararg_buffer4|0))|0);
  $21 = $der;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN12staticScene2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $10 = $this;
 $13 = $10;
 __ZN8resourceI12staticScene28countrefLi512EEC2Ev($13);
 $14 = 4304;
 HEAP32[$13>>2] = $14;
 $15 = ((($13)) + 20|0);
 __THREW__ = 0;
 invoke_vi(87,($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  $18 = ((($13)) + 44|0);
  __THREW__ = 0;
  invoke_vi(88,($18|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   $21 = ((($13)) + 48|0);
   __THREW__ = 0;
   invoke_vi(89,($21|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $43 = ___cxa_find_matching_catch()|0;
    $44 = tempRet0;
    $11 = $43;
    $12 = $44;
   } else {
    $24 = ((($13)) + 52|0);
    __THREW__ = 0;
    invoke_vi(89,($24|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    do {
     if ($26) {
      $45 = ___cxa_find_matching_catch()|0;
      $46 = tempRet0;
      $11 = $45;
      $12 = $46;
     } else {
      $27 = ((($13)) + 56|0);
      $9 = $27;
      $28 = $9;
      $8 = $28;
      $29 = $8;
      $7 = $29;
      HEAP32[$29>>2] = 0;
      $30 = ((($29)) + 4|0);
      HEAP32[$30>>2] = 0;
      $31 = ((($29)) + 8|0);
      $5 = $31;
      HEAP32[$6>>2] = 0;
      $32 = $5;
      $4 = $6;
      $33 = $4;
      $34 = HEAP32[$33>>2]|0;
      $2 = $32;
      HEAP32[$3>>2] = $34;
      $35 = $2;
      $1 = $35;
      $0 = $3;
      $36 = $0;
      $37 = HEAP32[$36>>2]|0;
      HEAP32[$35>>2] = $37;
      $38 = ((($13)) + 68|0);
      __THREW__ = 0;
      invoke_vi(83,($38|0));
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       $47 = ___cxa_find_matching_catch()|0;
       $48 = tempRet0;
       $11 = $47;
       $12 = $48;
       __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEED2Ev($27);
       __ZN6refptrI6bufferED2Ev($24);
       break;
      } else {
       STACKTOP = sp;return;
      }
     }
    } while(0);
    __ZN6refptrI6bufferED2Ev($21);
   }
   __ZN6refptrI7textureED2Ev($18);
   __ZN8resourceI12staticScene28countrefLi512EED2Ev($13);
   $49 = $11;
   $50 = $12;
   ___resumeException($49|0);
   // unreachable;
  }
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $11 = $41;
 $12 = $42;
 __ZN8resourceI12staticScene28countrefLi512EED2Ev($13);
 $49 = $11;
 $50 = $12;
 ___resumeException($49|0);
 // unreachable;
}
function __ZN8resourceI12staticScene28countrefLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8countrefC2Ev($3);
 $4 = ((($3)) + 8|0);
 __THREW__ = 0;
 invoke_vi(83,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZN8countrefD2Ev($3);
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
 $7 = ((($3)) + 16|0);
 __THREW__ = 0;
 invoke_vi(90,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = 4576;
  HEAP32[$3>>2] = $10;
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 $15 = ((($3)) + 8|0);
 __ZN8duallinkD2Ev($15);
 __ZN8countrefD2Ev($3);
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN8countrefC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4560;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8countrefD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8countrefD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI12staticScene2Li512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5namedC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN5namedC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8countrefD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8resourceI12staticScene28countrefLi512EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8resourceI12staticScene28countrefLi512EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN5aabb2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4vec3C2Ev($1);
 $2 = ((($1)) + 12|0);
 __ZN4vec3C2Ev($2);
 STACKTOP = sp;return;
}
function __ZN4vec3C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN6refptrI7textureEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6refptrI6bufferEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN12staticScene29material2ENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN12staticScene29material2ENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -16|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZN12staticScene29material2D2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 16)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZN12staticScene29material2D2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6refptrI7textureED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6refptrI6bufferED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $ptr1 = $4;
 HEAP32[$1>>2] = 0;
 $5 = $ptr1;
 __THREW__ = 0;
 invoke_vi(82,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8countref5unrefEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($4|0)>(0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_vi[$9 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN6refptrI7textureED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $ptr1 = $4;
 HEAP32[$1>>2] = 0;
 $5 = $ptr1;
 __THREW__ = 0;
 invoke_vi(82,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8resourceI12staticScene28countrefLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZN12baseresourceI12staticScene2Li512EED2Ev($2);
 $3 = ((($1)) + 8|0);
 __ZN8duallinkD2Ev($3);
 __ZN8countrefD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI12staticScene2Li512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5namedD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN5namedD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   __ZdaPv($4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN12staticScene2D2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4304;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 68|0);
 __ZN8duallinkD2Ev($3);
 $4 = ((($1)) + 56|0);
 __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEED2Ev($4);
 $5 = ((($1)) + 52|0);
 __ZN6refptrI6bufferED2Ev($5);
 $6 = ((($1)) + 48|0);
 __ZN6refptrI6bufferED2Ev($6);
 $7 = ((($1)) + 44|0);
 __ZN6refptrI7textureED2Ev($7);
 __ZN8resourceI12staticScene28countrefLi512EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12staticScene2D0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN12staticScene2D2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN5named7setnameEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 __ZN5named7setnameEPKci($2,$3,$5);
 STACKTOP = sp;return;
}
function __ZN5named7setnameEPKci($this,$name,$num) {
 $this = $this|0;
 $name = $name|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $num;
 $3 = $0;
 $4 = $2;
 __ZN5named11setnamesizeEi($3,$4);
 $5 = HEAP32[$3>>2]|0;
 $6 = $1;
 $7 = $2;
 (_strncpy(($5|0),($6|0),($7|0))|0);
 STACKTOP = sp;return;
}
function __ZN5named11setnamesizeEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $num;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __ZdaPv($3);
 }
 $5 = $1;
 $6 = (($5) + 1)|0;
 $7 = ($6|0)<(0);
 $8 = $7 ? -1 : $6;
 $9 = (__Znaj($8)|0);
 HEAP32[$2>>2] = $9;
 $10 = $1;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) + ($10)|0);
 HEAP8[$12>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN12baseresourceI12staticScene2Li512EE8reloaderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -16|0);
 $3 = ((($2)) + 16|0);
 $4 = (__ZNK5named7getnameEv($1)|0);
 __ZN12baseresourceI12staticScene2Li512EE6loaderEPKc($3,$4);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI12staticScene2Li512EE6loaderEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buffer = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 16|0;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = HEAP32[5944>>2]|0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 (_sprintf($buffer,14608,$vararg_buffer)|0);
 $5 = ((($2)) + -16|0);
 __ZN12staticScene214loadByFullNameEPKc($5,$buffer);
 STACKTOP = sp;return;
}
function __ZN10stringhashI12staticScene2Li512EE6insertEPS0_($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = (__ZNK5named7getnameEv($4)|0);
 $6 = (__ZN10stringhashI12staticScene2Li512EE8calchashEPKc($5)|0);
 $hash = $6;
 $7 = $hash;
 $8 = (($2) + ($7<<3)|0);
 $9 = $1;
 $10 = ($9|0)==(0|0);
 $11 = ((($9)) + 8|0);
 $12 = $10 ? 0 : $11;
 __ZN8duallink10insertbackEPS_($8,$12);
 STACKTOP = sp;return;
}
function __ZNK6refptrI12staticScene2EcvPS0_Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN8countref3refEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferI6refptrI12staticScene2ERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -4|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -4|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN6refptrI12staticScene2EC2ERKS1_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -4|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 4)&-1;
 __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6refptrI12staticScene2ERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN6refptrI12staticScene2ED2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 4)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __Z16initDefaultLevelR9trackData($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $__annotator$i = 0, $__annotator$i102 = 0, $__annotator$i106 = 0, $__annotator$i110 = 0, $__annotator$i114 = 0, $__annotator$i118 = 0, $__annotator$i122 = 0, $__annotator$i126 = 0, $__annotator$i130 = 0, $__annotator$i134 = 0, $__annotator$i15 = 0, $__annotator$i19 = 0, $__annotator$i22 = 0, $__annotator$i26 = 0, $__annotator$i30 = 0, $__annotator$i34 = 0, $__annotator$i38 = 0, $__annotator$i42 = 0, $__annotator$i46 = 0, $__annotator$i50 = 0;
 var $__annotator$i54 = 0, $__annotator$i58 = 0, $__annotator$i62 = 0, $__annotator$i66 = 0, $__annotator$i70 = 0, $__annotator$i74 = 0, $__annotator$i78 = 0, $__annotator$i82 = 0, $__annotator$i86 = 0, $__annotator$i90 = 0, $__annotator$i94 = 0, $__annotator$i98 = 0, $type = 0, $type1 = 0, $type10 = 0, $type11 = 0, $type12 = 0, $type13 = 0, $type2 = 0, $type3 = 0;
 var $type4 = 0, $type5 = 0, $type6 = 0, $type7 = 0, $type8 = 0, $type9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 200|0;
 $13 = sp + 3455|0;
 $__annotator$i134 = sp + 3475|0;
 $32 = sp + 88|0;
 $37 = sp + 3462|0;
 $__annotator$i130 = sp + 3460|0;
 $57 = sp + 32|0;
 $62 = sp + 3456|0;
 $__annotator$i126 = sp + 3459|0;
 $81 = sp + 120|0;
 $86 = sp + 3466|0;
 $__annotator$i122 = sp + 3470|0;
 $105 = sp + 72|0;
 $110 = sp + 3480|0;
 $__annotator$i118 = sp + 3483|0;
 $129 = sp;
 $134 = sp + 3488|0;
 $__annotator$i114 = sp + 3491|0;
 $153 = sp + 208|0;
 $158 = sp + 3494|0;
 $__annotator$i110 = sp + 3498|0;
 $177 = sp + 144|0;
 $182 = sp + 3502|0;
 $__annotator$i106 = sp + 3506|0;
 $201 = sp + 248|0;
 $206 = sp + 3511|0;
 $__annotator$i102 = sp + 3508|0;
 $225 = sp + 24|0;
 $230 = sp + 3505|0;
 $__annotator$i98 = sp + 3501|0;
 $249 = sp + 40|0;
 $254 = sp + 3497|0;
 $__annotator$i94 = sp + 3492|0;
 $273 = sp + 136|0;
 $278 = sp + 3487|0;
 $__annotator$i90 = sp + 3484|0;
 $297 = sp + 192|0;
 $302 = sp + 3477|0;
 $__annotator$i86 = sp + 3468|0;
 $321 = sp + 152|0;
 $326 = sp + 3454|0;
 $__annotator$i82 = sp + 3458|0;
 $345 = sp + 64|0;
 $350 = sp + 3451|0;
 $__annotator$i78 = sp + 3472|0;
 $369 = sp + 104|0;
 $374 = sp + 3474|0;
 $__annotator$i74 = sp + 3449|0;
 $393 = sp + 184|0;
 $398 = sp + 3471|0;
 $__annotator$i70 = sp + 3452|0;
 $417 = sp + 16|0;
 $422 = sp + 3476|0;
 $__annotator$i66 = sp + 3473|0;
 $441 = sp + 176|0;
 $446 = sp + 3448|0;
 $__annotator$i62 = sp + 3457|0;
 $465 = sp + 80|0;
 $470 = sp + 3464|0;
 $__annotator$i58 = sp + 3467|0;
 $489 = sp + 56|0;
 $494 = sp + 3478|0;
 $__annotator$i54 = sp + 3482|0;
 $513 = sp + 48|0;
 $518 = sp + 3486|0;
 $__annotator$i50 = sp + 3490|0;
 $537 = sp + 216|0;
 $542 = sp + 3495|0;
 $__annotator$i46 = sp + 3499|0;
 $562 = sp + 128|0;
 $567 = sp + 3504|0;
 $__annotator$i42 = sp + 3507|0;
 $586 = sp + 240|0;
 $591 = sp + 3510|0;
 $__annotator$i38 = sp + 3509|0;
 $610 = sp + 8|0;
 $615 = sp + 3503|0;
 $__annotator$i34 = sp + 3500|0;
 $635 = sp + 112|0;
 $640 = sp + 3496|0;
 $__annotator$i30 = sp + 3493|0;
 $659 = sp + 160|0;
 $664 = sp + 3489|0;
 $__annotator$i26 = sp + 3485|0;
 $683 = sp + 232|0;
 $688 = sp + 3481|0;
 $__annotator$i22 = sp + 3479|0;
 $707 = sp + 96|0;
 $712 = sp + 3469|0;
 $__annotator$i19 = sp + 3465|0;
 $731 = sp + 224|0;
 $736 = sp + 3461|0;
 $__annotator$i15 = sp + 3453|0;
 $756 = sp + 168|0;
 $761 = sp + 3463|0;
 $__annotator$i = sp + 3450|0;
 $type = sp + 1660|0;
 $773 = sp + 1680|0;
 $776 = sp + 1692|0;
 $type1 = sp + 1696|0;
 $777 = sp + 1716|0;
 $type2 = sp + 1720|0;
 $778 = sp + 1740|0;
 $779 = sp + 1744|0;
 $type3 = sp + 1748|0;
 $780 = sp + 1768|0;
 $781 = sp + 1772|0;
 $type4 = sp + 1776|0;
 $782 = sp + 1796|0;
 $type5 = sp + 1800|0;
 $783 = sp + 1820|0;
 $type6 = sp + 1824|0;
 $784 = sp + 1844|0;
 $type7 = sp + 1848|0;
 $785 = sp + 1868|0;
 $type8 = sp + 1872|0;
 $786 = sp + 1892|0;
 $type9 = sp + 1896|0;
 $787 = sp + 1916|0;
 $type10 = sp + 1920|0;
 $788 = sp + 1940|0;
 $type11 = sp + 1944|0;
 $789 = sp + 1964|0;
 $type12 = sp + 1968|0;
 $790 = sp + 1988|0;
 $type13 = sp + 1992|0;
 $791 = sp + 2012|0;
 $792 = sp + 2016|0;
 $772 = $data;
 __ZN9trackTypeC2Ev($type);
 HEAP8[$type>>0] = 3;
 $793 = ((($type)) + 1|0);
 HEAP8[$793>>0] = 6;
 $794 = ((($type)) + 2|0);
 HEAP8[$794>>0] = 0;
 $795 = ((($type)) + 3|0);
 HEAP8[$795>>0] = 0;
 $796 = ((($type)) + 4|0);
 HEAP8[$796>>0] = 0;
 $797 = ((($type)) + 8|0);
 __THREW__ = 0;
 $798 = (invoke_i(91)|0);
 $799 = __THREW__; __THREW__ = 0;
 $800 = $799&1;
 do {
  if ($800) {
   label = 184;
  } else {
   __THREW__ = 0;
   $801 = (invoke_iii(92,($798|0),(4728|0))|0);
   $802 = __THREW__; __THREW__ = 0;
   $803 = $802&1;
   if ($803) {
    label = 184;
   } else {
    __THREW__ = 0;
    invoke_vii(93,($773|0),($801|0));
    $804 = __THREW__; __THREW__ = 0;
    $805 = $804&1;
    if ($805) {
     label = 184;
    } else {
     $770 = $797;
     $771 = $773;
     $806 = $770;
     $807 = ((($806)) + 4|0);
     $808 = HEAP32[$807>>2]|0;
     $769 = $806;
     $809 = $769;
     $810 = ((($809)) + 8|0);
     $768 = $810;
     $811 = $768;
     $767 = $811;
     $812 = $767;
     $813 = HEAP32[$812>>2]|0;
     $814 = ($808>>>0)<($813>>>0);
     if ($814) {
      __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$806,1);
      $766 = $806;
      $815 = $766;
      $816 = ((($815)) + 8|0);
      $765 = $816;
      $817 = $765;
      $764 = $817;
      $818 = $764;
      $819 = ((($806)) + 4|0);
      $820 = HEAP32[$819>>2]|0;
      $762 = $820;
      $821 = $762;
      $822 = $771;
      $747 = $822;
      $823 = $747;
      $758 = $818;
      $759 = $821;
      $760 = $823;
      $824 = $758;
      $825 = $759;
      $826 = $760;
      $757 = $826;
      $827 = $757;
      ;HEAP8[$756>>0]=HEAP8[$761>>0]|0;
      $753 = $824;
      $754 = $825;
      $755 = $827;
      $828 = $753;
      $829 = $754;
      $830 = $755;
      $752 = $830;
      $831 = $752;
      $749 = $828;
      $750 = $829;
      $751 = $831;
      $832 = $750;
      $833 = $751;
      $748 = $833;
      $834 = $748;
      __THREW__ = 0;
      invoke_vii(77,($832|0),($834|0));
      $835 = __THREW__; __THREW__ = 0;
      $836 = $835&1;
      if ($836) {
       label = 185;
      } else {
       __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
       $837 = ((($806)) + 4|0);
       $838 = HEAP32[$837>>2]|0;
       $839 = ((($838)) + 4|0);
       HEAP32[$837>>2] = $839;
      }
     } else {
      $840 = $771;
      $763 = $840;
      $841 = $763;
      __THREW__ = 0;
      invoke_vii(78,($806|0),($841|0));
      $842 = __THREW__; __THREW__ = 0;
      $843 = $842&1;
      if ($843) {
       label = 185;
      }
     }
     if ((label|0) == 185) {
      $2216 = ___cxa_find_matching_catch()|0;
      $2217 = tempRet0;
      $774 = $2216;
      $775 = $2217;
      __ZN6refptrI12staticScene2ED2Ev($773);
      break;
     }
     __ZN6refptrI12staticScene2ED2Ev($773);
     $844 = ((($type)) + 8|0);
     __THREW__ = 0;
     $845 = (invoke_i(91)|0);
     $846 = __THREW__; __THREW__ = 0;
     $847 = $846&1;
     if ($847) {
      label = 184;
     } else {
      __THREW__ = 0;
      $848 = (invoke_iii(92,($845|0),(4744|0))|0);
      $849 = __THREW__; __THREW__ = 0;
      $850 = $849&1;
      if ($850) {
       label = 184;
      } else {
       __THREW__ = 0;
       invoke_vii(93,($776|0),($848|0));
       $851 = __THREW__; __THREW__ = 0;
       $852 = $851&1;
       if ($852) {
        label = 184;
       } else {
        $745 = $844;
        $746 = $776;
        $853 = $745;
        $854 = ((($853)) + 4|0);
        $855 = HEAP32[$854>>2]|0;
        $744 = $853;
        $856 = $744;
        $857 = ((($856)) + 8|0);
        $743 = $857;
        $858 = $743;
        $742 = $858;
        $859 = $742;
        $860 = HEAP32[$859>>2]|0;
        $861 = ($855>>>0)<($860>>>0);
        if ($861) {
         __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i15,$853,1);
         $741 = $853;
         $862 = $741;
         $863 = ((($862)) + 8|0);
         $740 = $863;
         $864 = $740;
         $739 = $864;
         $865 = $739;
         $866 = ((($853)) + 4|0);
         $867 = HEAP32[$866>>2]|0;
         $737 = $867;
         $868 = $737;
         $869 = $746;
         $722 = $869;
         $870 = $722;
         $733 = $865;
         $734 = $868;
         $735 = $870;
         $871 = $733;
         $872 = $734;
         $873 = $735;
         $732 = $873;
         $874 = $732;
         ;HEAP8[$731>>0]=HEAP8[$736>>0]|0;
         $728 = $871;
         $729 = $872;
         $730 = $874;
         $875 = $728;
         $876 = $729;
         $877 = $730;
         $727 = $877;
         $878 = $727;
         $724 = $875;
         $725 = $876;
         $726 = $878;
         $879 = $725;
         $880 = $726;
         $723 = $880;
         $881 = $723;
         __THREW__ = 0;
         invoke_vii(77,($879|0),($881|0));
         $882 = __THREW__; __THREW__ = 0;
         $883 = $882&1;
         if ($883) {
          label = 186;
         } else {
          __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i15);
          $884 = ((($853)) + 4|0);
          $885 = HEAP32[$884>>2]|0;
          $886 = ((($885)) + 4|0);
          HEAP32[$884>>2] = $886;
         }
        } else {
         $887 = $746;
         $738 = $887;
         $888 = $738;
         __THREW__ = 0;
         invoke_vii(78,($853|0),($888|0));
         $889 = __THREW__; __THREW__ = 0;
         $890 = $889&1;
         if ($890) {
          label = 186;
         }
        }
        if ((label|0) == 186) {
         $2218 = ___cxa_find_matching_catch()|0;
         $2219 = tempRet0;
         $774 = $2218;
         $775 = $2219;
         __ZN6refptrI12staticScene2ED2Ev($776);
         break;
        }
        __ZN6refptrI12staticScene2ED2Ev($776);
        $891 = $772;
        $720 = $891;
        $721 = $type;
        $892 = $720;
        $893 = ((($892)) + 4|0);
        $894 = HEAP32[$893>>2]|0;
        $719 = $892;
        $895 = $719;
        $896 = ((($895)) + 8|0);
        $718 = $896;
        $897 = $718;
        $717 = $897;
        $898 = $717;
        $899 = HEAP32[$898>>2]|0;
        $900 = ($894|0)!=($899|0);
        if ($900) {
         __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i19,$892,1);
         $716 = $892;
         $901 = $716;
         $902 = ((($901)) + 8|0);
         $715 = $902;
         $903 = $715;
         $714 = $903;
         $904 = $714;
         $905 = ((($892)) + 4|0);
         $906 = HEAP32[$905>>2]|0;
         $713 = $906;
         $907 = $713;
         $908 = $721;
         $709 = $904;
         $710 = $907;
         $711 = $908;
         $909 = $709;
         $910 = $710;
         $911 = $711;
         $708 = $911;
         $912 = $708;
         ;HEAP8[$707>>0]=HEAP8[$712>>0]|0;
         $704 = $909;
         $705 = $910;
         $706 = $912;
         $913 = $704;
         $914 = $705;
         $915 = $706;
         $703 = $915;
         $916 = $703;
         $700 = $913;
         $701 = $914;
         $702 = $916;
         $917 = $701;
         $918 = $702;
         $699 = $918;
         $919 = $699;
         __THREW__ = 0;
         invoke_vii(94,($917|0),($919|0));
         $920 = __THREW__; __THREW__ = 0;
         $921 = $920&1;
         if ($921) {
          label = 184;
          break;
         }
         __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i19);
         $922 = ((($892)) + 4|0);
         $923 = HEAP32[$922>>2]|0;
         $924 = ((($923)) + 20|0);
         HEAP32[$922>>2] = $924;
        } else {
         $925 = $721;
         __THREW__ = 0;
         invoke_vii(95,($892|0),($925|0));
         $926 = __THREW__; __THREW__ = 0;
         $927 = $926&1;
         if ($927) {
          label = 184;
          break;
         }
        }
        __ZN9trackTypeD2Ev($type);
        __ZN9trackTypeC2Ev($type1);
        HEAP8[$type1>>0] = 3;
        $928 = ((($type1)) + 1|0);
        HEAP8[$928>>0] = 5;
        $929 = ((($type1)) + 2|0);
        HEAP8[$929>>0] = 0;
        $930 = ((($type1)) + 3|0);
        HEAP8[$930>>0] = 0;
        $931 = ((($type1)) + 4|0);
        HEAP8[$931>>0] = 0;
        $932 = ((($type1)) + 8|0);
        __THREW__ = 0;
        $933 = (invoke_i(91)|0);
        $934 = __THREW__; __THREW__ = 0;
        $935 = $934&1;
        do {
         if ($935) {
          label = 188;
         } else {
          __THREW__ = 0;
          $936 = (invoke_iii(92,($933|0),(4760|0))|0);
          $937 = __THREW__; __THREW__ = 0;
          $938 = $937&1;
          if ($938) {
           label = 188;
          } else {
           __THREW__ = 0;
           invoke_vii(93,($777|0),($936|0));
           $939 = __THREW__; __THREW__ = 0;
           $940 = $939&1;
           if ($940) {
            label = 188;
           } else {
            $697 = $932;
            $698 = $777;
            $941 = $697;
            $942 = ((($941)) + 4|0);
            $943 = HEAP32[$942>>2]|0;
            $696 = $941;
            $944 = $696;
            $945 = ((($944)) + 8|0);
            $695 = $945;
            $946 = $695;
            $694 = $946;
            $947 = $694;
            $948 = HEAP32[$947>>2]|0;
            $949 = ($943>>>0)<($948>>>0);
            if ($949) {
             __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i22,$941,1);
             $693 = $941;
             $950 = $693;
             $951 = ((($950)) + 8|0);
             $692 = $951;
             $952 = $692;
             $691 = $952;
             $953 = $691;
             $954 = ((($941)) + 4|0);
             $955 = HEAP32[$954>>2]|0;
             $689 = $955;
             $956 = $689;
             $957 = $698;
             $674 = $957;
             $958 = $674;
             $685 = $953;
             $686 = $956;
             $687 = $958;
             $959 = $685;
             $960 = $686;
             $961 = $687;
             $684 = $961;
             $962 = $684;
             ;HEAP8[$683>>0]=HEAP8[$688>>0]|0;
             $680 = $959;
             $681 = $960;
             $682 = $962;
             $963 = $680;
             $964 = $681;
             $965 = $682;
             $679 = $965;
             $966 = $679;
             $676 = $963;
             $677 = $964;
             $678 = $966;
             $967 = $677;
             $968 = $678;
             $675 = $968;
             $969 = $675;
             __THREW__ = 0;
             invoke_vii(77,($967|0),($969|0));
             $970 = __THREW__; __THREW__ = 0;
             $971 = $970&1;
             if ($971) {
              label = 189;
             } else {
              __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i22);
              $972 = ((($941)) + 4|0);
              $973 = HEAP32[$972>>2]|0;
              $974 = ((($973)) + 4|0);
              HEAP32[$972>>2] = $974;
             }
            } else {
             $975 = $698;
             $690 = $975;
             $976 = $690;
             __THREW__ = 0;
             invoke_vii(78,($941|0),($976|0));
             $977 = __THREW__; __THREW__ = 0;
             $978 = $977&1;
             if ($978) {
              label = 189;
             }
            }
            if ((label|0) == 189) {
             $2222 = ___cxa_find_matching_catch()|0;
             $2223 = tempRet0;
             $774 = $2222;
             $775 = $2223;
             __ZN6refptrI12staticScene2ED2Ev($777);
             break;
            }
            __ZN6refptrI12staticScene2ED2Ev($777);
            $979 = $772;
            $672 = $979;
            $673 = $type1;
            $980 = $672;
            $981 = ((($980)) + 4|0);
            $982 = HEAP32[$981>>2]|0;
            $671 = $980;
            $983 = $671;
            $984 = ((($983)) + 8|0);
            $670 = $984;
            $985 = $670;
            $669 = $985;
            $986 = $669;
            $987 = HEAP32[$986>>2]|0;
            $988 = ($982|0)!=($987|0);
            if ($988) {
             __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i26,$980,1);
             $668 = $980;
             $989 = $668;
             $990 = ((($989)) + 8|0);
             $667 = $990;
             $991 = $667;
             $666 = $991;
             $992 = $666;
             $993 = ((($980)) + 4|0);
             $994 = HEAP32[$993>>2]|0;
             $665 = $994;
             $995 = $665;
             $996 = $673;
             $661 = $992;
             $662 = $995;
             $663 = $996;
             $997 = $661;
             $998 = $662;
             $999 = $663;
             $660 = $999;
             $1000 = $660;
             ;HEAP8[$659>>0]=HEAP8[$664>>0]|0;
             $656 = $997;
             $657 = $998;
             $658 = $1000;
             $1001 = $656;
             $1002 = $657;
             $1003 = $658;
             $655 = $1003;
             $1004 = $655;
             $652 = $1001;
             $653 = $1002;
             $654 = $1004;
             $1005 = $653;
             $1006 = $654;
             $651 = $1006;
             $1007 = $651;
             __THREW__ = 0;
             invoke_vii(94,($1005|0),($1007|0));
             $1008 = __THREW__; __THREW__ = 0;
             $1009 = $1008&1;
             if ($1009) {
              label = 188;
              break;
             }
             __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i26);
             $1010 = ((($980)) + 4|0);
             $1011 = HEAP32[$1010>>2]|0;
             $1012 = ((($1011)) + 20|0);
             HEAP32[$1010>>2] = $1012;
            } else {
             $1013 = $673;
             __THREW__ = 0;
             invoke_vii(95,($980|0),($1013|0));
             $1014 = __THREW__; __THREW__ = 0;
             $1015 = $1014&1;
             if ($1015) {
              label = 188;
              break;
             }
            }
            __ZN9trackTypeD2Ev($type1);
            __ZN9trackTypeC2Ev($type2);
            HEAP8[$type2>>0] = 2;
            $1016 = ((($type2)) + 1|0);
            HEAP8[$1016>>0] = 5;
            $1017 = ((($type2)) + 2|0);
            HEAP8[$1017>>0] = 1;
            $1018 = ((($type2)) + 3|0);
            HEAP8[$1018>>0] = 1;
            $1019 = ((($type2)) + 4|0);
            HEAP8[$1019>>0] = 0;
            $1020 = ((($type2)) + 8|0);
            __THREW__ = 0;
            $1021 = (invoke_i(91)|0);
            $1022 = __THREW__; __THREW__ = 0;
            $1023 = $1022&1;
            do {
             if ($1023) {
              label = 191;
             } else {
              __THREW__ = 0;
              $1024 = (invoke_iii(92,($1021|0),(4776|0))|0);
              $1025 = __THREW__; __THREW__ = 0;
              $1026 = $1025&1;
              if ($1026) {
               label = 191;
              } else {
               __THREW__ = 0;
               invoke_vii(93,($778|0),($1024|0));
               $1027 = __THREW__; __THREW__ = 0;
               $1028 = $1027&1;
               if ($1028) {
                label = 191;
               } else {
                $649 = $1020;
                $650 = $778;
                $1029 = $649;
                $1030 = ((($1029)) + 4|0);
                $1031 = HEAP32[$1030>>2]|0;
                $648 = $1029;
                $1032 = $648;
                $1033 = ((($1032)) + 8|0);
                $647 = $1033;
                $1034 = $647;
                $646 = $1034;
                $1035 = $646;
                $1036 = HEAP32[$1035>>2]|0;
                $1037 = ($1031>>>0)<($1036>>>0);
                do {
                 if ($1037) {
                  __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i30,$1029,1);
                  $645 = $1029;
                  $1038 = $645;
                  $1039 = ((($1038)) + 8|0);
                  $644 = $1039;
                  $1040 = $644;
                  $643 = $1040;
                  $1041 = $643;
                  $1042 = ((($1029)) + 4|0);
                  $1043 = HEAP32[$1042>>2]|0;
                  $641 = $1043;
                  $1044 = $641;
                  $1045 = $650;
                  $626 = $1045;
                  $1046 = $626;
                  $637 = $1041;
                  $638 = $1044;
                  $639 = $1046;
                  $1047 = $637;
                  $1048 = $638;
                  $1049 = $639;
                  $636 = $1049;
                  $1050 = $636;
                  ;HEAP8[$635>>0]=HEAP8[$640>>0]|0;
                  $632 = $1047;
                  $633 = $1048;
                  $634 = $1050;
                  $1051 = $632;
                  $1052 = $633;
                  $1053 = $634;
                  $631 = $1053;
                  $1054 = $631;
                  $628 = $1051;
                  $629 = $1052;
                  $630 = $1054;
                  $1055 = $629;
                  $1056 = $630;
                  $627 = $1056;
                  $1057 = $627;
                  __THREW__ = 0;
                  invoke_vii(77,($1055|0),($1057|0));
                  $1058 = __THREW__; __THREW__ = 0;
                  $1059 = $1058&1;
                  if ($1059) {
                   label = 192;
                   break;
                  }
                  __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i30);
                  $1060 = ((($1029)) + 4|0);
                  $1061 = HEAP32[$1060>>2]|0;
                  $1062 = ((($1061)) + 4|0);
                  HEAP32[$1060>>2] = $1062;
                 } else {
                  $1063 = $650;
                  $642 = $1063;
                  $1064 = $642;
                  __THREW__ = 0;
                  invoke_vii(78,($1029|0),($1064|0));
                  $1065 = __THREW__; __THREW__ = 0;
                  $1066 = $1065&1;
                  if ($1066) {
                   label = 192;
                  }
                 }
                } while(0);
                if ((label|0) == 192) {
                 $2226 = ___cxa_find_matching_catch()|0;
                 $2227 = tempRet0;
                 $774 = $2226;
                 $775 = $2227;
                 __ZN6refptrI12staticScene2ED2Ev($778);
                 break;
                }
                __ZN6refptrI12staticScene2ED2Ev($778);
                $1067 = ((($type2)) + 8|0);
                __THREW__ = 0;
                $1068 = (invoke_i(91)|0);
                $1069 = __THREW__; __THREW__ = 0;
                $1070 = $1069&1;
                if ($1070) {
                 label = 191;
                 break;
                }
                __THREW__ = 0;
                $1071 = (invoke_iii(92,($1068|0),(4792|0))|0);
                $1072 = __THREW__; __THREW__ = 0;
                $1073 = $1072&1;
                if ($1073) {
                 label = 191;
                 break;
                }
                __THREW__ = 0;
                invoke_vii(93,($779|0),($1071|0));
                $1074 = __THREW__; __THREW__ = 0;
                $1075 = $1074&1;
                if ($1075) {
                 label = 191;
                 break;
                }
                $624 = $1067;
                $625 = $779;
                $1076 = $624;
                $1077 = ((($1076)) + 4|0);
                $1078 = HEAP32[$1077>>2]|0;
                $623 = $1076;
                $1079 = $623;
                $1080 = ((($1079)) + 8|0);
                $622 = $1080;
                $1081 = $622;
                $621 = $1081;
                $1082 = $621;
                $1083 = HEAP32[$1082>>2]|0;
                $1084 = ($1078>>>0)<($1083>>>0);
                do {
                 if ($1084) {
                  __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i34,$1076,1);
                  $620 = $1076;
                  $1085 = $620;
                  $1086 = ((($1085)) + 8|0);
                  $619 = $1086;
                  $1087 = $619;
                  $618 = $1087;
                  $1088 = $618;
                  $1089 = ((($1076)) + 4|0);
                  $1090 = HEAP32[$1089>>2]|0;
                  $616 = $1090;
                  $1091 = $616;
                  $1092 = $625;
                  $601 = $1092;
                  $1093 = $601;
                  $612 = $1088;
                  $613 = $1091;
                  $614 = $1093;
                  $1094 = $612;
                  $1095 = $613;
                  $1096 = $614;
                  $611 = $1096;
                  $1097 = $611;
                  ;HEAP8[$610>>0]=HEAP8[$615>>0]|0;
                  $607 = $1094;
                  $608 = $1095;
                  $609 = $1097;
                  $1098 = $607;
                  $1099 = $608;
                  $1100 = $609;
                  $606 = $1100;
                  $1101 = $606;
                  $603 = $1098;
                  $604 = $1099;
                  $605 = $1101;
                  $1102 = $604;
                  $1103 = $605;
                  $602 = $1103;
                  $1104 = $602;
                  __THREW__ = 0;
                  invoke_vii(77,($1102|0),($1104|0));
                  $1105 = __THREW__; __THREW__ = 0;
                  $1106 = $1105&1;
                  if ($1106) {
                   label = 193;
                   break;
                  }
                  __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i34);
                  $1107 = ((($1076)) + 4|0);
                  $1108 = HEAP32[$1107>>2]|0;
                  $1109 = ((($1108)) + 4|0);
                  HEAP32[$1107>>2] = $1109;
                 } else {
                  $1110 = $625;
                  $617 = $1110;
                  $1111 = $617;
                  __THREW__ = 0;
                  invoke_vii(78,($1076|0),($1111|0));
                  $1112 = __THREW__; __THREW__ = 0;
                  $1113 = $1112&1;
                  if ($1113) {
                   label = 193;
                  }
                 }
                } while(0);
                if ((label|0) == 193) {
                 $2228 = ___cxa_find_matching_catch()|0;
                 $2229 = tempRet0;
                 $774 = $2228;
                 $775 = $2229;
                 __ZN6refptrI12staticScene2ED2Ev($779);
                 break;
                }
                __ZN6refptrI12staticScene2ED2Ev($779);
                $1114 = $772;
                $1115 = ((($1114)) + 12|0);
                $599 = $1115;
                $600 = $type2;
                $1116 = $599;
                $1117 = ((($1116)) + 4|0);
                $1118 = HEAP32[$1117>>2]|0;
                $598 = $1116;
                $1119 = $598;
                $1120 = ((($1119)) + 8|0);
                $597 = $1120;
                $1121 = $597;
                $596 = $1121;
                $1122 = $596;
                $1123 = HEAP32[$1122>>2]|0;
                $1124 = ($1118|0)!=($1123|0);
                if ($1124) {
                 __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i38,$1116,1);
                 $595 = $1116;
                 $1125 = $595;
                 $1126 = ((($1125)) + 8|0);
                 $594 = $1126;
                 $1127 = $594;
                 $593 = $1127;
                 $1128 = $593;
                 $1129 = ((($1116)) + 4|0);
                 $1130 = HEAP32[$1129>>2]|0;
                 $592 = $1130;
                 $1131 = $592;
                 $1132 = $600;
                 $588 = $1128;
                 $589 = $1131;
                 $590 = $1132;
                 $1133 = $588;
                 $1134 = $589;
                 $1135 = $590;
                 $587 = $1135;
                 $1136 = $587;
                 ;HEAP8[$586>>0]=HEAP8[$591>>0]|0;
                 $583 = $1133;
                 $584 = $1134;
                 $585 = $1136;
                 $1137 = $583;
                 $1138 = $584;
                 $1139 = $585;
                 $582 = $1139;
                 $1140 = $582;
                 $579 = $1137;
                 $580 = $1138;
                 $581 = $1140;
                 $1141 = $580;
                 $1142 = $581;
                 $578 = $1142;
                 $1143 = $578;
                 __THREW__ = 0;
                 invoke_vii(94,($1141|0),($1143|0));
                 $1144 = __THREW__; __THREW__ = 0;
                 $1145 = $1144&1;
                 if ($1145) {
                  label = 191;
                  break;
                 }
                 __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i38);
                 $1146 = ((($1116)) + 4|0);
                 $1147 = HEAP32[$1146>>2]|0;
                 $1148 = ((($1147)) + 20|0);
                 HEAP32[$1146>>2] = $1148;
                } else {
                 $1149 = $600;
                 __THREW__ = 0;
                 invoke_vii(95,($1116|0),($1149|0));
                 $1150 = __THREW__; __THREW__ = 0;
                 $1151 = $1150&1;
                 if ($1151) {
                  label = 191;
                  break;
                 }
                }
                __ZN9trackTypeD2Ev($type2);
                __ZN9trackTypeC2Ev($type3);
                HEAP8[$type3>>0] = 3;
                $1152 = ((($type3)) + 1|0);
                HEAP8[$1152>>0] = 5;
                $1153 = ((($type3)) + 2|0);
                HEAP8[$1153>>0] = 0;
                $1154 = ((($type3)) + 3|0);
                HEAP8[$1154>>0] = 0;
                $1155 = ((($type3)) + 4|0);
                HEAP8[$1155>>0] = 0;
                $1156 = ((($type3)) + 8|0);
                __THREW__ = 0;
                $1157 = (invoke_i(91)|0);
                $1158 = __THREW__; __THREW__ = 0;
                $1159 = $1158&1;
                do {
                 if ($1159) {
                  label = 195;
                 } else {
                  __THREW__ = 0;
                  $1160 = (invoke_iii(92,($1157|0),(4808|0))|0);
                  $1161 = __THREW__; __THREW__ = 0;
                  $1162 = $1161&1;
                  if ($1162) {
                   label = 195;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(93,($780|0),($1160|0));
                  $1163 = __THREW__; __THREW__ = 0;
                  $1164 = $1163&1;
                  if ($1164) {
                   label = 195;
                   break;
                  }
                  $576 = $1156;
                  $577 = $780;
                  $1165 = $576;
                  $1166 = ((($1165)) + 4|0);
                  $1167 = HEAP32[$1166>>2]|0;
                  $575 = $1165;
                  $1168 = $575;
                  $1169 = ((($1168)) + 8|0);
                  $574 = $1169;
                  $1170 = $574;
                  $573 = $1170;
                  $1171 = $573;
                  $1172 = HEAP32[$1171>>2]|0;
                  $1173 = ($1167>>>0)<($1172>>>0);
                  do {
                   if ($1173) {
                    __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i42,$1165,1);
                    $572 = $1165;
                    $1174 = $572;
                    $1175 = ((($1174)) + 8|0);
                    $571 = $1175;
                    $1176 = $571;
                    $570 = $1176;
                    $1177 = $570;
                    $1178 = ((($1165)) + 4|0);
                    $1179 = HEAP32[$1178>>2]|0;
                    $568 = $1179;
                    $1180 = $568;
                    $1181 = $577;
                    $553 = $1181;
                    $1182 = $553;
                    $564 = $1177;
                    $565 = $1180;
                    $566 = $1182;
                    $1183 = $564;
                    $1184 = $565;
                    $1185 = $566;
                    $563 = $1185;
                    $1186 = $563;
                    ;HEAP8[$562>>0]=HEAP8[$567>>0]|0;
                    $559 = $1183;
                    $560 = $1184;
                    $561 = $1186;
                    $1187 = $559;
                    $1188 = $560;
                    $1189 = $561;
                    $558 = $1189;
                    $1190 = $558;
                    $555 = $1187;
                    $556 = $1188;
                    $557 = $1190;
                    $1191 = $556;
                    $1192 = $557;
                    $554 = $1192;
                    $1193 = $554;
                    __THREW__ = 0;
                    invoke_vii(77,($1191|0),($1193|0));
                    $1194 = __THREW__; __THREW__ = 0;
                    $1195 = $1194&1;
                    if ($1195) {
                     label = 196;
                     break;
                    }
                    __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i42);
                    $1196 = ((($1165)) + 4|0);
                    $1197 = HEAP32[$1196>>2]|0;
                    $1198 = ((($1197)) + 4|0);
                    HEAP32[$1196>>2] = $1198;
                   } else {
                    $1199 = $577;
                    $569 = $1199;
                    $1200 = $569;
                    __THREW__ = 0;
                    invoke_vii(78,($1165|0),($1200|0));
                    $1201 = __THREW__; __THREW__ = 0;
                    $1202 = $1201&1;
                    if ($1202) {
                     label = 196;
                    }
                   }
                  } while(0);
                  if ((label|0) == 196) {
                   $2232 = ___cxa_find_matching_catch()|0;
                   $2233 = tempRet0;
                   $774 = $2232;
                   $775 = $2233;
                   __ZN6refptrI12staticScene2ED2Ev($780);
                   break;
                  }
                  __ZN6refptrI12staticScene2ED2Ev($780);
                  $1203 = ((($type3)) + 8|0);
                  __THREW__ = 0;
                  $1204 = (invoke_i(91)|0);
                  $1205 = __THREW__; __THREW__ = 0;
                  $1206 = $1205&1;
                  if ($1206) {
                   label = 195;
                   break;
                  }
                  __THREW__ = 0;
                  $1207 = (invoke_iii(92,($1204|0),(4824|0))|0);
                  $1208 = __THREW__; __THREW__ = 0;
                  $1209 = $1208&1;
                  if ($1209) {
                   label = 195;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(93,($781|0),($1207|0));
                  $1210 = __THREW__; __THREW__ = 0;
                  $1211 = $1210&1;
                  if ($1211) {
                   label = 195;
                   break;
                  }
                  $551 = $1203;
                  $552 = $781;
                  $1212 = $551;
                  $1213 = ((($1212)) + 4|0);
                  $1214 = HEAP32[$1213>>2]|0;
                  $550 = $1212;
                  $1215 = $550;
                  $1216 = ((($1215)) + 8|0);
                  $549 = $1216;
                  $1217 = $549;
                  $548 = $1217;
                  $1218 = $548;
                  $1219 = HEAP32[$1218>>2]|0;
                  $1220 = ($1214>>>0)<($1219>>>0);
                  do {
                   if ($1220) {
                    __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i46,$1212,1);
                    $547 = $1212;
                    $1221 = $547;
                    $1222 = ((($1221)) + 8|0);
                    $546 = $1222;
                    $1223 = $546;
                    $545 = $1223;
                    $1224 = $545;
                    $1225 = ((($1212)) + 4|0);
                    $1226 = HEAP32[$1225>>2]|0;
                    $543 = $1226;
                    $1227 = $543;
                    $1228 = $552;
                    $528 = $1228;
                    $1229 = $528;
                    $539 = $1224;
                    $540 = $1227;
                    $541 = $1229;
                    $1230 = $539;
                    $1231 = $540;
                    $1232 = $541;
                    $538 = $1232;
                    $1233 = $538;
                    ;HEAP8[$537>>0]=HEAP8[$542>>0]|0;
                    $534 = $1230;
                    $535 = $1231;
                    $536 = $1233;
                    $1234 = $534;
                    $1235 = $535;
                    $1236 = $536;
                    $533 = $1236;
                    $1237 = $533;
                    $530 = $1234;
                    $531 = $1235;
                    $532 = $1237;
                    $1238 = $531;
                    $1239 = $532;
                    $529 = $1239;
                    $1240 = $529;
                    __THREW__ = 0;
                    invoke_vii(77,($1238|0),($1240|0));
                    $1241 = __THREW__; __THREW__ = 0;
                    $1242 = $1241&1;
                    if ($1242) {
                     label = 197;
                     break;
                    }
                    __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i46);
                    $1243 = ((($1212)) + 4|0);
                    $1244 = HEAP32[$1243>>2]|0;
                    $1245 = ((($1244)) + 4|0);
                    HEAP32[$1243>>2] = $1245;
                   } else {
                    $1246 = $552;
                    $544 = $1246;
                    $1247 = $544;
                    __THREW__ = 0;
                    invoke_vii(78,($1212|0),($1247|0));
                    $1248 = __THREW__; __THREW__ = 0;
                    $1249 = $1248&1;
                    if ($1249) {
                     label = 197;
                    }
                   }
                  } while(0);
                  if ((label|0) == 197) {
                   $2234 = ___cxa_find_matching_catch()|0;
                   $2235 = tempRet0;
                   $774 = $2234;
                   $775 = $2235;
                   __ZN6refptrI12staticScene2ED2Ev($781);
                   break;
                  }
                  __ZN6refptrI12staticScene2ED2Ev($781);
                  $1250 = $772;
                  $526 = $1250;
                  $527 = $type3;
                  $1251 = $526;
                  $1252 = ((($1251)) + 4|0);
                  $1253 = HEAP32[$1252>>2]|0;
                  $525 = $1251;
                  $1254 = $525;
                  $1255 = ((($1254)) + 8|0);
                  $524 = $1255;
                  $1256 = $524;
                  $523 = $1256;
                  $1257 = $523;
                  $1258 = HEAP32[$1257>>2]|0;
                  $1259 = ($1253|0)!=($1258|0);
                  if ($1259) {
                   __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i50,$1251,1);
                   $522 = $1251;
                   $1260 = $522;
                   $1261 = ((($1260)) + 8|0);
                   $521 = $1261;
                   $1262 = $521;
                   $520 = $1262;
                   $1263 = $520;
                   $1264 = ((($1251)) + 4|0);
                   $1265 = HEAP32[$1264>>2]|0;
                   $519 = $1265;
                   $1266 = $519;
                   $1267 = $527;
                   $515 = $1263;
                   $516 = $1266;
                   $517 = $1267;
                   $1268 = $515;
                   $1269 = $516;
                   $1270 = $517;
                   $514 = $1270;
                   $1271 = $514;
                   ;HEAP8[$513>>0]=HEAP8[$518>>0]|0;
                   $510 = $1268;
                   $511 = $1269;
                   $512 = $1271;
                   $1272 = $510;
                   $1273 = $511;
                   $1274 = $512;
                   $509 = $1274;
                   $1275 = $509;
                   $506 = $1272;
                   $507 = $1273;
                   $508 = $1275;
                   $1276 = $507;
                   $1277 = $508;
                   $505 = $1277;
                   $1278 = $505;
                   __THREW__ = 0;
                   invoke_vii(94,($1276|0),($1278|0));
                   $1279 = __THREW__; __THREW__ = 0;
                   $1280 = $1279&1;
                   if ($1280) {
                    label = 195;
                    break;
                   }
                   __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i50);
                   $1281 = ((($1251)) + 4|0);
                   $1282 = HEAP32[$1281>>2]|0;
                   $1283 = ((($1282)) + 20|0);
                   HEAP32[$1281>>2] = $1283;
                  } else {
                   $1284 = $527;
                   __THREW__ = 0;
                   invoke_vii(95,($1251|0),($1284|0));
                   $1285 = __THREW__; __THREW__ = 0;
                   $1286 = $1285&1;
                   if ($1286) {
                    label = 195;
                    break;
                   }
                  }
                  __ZN9trackTypeD2Ev($type3);
                  __ZN9trackTypeC2Ev($type4);
                  HEAP8[$type4>>0] = 3;
                  $1287 = ((($type4)) + 1|0);
                  HEAP8[$1287>>0] = 5;
                  $1288 = ((($type4)) + 2|0);
                  HEAP8[$1288>>0] = 0;
                  $1289 = ((($type4)) + 3|0);
                  HEAP8[$1289>>0] = 0;
                  $1290 = ((($type4)) + 4|0);
                  HEAP8[$1290>>0] = 0;
                  $1291 = ((($type4)) + 8|0);
                  __THREW__ = 0;
                  $1292 = (invoke_i(91)|0);
                  $1293 = __THREW__; __THREW__ = 0;
                  $1294 = $1293&1;
                  do {
                   if ($1294) {
                    label = 199;
                   } else {
                    __THREW__ = 0;
                    $1295 = (invoke_iii(92,($1292|0),(4840|0))|0);
                    $1296 = __THREW__; __THREW__ = 0;
                    $1297 = $1296&1;
                    if ($1297) {
                     label = 199;
                     break;
                    }
                    __THREW__ = 0;
                    invoke_vii(93,($782|0),($1295|0));
                    $1298 = __THREW__; __THREW__ = 0;
                    $1299 = $1298&1;
                    if ($1299) {
                     label = 199;
                     break;
                    }
                    $503 = $1291;
                    $504 = $782;
                    $1300 = $503;
                    $1301 = ((($1300)) + 4|0);
                    $1302 = HEAP32[$1301>>2]|0;
                    $502 = $1300;
                    $1303 = $502;
                    $1304 = ((($1303)) + 8|0);
                    $501 = $1304;
                    $1305 = $501;
                    $500 = $1305;
                    $1306 = $500;
                    $1307 = HEAP32[$1306>>2]|0;
                    $1308 = ($1302>>>0)<($1307>>>0);
                    do {
                     if ($1308) {
                      __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i54,$1300,1);
                      $499 = $1300;
                      $1309 = $499;
                      $1310 = ((($1309)) + 8|0);
                      $498 = $1310;
                      $1311 = $498;
                      $497 = $1311;
                      $1312 = $497;
                      $1313 = ((($1300)) + 4|0);
                      $1314 = HEAP32[$1313>>2]|0;
                      $495 = $1314;
                      $1315 = $495;
                      $1316 = $504;
                      $480 = $1316;
                      $1317 = $480;
                      $491 = $1312;
                      $492 = $1315;
                      $493 = $1317;
                      $1318 = $491;
                      $1319 = $492;
                      $1320 = $493;
                      $490 = $1320;
                      $1321 = $490;
                      ;HEAP8[$489>>0]=HEAP8[$494>>0]|0;
                      $486 = $1318;
                      $487 = $1319;
                      $488 = $1321;
                      $1322 = $486;
                      $1323 = $487;
                      $1324 = $488;
                      $485 = $1324;
                      $1325 = $485;
                      $482 = $1322;
                      $483 = $1323;
                      $484 = $1325;
                      $1326 = $483;
                      $1327 = $484;
                      $481 = $1327;
                      $1328 = $481;
                      __THREW__ = 0;
                      invoke_vii(77,($1326|0),($1328|0));
                      $1329 = __THREW__; __THREW__ = 0;
                      $1330 = $1329&1;
                      if ($1330) {
                       label = 200;
                       break;
                      }
                      __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i54);
                      $1331 = ((($1300)) + 4|0);
                      $1332 = HEAP32[$1331>>2]|0;
                      $1333 = ((($1332)) + 4|0);
                      HEAP32[$1331>>2] = $1333;
                     } else {
                      $1334 = $504;
                      $496 = $1334;
                      $1335 = $496;
                      __THREW__ = 0;
                      invoke_vii(78,($1300|0),($1335|0));
                      $1336 = __THREW__; __THREW__ = 0;
                      $1337 = $1336&1;
                      if ($1337) {
                       label = 200;
                      }
                     }
                    } while(0);
                    if ((label|0) == 200) {
                     $2238 = ___cxa_find_matching_catch()|0;
                     $2239 = tempRet0;
                     $774 = $2238;
                     $775 = $2239;
                     __ZN6refptrI12staticScene2ED2Ev($782);
                     break;
                    }
                    __ZN6refptrI12staticScene2ED2Ev($782);
                    $1338 = $772;
                    $478 = $1338;
                    $479 = $type4;
                    $1339 = $478;
                    $1340 = ((($1339)) + 4|0);
                    $1341 = HEAP32[$1340>>2]|0;
                    $477 = $1339;
                    $1342 = $477;
                    $1343 = ((($1342)) + 8|0);
                    $476 = $1343;
                    $1344 = $476;
                    $475 = $1344;
                    $1345 = $475;
                    $1346 = HEAP32[$1345>>2]|0;
                    $1347 = ($1341|0)!=($1346|0);
                    if ($1347) {
                     __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i58,$1339,1);
                     $474 = $1339;
                     $1348 = $474;
                     $1349 = ((($1348)) + 8|0);
                     $473 = $1349;
                     $1350 = $473;
                     $472 = $1350;
                     $1351 = $472;
                     $1352 = ((($1339)) + 4|0);
                     $1353 = HEAP32[$1352>>2]|0;
                     $471 = $1353;
                     $1354 = $471;
                     $1355 = $479;
                     $467 = $1351;
                     $468 = $1354;
                     $469 = $1355;
                     $1356 = $467;
                     $1357 = $468;
                     $1358 = $469;
                     $466 = $1358;
                     $1359 = $466;
                     ;HEAP8[$465>>0]=HEAP8[$470>>0]|0;
                     $462 = $1356;
                     $463 = $1357;
                     $464 = $1359;
                     $1360 = $462;
                     $1361 = $463;
                     $1362 = $464;
                     $461 = $1362;
                     $1363 = $461;
                     $458 = $1360;
                     $459 = $1361;
                     $460 = $1363;
                     $1364 = $459;
                     $1365 = $460;
                     $457 = $1365;
                     $1366 = $457;
                     __THREW__ = 0;
                     invoke_vii(94,($1364|0),($1366|0));
                     $1367 = __THREW__; __THREW__ = 0;
                     $1368 = $1367&1;
                     if ($1368) {
                      label = 199;
                      break;
                     }
                     __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i58);
                     $1369 = ((($1339)) + 4|0);
                     $1370 = HEAP32[$1369>>2]|0;
                     $1371 = ((($1370)) + 20|0);
                     HEAP32[$1369>>2] = $1371;
                    } else {
                     $1372 = $479;
                     __THREW__ = 0;
                     invoke_vii(95,($1339|0),($1372|0));
                     $1373 = __THREW__; __THREW__ = 0;
                     $1374 = $1373&1;
                     if ($1374) {
                      label = 199;
                      break;
                     }
                    }
                    __ZN9trackTypeD2Ev($type4);
                    __ZN9trackTypeC2Ev($type5);
                    HEAP8[$type5>>0] = 3;
                    $1375 = ((($type5)) + 1|0);
                    HEAP8[$1375>>0] = 5;
                    $1376 = ((($type5)) + 2|0);
                    HEAP8[$1376>>0] = 0;
                    $1377 = ((($type5)) + 3|0);
                    HEAP8[$1377>>0] = 0;
                    $1378 = ((($type5)) + 4|0);
                    HEAP8[$1378>>0] = 0;
                    $1379 = ((($type5)) + 8|0);
                    __THREW__ = 0;
                    $1380 = (invoke_i(91)|0);
                    $1381 = __THREW__; __THREW__ = 0;
                    $1382 = $1381&1;
                    do {
                     if ($1382) {
                      label = 202;
                     } else {
                      __THREW__ = 0;
                      $1383 = (invoke_iii(92,($1380|0),(4864|0))|0);
                      $1384 = __THREW__; __THREW__ = 0;
                      $1385 = $1384&1;
                      if ($1385) {
                       label = 202;
                       break;
                      }
                      __THREW__ = 0;
                      invoke_vii(93,($783|0),($1383|0));
                      $1386 = __THREW__; __THREW__ = 0;
                      $1387 = $1386&1;
                      if ($1387) {
                       label = 202;
                       break;
                      }
                      $455 = $1379;
                      $456 = $783;
                      $1388 = $455;
                      $1389 = ((($1388)) + 4|0);
                      $1390 = HEAP32[$1389>>2]|0;
                      $454 = $1388;
                      $1391 = $454;
                      $1392 = ((($1391)) + 8|0);
                      $453 = $1392;
                      $1393 = $453;
                      $452 = $1393;
                      $1394 = $452;
                      $1395 = HEAP32[$1394>>2]|0;
                      $1396 = ($1390>>>0)<($1395>>>0);
                      do {
                       if ($1396) {
                        __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i62,$1388,1);
                        $451 = $1388;
                        $1397 = $451;
                        $1398 = ((($1397)) + 8|0);
                        $450 = $1398;
                        $1399 = $450;
                        $449 = $1399;
                        $1400 = $449;
                        $1401 = ((($1388)) + 4|0);
                        $1402 = HEAP32[$1401>>2]|0;
                        $447 = $1402;
                        $1403 = $447;
                        $1404 = $456;
                        $432 = $1404;
                        $1405 = $432;
                        $443 = $1400;
                        $444 = $1403;
                        $445 = $1405;
                        $1406 = $443;
                        $1407 = $444;
                        $1408 = $445;
                        $442 = $1408;
                        $1409 = $442;
                        ;HEAP8[$441>>0]=HEAP8[$446>>0]|0;
                        $438 = $1406;
                        $439 = $1407;
                        $440 = $1409;
                        $1410 = $438;
                        $1411 = $439;
                        $1412 = $440;
                        $437 = $1412;
                        $1413 = $437;
                        $434 = $1410;
                        $435 = $1411;
                        $436 = $1413;
                        $1414 = $435;
                        $1415 = $436;
                        $433 = $1415;
                        $1416 = $433;
                        __THREW__ = 0;
                        invoke_vii(77,($1414|0),($1416|0));
                        $1417 = __THREW__; __THREW__ = 0;
                        $1418 = $1417&1;
                        if ($1418) {
                         label = 203;
                         break;
                        }
                        __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i62);
                        $1419 = ((($1388)) + 4|0);
                        $1420 = HEAP32[$1419>>2]|0;
                        $1421 = ((($1420)) + 4|0);
                        HEAP32[$1419>>2] = $1421;
                       } else {
                        $1422 = $456;
                        $448 = $1422;
                        $1423 = $448;
                        __THREW__ = 0;
                        invoke_vii(78,($1388|0),($1423|0));
                        $1424 = __THREW__; __THREW__ = 0;
                        $1425 = $1424&1;
                        if ($1425) {
                         label = 203;
                        }
                       }
                      } while(0);
                      if ((label|0) == 203) {
                       $2242 = ___cxa_find_matching_catch()|0;
                       $2243 = tempRet0;
                       $774 = $2242;
                       $775 = $2243;
                       __ZN6refptrI12staticScene2ED2Ev($783);
                       break;
                      }
                      __ZN6refptrI12staticScene2ED2Ev($783);
                      $1426 = $772;
                      $430 = $1426;
                      $431 = $type5;
                      $1427 = $430;
                      $1428 = ((($1427)) + 4|0);
                      $1429 = HEAP32[$1428>>2]|0;
                      $429 = $1427;
                      $1430 = $429;
                      $1431 = ((($1430)) + 8|0);
                      $428 = $1431;
                      $1432 = $428;
                      $427 = $1432;
                      $1433 = $427;
                      $1434 = HEAP32[$1433>>2]|0;
                      $1435 = ($1429|0)!=($1434|0);
                      if ($1435) {
                       __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i66,$1427,1);
                       $426 = $1427;
                       $1436 = $426;
                       $1437 = ((($1436)) + 8|0);
                       $425 = $1437;
                       $1438 = $425;
                       $424 = $1438;
                       $1439 = $424;
                       $1440 = ((($1427)) + 4|0);
                       $1441 = HEAP32[$1440>>2]|0;
                       $423 = $1441;
                       $1442 = $423;
                       $1443 = $431;
                       $419 = $1439;
                       $420 = $1442;
                       $421 = $1443;
                       $1444 = $419;
                       $1445 = $420;
                       $1446 = $421;
                       $418 = $1446;
                       $1447 = $418;
                       ;HEAP8[$417>>0]=HEAP8[$422>>0]|0;
                       $414 = $1444;
                       $415 = $1445;
                       $416 = $1447;
                       $1448 = $414;
                       $1449 = $415;
                       $1450 = $416;
                       $413 = $1450;
                       $1451 = $413;
                       $410 = $1448;
                       $411 = $1449;
                       $412 = $1451;
                       $1452 = $411;
                       $1453 = $412;
                       $409 = $1453;
                       $1454 = $409;
                       __THREW__ = 0;
                       invoke_vii(94,($1452|0),($1454|0));
                       $1455 = __THREW__; __THREW__ = 0;
                       $1456 = $1455&1;
                       if ($1456) {
                        label = 202;
                        break;
                       }
                       __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i66);
                       $1457 = ((($1427)) + 4|0);
                       $1458 = HEAP32[$1457>>2]|0;
                       $1459 = ((($1458)) + 20|0);
                       HEAP32[$1457>>2] = $1459;
                      } else {
                       $1460 = $431;
                       __THREW__ = 0;
                       invoke_vii(95,($1427|0),($1460|0));
                       $1461 = __THREW__; __THREW__ = 0;
                       $1462 = $1461&1;
                       if ($1462) {
                        label = 202;
                        break;
                       }
                      }
                      __ZN9trackTypeD2Ev($type5);
                      __ZN9trackTypeC2Ev($type6);
                      HEAP8[$type6>>0] = 3;
                      $1463 = ((($type6)) + 1|0);
                      HEAP8[$1463>>0] = 6;
                      $1464 = ((($type6)) + 2|0);
                      HEAP8[$1464>>0] = 0;
                      $1465 = ((($type6)) + 3|0);
                      HEAP8[$1465>>0] = 0;
                      $1466 = ((($type6)) + 4|0);
                      HEAP8[$1466>>0] = 0;
                      $1467 = ((($type6)) + 8|0);
                      __THREW__ = 0;
                      $1468 = (invoke_i(91)|0);
                      $1469 = __THREW__; __THREW__ = 0;
                      $1470 = $1469&1;
                      do {
                       if ($1470) {
                        label = 205;
                       } else {
                        __THREW__ = 0;
                        $1471 = (invoke_iii(92,($1468|0),(4888|0))|0);
                        $1472 = __THREW__; __THREW__ = 0;
                        $1473 = $1472&1;
                        if ($1473) {
                         label = 205;
                         break;
                        }
                        __THREW__ = 0;
                        invoke_vii(93,($784|0),($1471|0));
                        $1474 = __THREW__; __THREW__ = 0;
                        $1475 = $1474&1;
                        if ($1475) {
                         label = 205;
                         break;
                        }
                        $407 = $1467;
                        $408 = $784;
                        $1476 = $407;
                        $1477 = ((($1476)) + 4|0);
                        $1478 = HEAP32[$1477>>2]|0;
                        $406 = $1476;
                        $1479 = $406;
                        $1480 = ((($1479)) + 8|0);
                        $405 = $1480;
                        $1481 = $405;
                        $404 = $1481;
                        $1482 = $404;
                        $1483 = HEAP32[$1482>>2]|0;
                        $1484 = ($1478>>>0)<($1483>>>0);
                        do {
                         if ($1484) {
                          __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i70,$1476,1);
                          $403 = $1476;
                          $1485 = $403;
                          $1486 = ((($1485)) + 8|0);
                          $402 = $1486;
                          $1487 = $402;
                          $401 = $1487;
                          $1488 = $401;
                          $1489 = ((($1476)) + 4|0);
                          $1490 = HEAP32[$1489>>2]|0;
                          $399 = $1490;
                          $1491 = $399;
                          $1492 = $408;
                          $384 = $1492;
                          $1493 = $384;
                          $395 = $1488;
                          $396 = $1491;
                          $397 = $1493;
                          $1494 = $395;
                          $1495 = $396;
                          $1496 = $397;
                          $394 = $1496;
                          $1497 = $394;
                          ;HEAP8[$393>>0]=HEAP8[$398>>0]|0;
                          $390 = $1494;
                          $391 = $1495;
                          $392 = $1497;
                          $1498 = $390;
                          $1499 = $391;
                          $1500 = $392;
                          $389 = $1500;
                          $1501 = $389;
                          $386 = $1498;
                          $387 = $1499;
                          $388 = $1501;
                          $1502 = $387;
                          $1503 = $388;
                          $385 = $1503;
                          $1504 = $385;
                          __THREW__ = 0;
                          invoke_vii(77,($1502|0),($1504|0));
                          $1505 = __THREW__; __THREW__ = 0;
                          $1506 = $1505&1;
                          if ($1506) {
                           label = 206;
                           break;
                          }
                          __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i70);
                          $1507 = ((($1476)) + 4|0);
                          $1508 = HEAP32[$1507>>2]|0;
                          $1509 = ((($1508)) + 4|0);
                          HEAP32[$1507>>2] = $1509;
                         } else {
                          $1510 = $408;
                          $400 = $1510;
                          $1511 = $400;
                          __THREW__ = 0;
                          invoke_vii(78,($1476|0),($1511|0));
                          $1512 = __THREW__; __THREW__ = 0;
                          $1513 = $1512&1;
                          if ($1513) {
                           label = 206;
                          }
                         }
                        } while(0);
                        if ((label|0) == 206) {
                         $2246 = ___cxa_find_matching_catch()|0;
                         $2247 = tempRet0;
                         $774 = $2246;
                         $775 = $2247;
                         __ZN6refptrI12staticScene2ED2Ev($784);
                         break;
                        }
                        __ZN6refptrI12staticScene2ED2Ev($784);
                        $1514 = $772;
                        $382 = $1514;
                        $383 = $type6;
                        $1515 = $382;
                        $1516 = ((($1515)) + 4|0);
                        $1517 = HEAP32[$1516>>2]|0;
                        $381 = $1515;
                        $1518 = $381;
                        $1519 = ((($1518)) + 8|0);
                        $380 = $1519;
                        $1520 = $380;
                        $379 = $1520;
                        $1521 = $379;
                        $1522 = HEAP32[$1521>>2]|0;
                        $1523 = ($1517|0)!=($1522|0);
                        if ($1523) {
                         __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i74,$1515,1);
                         $378 = $1515;
                         $1524 = $378;
                         $1525 = ((($1524)) + 8|0);
                         $377 = $1525;
                         $1526 = $377;
                         $376 = $1526;
                         $1527 = $376;
                         $1528 = ((($1515)) + 4|0);
                         $1529 = HEAP32[$1528>>2]|0;
                         $375 = $1529;
                         $1530 = $375;
                         $1531 = $383;
                         $371 = $1527;
                         $372 = $1530;
                         $373 = $1531;
                         $1532 = $371;
                         $1533 = $372;
                         $1534 = $373;
                         $370 = $1534;
                         $1535 = $370;
                         ;HEAP8[$369>>0]=HEAP8[$374>>0]|0;
                         $366 = $1532;
                         $367 = $1533;
                         $368 = $1535;
                         $1536 = $366;
                         $1537 = $367;
                         $1538 = $368;
                         $365 = $1538;
                         $1539 = $365;
                         $362 = $1536;
                         $363 = $1537;
                         $364 = $1539;
                         $1540 = $363;
                         $1541 = $364;
                         $361 = $1541;
                         $1542 = $361;
                         __THREW__ = 0;
                         invoke_vii(94,($1540|0),($1542|0));
                         $1543 = __THREW__; __THREW__ = 0;
                         $1544 = $1543&1;
                         if ($1544) {
                          label = 205;
                          break;
                         }
                         __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i74);
                         $1545 = ((($1515)) + 4|0);
                         $1546 = HEAP32[$1545>>2]|0;
                         $1547 = ((($1546)) + 20|0);
                         HEAP32[$1545>>2] = $1547;
                        } else {
                         $1548 = $383;
                         __THREW__ = 0;
                         invoke_vii(95,($1515|0),($1548|0));
                         $1549 = __THREW__; __THREW__ = 0;
                         $1550 = $1549&1;
                         if ($1550) {
                          label = 205;
                          break;
                         }
                        }
                        __ZN9trackTypeD2Ev($type6);
                        __ZN9trackTypeC2Ev($type7);
                        HEAP8[$type7>>0] = 3;
                        $1551 = ((($type7)) + 1|0);
                        HEAP8[$1551>>0] = 5;
                        $1552 = ((($type7)) + 2|0);
                        HEAP8[$1552>>0] = 0;
                        $1553 = ((($type7)) + 3|0);
                        HEAP8[$1553>>0] = 0;
                        $1554 = ((($type7)) + 4|0);
                        HEAP8[$1554>>0] = 0;
                        $1555 = ((($type7)) + 8|0);
                        __THREW__ = 0;
                        $1556 = (invoke_i(91)|0);
                        $1557 = __THREW__; __THREW__ = 0;
                        $1558 = $1557&1;
                        do {
                         if ($1558) {
                          label = 208;
                         } else {
                          __THREW__ = 0;
                          $1559 = (invoke_iii(92,($1556|0),(4904|0))|0);
                          $1560 = __THREW__; __THREW__ = 0;
                          $1561 = $1560&1;
                          if ($1561) {
                           label = 208;
                           break;
                          }
                          __THREW__ = 0;
                          invoke_vii(93,($785|0),($1559|0));
                          $1562 = __THREW__; __THREW__ = 0;
                          $1563 = $1562&1;
                          if ($1563) {
                           label = 208;
                           break;
                          }
                          $359 = $1555;
                          $360 = $785;
                          $1564 = $359;
                          $1565 = ((($1564)) + 4|0);
                          $1566 = HEAP32[$1565>>2]|0;
                          $358 = $1564;
                          $1567 = $358;
                          $1568 = ((($1567)) + 8|0);
                          $357 = $1568;
                          $1569 = $357;
                          $356 = $1569;
                          $1570 = $356;
                          $1571 = HEAP32[$1570>>2]|0;
                          $1572 = ($1566>>>0)<($1571>>>0);
                          do {
                           if ($1572) {
                            __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i78,$1564,1);
                            $355 = $1564;
                            $1573 = $355;
                            $1574 = ((($1573)) + 8|0);
                            $354 = $1574;
                            $1575 = $354;
                            $353 = $1575;
                            $1576 = $353;
                            $1577 = ((($1564)) + 4|0);
                            $1578 = HEAP32[$1577>>2]|0;
                            $351 = $1578;
                            $1579 = $351;
                            $1580 = $360;
                            $336 = $1580;
                            $1581 = $336;
                            $347 = $1576;
                            $348 = $1579;
                            $349 = $1581;
                            $1582 = $347;
                            $1583 = $348;
                            $1584 = $349;
                            $346 = $1584;
                            $1585 = $346;
                            ;HEAP8[$345>>0]=HEAP8[$350>>0]|0;
                            $342 = $1582;
                            $343 = $1583;
                            $344 = $1585;
                            $1586 = $342;
                            $1587 = $343;
                            $1588 = $344;
                            $341 = $1588;
                            $1589 = $341;
                            $338 = $1586;
                            $339 = $1587;
                            $340 = $1589;
                            $1590 = $339;
                            $1591 = $340;
                            $337 = $1591;
                            $1592 = $337;
                            __THREW__ = 0;
                            invoke_vii(77,($1590|0),($1592|0));
                            $1593 = __THREW__; __THREW__ = 0;
                            $1594 = $1593&1;
                            if ($1594) {
                             label = 209;
                             break;
                            }
                            __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i78);
                            $1595 = ((($1564)) + 4|0);
                            $1596 = HEAP32[$1595>>2]|0;
                            $1597 = ((($1596)) + 4|0);
                            HEAP32[$1595>>2] = $1597;
                           } else {
                            $1598 = $360;
                            $352 = $1598;
                            $1599 = $352;
                            __THREW__ = 0;
                            invoke_vii(78,($1564|0),($1599|0));
                            $1600 = __THREW__; __THREW__ = 0;
                            $1601 = $1600&1;
                            if ($1601) {
                             label = 209;
                            }
                           }
                          } while(0);
                          if ((label|0) == 209) {
                           $2250 = ___cxa_find_matching_catch()|0;
                           $2251 = tempRet0;
                           $774 = $2250;
                           $775 = $2251;
                           __ZN6refptrI12staticScene2ED2Ev($785);
                           break;
                          }
                          __ZN6refptrI12staticScene2ED2Ev($785);
                          $1602 = $772;
                          $334 = $1602;
                          $335 = $type7;
                          $1603 = $334;
                          $1604 = ((($1603)) + 4|0);
                          $1605 = HEAP32[$1604>>2]|0;
                          $333 = $1603;
                          $1606 = $333;
                          $1607 = ((($1606)) + 8|0);
                          $332 = $1607;
                          $1608 = $332;
                          $331 = $1608;
                          $1609 = $331;
                          $1610 = HEAP32[$1609>>2]|0;
                          $1611 = ($1605|0)!=($1610|0);
                          if ($1611) {
                           __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i82,$1603,1);
                           $330 = $1603;
                           $1612 = $330;
                           $1613 = ((($1612)) + 8|0);
                           $329 = $1613;
                           $1614 = $329;
                           $328 = $1614;
                           $1615 = $328;
                           $1616 = ((($1603)) + 4|0);
                           $1617 = HEAP32[$1616>>2]|0;
                           $327 = $1617;
                           $1618 = $327;
                           $1619 = $335;
                           $323 = $1615;
                           $324 = $1618;
                           $325 = $1619;
                           $1620 = $323;
                           $1621 = $324;
                           $1622 = $325;
                           $322 = $1622;
                           $1623 = $322;
                           ;HEAP8[$321>>0]=HEAP8[$326>>0]|0;
                           $318 = $1620;
                           $319 = $1621;
                           $320 = $1623;
                           $1624 = $318;
                           $1625 = $319;
                           $1626 = $320;
                           $317 = $1626;
                           $1627 = $317;
                           $314 = $1624;
                           $315 = $1625;
                           $316 = $1627;
                           $1628 = $315;
                           $1629 = $316;
                           $313 = $1629;
                           $1630 = $313;
                           __THREW__ = 0;
                           invoke_vii(94,($1628|0),($1630|0));
                           $1631 = __THREW__; __THREW__ = 0;
                           $1632 = $1631&1;
                           if ($1632) {
                            label = 208;
                            break;
                           }
                           __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i82);
                           $1633 = ((($1603)) + 4|0);
                           $1634 = HEAP32[$1633>>2]|0;
                           $1635 = ((($1634)) + 20|0);
                           HEAP32[$1633>>2] = $1635;
                          } else {
                           $1636 = $335;
                           __THREW__ = 0;
                           invoke_vii(95,($1603|0),($1636|0));
                           $1637 = __THREW__; __THREW__ = 0;
                           $1638 = $1637&1;
                           if ($1638) {
                            label = 208;
                            break;
                           }
                          }
                          __ZN9trackTypeD2Ev($type7);
                          __ZN9trackTypeC2Ev($type8);
                          HEAP8[$type8>>0] = 3;
                          $1639 = ((($type8)) + 1|0);
                          HEAP8[$1639>>0] = 6;
                          $1640 = ((($type8)) + 2|0);
                          HEAP8[$1640>>0] = 0;
                          $1641 = ((($type8)) + 3|0);
                          HEAP8[$1641>>0] = 0;
                          $1642 = ((($type8)) + 4|0);
                          HEAP8[$1642>>0] = 0;
                          $1643 = ((($type8)) + 8|0);
                          __THREW__ = 0;
                          $1644 = (invoke_i(91)|0);
                          $1645 = __THREW__; __THREW__ = 0;
                          $1646 = $1645&1;
                          do {
                           if ($1646) {
                            label = 211;
                           } else {
                            __THREW__ = 0;
                            $1647 = (invoke_iii(92,($1644|0),(4920|0))|0);
                            $1648 = __THREW__; __THREW__ = 0;
                            $1649 = $1648&1;
                            if ($1649) {
                             label = 211;
                             break;
                            }
                            __THREW__ = 0;
                            invoke_vii(93,($786|0),($1647|0));
                            $1650 = __THREW__; __THREW__ = 0;
                            $1651 = $1650&1;
                            if ($1651) {
                             label = 211;
                             break;
                            }
                            $311 = $1643;
                            $312 = $786;
                            $1652 = $311;
                            $1653 = ((($1652)) + 4|0);
                            $1654 = HEAP32[$1653>>2]|0;
                            $310 = $1652;
                            $1655 = $310;
                            $1656 = ((($1655)) + 8|0);
                            $309 = $1656;
                            $1657 = $309;
                            $308 = $1657;
                            $1658 = $308;
                            $1659 = HEAP32[$1658>>2]|0;
                            $1660 = ($1654>>>0)<($1659>>>0);
                            do {
                             if ($1660) {
                              __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i86,$1652,1);
                              $307 = $1652;
                              $1661 = $307;
                              $1662 = ((($1661)) + 8|0);
                              $306 = $1662;
                              $1663 = $306;
                              $305 = $1663;
                              $1664 = $305;
                              $1665 = ((($1652)) + 4|0);
                              $1666 = HEAP32[$1665>>2]|0;
                              $303 = $1666;
                              $1667 = $303;
                              $1668 = $312;
                              $288 = $1668;
                              $1669 = $288;
                              $299 = $1664;
                              $300 = $1667;
                              $301 = $1669;
                              $1670 = $299;
                              $1671 = $300;
                              $1672 = $301;
                              $298 = $1672;
                              $1673 = $298;
                              ;HEAP8[$297>>0]=HEAP8[$302>>0]|0;
                              $294 = $1670;
                              $295 = $1671;
                              $296 = $1673;
                              $1674 = $294;
                              $1675 = $295;
                              $1676 = $296;
                              $293 = $1676;
                              $1677 = $293;
                              $290 = $1674;
                              $291 = $1675;
                              $292 = $1677;
                              $1678 = $291;
                              $1679 = $292;
                              $289 = $1679;
                              $1680 = $289;
                              __THREW__ = 0;
                              invoke_vii(77,($1678|0),($1680|0));
                              $1681 = __THREW__; __THREW__ = 0;
                              $1682 = $1681&1;
                              if ($1682) {
                               label = 212;
                               break;
                              }
                              __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i86);
                              $1683 = ((($1652)) + 4|0);
                              $1684 = HEAP32[$1683>>2]|0;
                              $1685 = ((($1684)) + 4|0);
                              HEAP32[$1683>>2] = $1685;
                             } else {
                              $1686 = $312;
                              $304 = $1686;
                              $1687 = $304;
                              __THREW__ = 0;
                              invoke_vii(78,($1652|0),($1687|0));
                              $1688 = __THREW__; __THREW__ = 0;
                              $1689 = $1688&1;
                              if ($1689) {
                               label = 212;
                              }
                             }
                            } while(0);
                            if ((label|0) == 212) {
                             $2254 = ___cxa_find_matching_catch()|0;
                             $2255 = tempRet0;
                             $774 = $2254;
                             $775 = $2255;
                             __ZN6refptrI12staticScene2ED2Ev($786);
                             break;
                            }
                            __ZN6refptrI12staticScene2ED2Ev($786);
                            $1690 = $772;
                            $286 = $1690;
                            $287 = $type8;
                            $1691 = $286;
                            $1692 = ((($1691)) + 4|0);
                            $1693 = HEAP32[$1692>>2]|0;
                            $285 = $1691;
                            $1694 = $285;
                            $1695 = ((($1694)) + 8|0);
                            $284 = $1695;
                            $1696 = $284;
                            $283 = $1696;
                            $1697 = $283;
                            $1698 = HEAP32[$1697>>2]|0;
                            $1699 = ($1693|0)!=($1698|0);
                            if ($1699) {
                             __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i90,$1691,1);
                             $282 = $1691;
                             $1700 = $282;
                             $1701 = ((($1700)) + 8|0);
                             $281 = $1701;
                             $1702 = $281;
                             $280 = $1702;
                             $1703 = $280;
                             $1704 = ((($1691)) + 4|0);
                             $1705 = HEAP32[$1704>>2]|0;
                             $279 = $1705;
                             $1706 = $279;
                             $1707 = $287;
                             $275 = $1703;
                             $276 = $1706;
                             $277 = $1707;
                             $1708 = $275;
                             $1709 = $276;
                             $1710 = $277;
                             $274 = $1710;
                             $1711 = $274;
                             ;HEAP8[$273>>0]=HEAP8[$278>>0]|0;
                             $270 = $1708;
                             $271 = $1709;
                             $272 = $1711;
                             $1712 = $270;
                             $1713 = $271;
                             $1714 = $272;
                             $269 = $1714;
                             $1715 = $269;
                             $266 = $1712;
                             $267 = $1713;
                             $268 = $1715;
                             $1716 = $267;
                             $1717 = $268;
                             $265 = $1717;
                             $1718 = $265;
                             __THREW__ = 0;
                             invoke_vii(94,($1716|0),($1718|0));
                             $1719 = __THREW__; __THREW__ = 0;
                             $1720 = $1719&1;
                             if ($1720) {
                              label = 211;
                              break;
                             }
                             __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i90);
                             $1721 = ((($1691)) + 4|0);
                             $1722 = HEAP32[$1721>>2]|0;
                             $1723 = ((($1722)) + 20|0);
                             HEAP32[$1721>>2] = $1723;
                            } else {
                             $1724 = $287;
                             __THREW__ = 0;
                             invoke_vii(95,($1691|0),($1724|0));
                             $1725 = __THREW__; __THREW__ = 0;
                             $1726 = $1725&1;
                             if ($1726) {
                              label = 211;
                              break;
                             }
                            }
                            __ZN9trackTypeD2Ev($type8);
                            __ZN9trackTypeC2Ev($type9);
                            HEAP8[$type9>>0] = 3;
                            $1727 = ((($type9)) + 1|0);
                            HEAP8[$1727>>0] = 6;
                            $1728 = ((($type9)) + 2|0);
                            HEAP8[$1728>>0] = 0;
                            $1729 = ((($type9)) + 3|0);
                            HEAP8[$1729>>0] = 0;
                            $1730 = ((($type9)) + 4|0);
                            HEAP8[$1730>>0] = 0;
                            $1731 = ((($type9)) + 8|0);
                            __THREW__ = 0;
                            $1732 = (invoke_i(91)|0);
                            $1733 = __THREW__; __THREW__ = 0;
                            $1734 = $1733&1;
                            do {
                             if ($1734) {
                              label = 214;
                             } else {
                              __THREW__ = 0;
                              $1735 = (invoke_iii(92,($1732|0),(4928|0))|0);
                              $1736 = __THREW__; __THREW__ = 0;
                              $1737 = $1736&1;
                              if ($1737) {
                               label = 214;
                               break;
                              }
                              __THREW__ = 0;
                              invoke_vii(93,($787|0),($1735|0));
                              $1738 = __THREW__; __THREW__ = 0;
                              $1739 = $1738&1;
                              if ($1739) {
                               label = 214;
                               break;
                              }
                              $263 = $1731;
                              $264 = $787;
                              $1740 = $263;
                              $1741 = ((($1740)) + 4|0);
                              $1742 = HEAP32[$1741>>2]|0;
                              $262 = $1740;
                              $1743 = $262;
                              $1744 = ((($1743)) + 8|0);
                              $261 = $1744;
                              $1745 = $261;
                              $260 = $1745;
                              $1746 = $260;
                              $1747 = HEAP32[$1746>>2]|0;
                              $1748 = ($1742>>>0)<($1747>>>0);
                              do {
                               if ($1748) {
                                __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i94,$1740,1);
                                $259 = $1740;
                                $1749 = $259;
                                $1750 = ((($1749)) + 8|0);
                                $258 = $1750;
                                $1751 = $258;
                                $257 = $1751;
                                $1752 = $257;
                                $1753 = ((($1740)) + 4|0);
                                $1754 = HEAP32[$1753>>2]|0;
                                $255 = $1754;
                                $1755 = $255;
                                $1756 = $264;
                                $240 = $1756;
                                $1757 = $240;
                                $251 = $1752;
                                $252 = $1755;
                                $253 = $1757;
                                $1758 = $251;
                                $1759 = $252;
                                $1760 = $253;
                                $250 = $1760;
                                $1761 = $250;
                                ;HEAP8[$249>>0]=HEAP8[$254>>0]|0;
                                $246 = $1758;
                                $247 = $1759;
                                $248 = $1761;
                                $1762 = $246;
                                $1763 = $247;
                                $1764 = $248;
                                $245 = $1764;
                                $1765 = $245;
                                $242 = $1762;
                                $243 = $1763;
                                $244 = $1765;
                                $1766 = $243;
                                $1767 = $244;
                                $241 = $1767;
                                $1768 = $241;
                                __THREW__ = 0;
                                invoke_vii(77,($1766|0),($1768|0));
                                $1769 = __THREW__; __THREW__ = 0;
                                $1770 = $1769&1;
                                if ($1770) {
                                 label = 215;
                                 break;
                                }
                                __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i94);
                                $1771 = ((($1740)) + 4|0);
                                $1772 = HEAP32[$1771>>2]|0;
                                $1773 = ((($1772)) + 4|0);
                                HEAP32[$1771>>2] = $1773;
                               } else {
                                $1774 = $264;
                                $256 = $1774;
                                $1775 = $256;
                                __THREW__ = 0;
                                invoke_vii(78,($1740|0),($1775|0));
                                $1776 = __THREW__; __THREW__ = 0;
                                $1777 = $1776&1;
                                if ($1777) {
                                 label = 215;
                                }
                               }
                              } while(0);
                              if ((label|0) == 215) {
                               $2258 = ___cxa_find_matching_catch()|0;
                               $2259 = tempRet0;
                               $774 = $2258;
                               $775 = $2259;
                               __ZN6refptrI12staticScene2ED2Ev($787);
                               break;
                              }
                              __ZN6refptrI12staticScene2ED2Ev($787);
                              $1778 = $772;
                              $238 = $1778;
                              $239 = $type9;
                              $1779 = $238;
                              $1780 = ((($1779)) + 4|0);
                              $1781 = HEAP32[$1780>>2]|0;
                              $237 = $1779;
                              $1782 = $237;
                              $1783 = ((($1782)) + 8|0);
                              $236 = $1783;
                              $1784 = $236;
                              $235 = $1784;
                              $1785 = $235;
                              $1786 = HEAP32[$1785>>2]|0;
                              $1787 = ($1781|0)!=($1786|0);
                              if ($1787) {
                               __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i98,$1779,1);
                               $234 = $1779;
                               $1788 = $234;
                               $1789 = ((($1788)) + 8|0);
                               $233 = $1789;
                               $1790 = $233;
                               $232 = $1790;
                               $1791 = $232;
                               $1792 = ((($1779)) + 4|0);
                               $1793 = HEAP32[$1792>>2]|0;
                               $231 = $1793;
                               $1794 = $231;
                               $1795 = $239;
                               $227 = $1791;
                               $228 = $1794;
                               $229 = $1795;
                               $1796 = $227;
                               $1797 = $228;
                               $1798 = $229;
                               $226 = $1798;
                               $1799 = $226;
                               ;HEAP8[$225>>0]=HEAP8[$230>>0]|0;
                               $222 = $1796;
                               $223 = $1797;
                               $224 = $1799;
                               $1800 = $222;
                               $1801 = $223;
                               $1802 = $224;
                               $221 = $1802;
                               $1803 = $221;
                               $218 = $1800;
                               $219 = $1801;
                               $220 = $1803;
                               $1804 = $219;
                               $1805 = $220;
                               $217 = $1805;
                               $1806 = $217;
                               __THREW__ = 0;
                               invoke_vii(94,($1804|0),($1806|0));
                               $1807 = __THREW__; __THREW__ = 0;
                               $1808 = $1807&1;
                               if ($1808) {
                                label = 214;
                                break;
                               }
                               __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i98);
                               $1809 = ((($1779)) + 4|0);
                               $1810 = HEAP32[$1809>>2]|0;
                               $1811 = ((($1810)) + 20|0);
                               HEAP32[$1809>>2] = $1811;
                              } else {
                               $1812 = $239;
                               __THREW__ = 0;
                               invoke_vii(95,($1779|0),($1812|0));
                               $1813 = __THREW__; __THREW__ = 0;
                               $1814 = $1813&1;
                               if ($1814) {
                                label = 214;
                                break;
                               }
                              }
                              __ZN9trackTypeD2Ev($type9);
                              __ZN9trackTypeC2Ev($type10);
                              HEAP8[$type10>>0] = 3;
                              $1815 = ((($type10)) + 1|0);
                              HEAP8[$1815>>0] = 6;
                              $1816 = ((($type10)) + 2|0);
                              HEAP8[$1816>>0] = 0;
                              $1817 = ((($type10)) + 3|0);
                              HEAP8[$1817>>0] = 0;
                              $1818 = ((($type10)) + 4|0);
                              HEAP8[$1818>>0] = 0;
                              $1819 = ((($type10)) + 8|0);
                              __THREW__ = 0;
                              $1820 = (invoke_i(91)|0);
                              $1821 = __THREW__; __THREW__ = 0;
                              $1822 = $1821&1;
                              do {
                               if ($1822) {
                                label = 217;
                               } else {
                                __THREW__ = 0;
                                $1823 = (invoke_iii(92,($1820|0),(4944|0))|0);
                                $1824 = __THREW__; __THREW__ = 0;
                                $1825 = $1824&1;
                                if ($1825) {
                                 label = 217;
                                 break;
                                }
                                __THREW__ = 0;
                                invoke_vii(93,($788|0),($1823|0));
                                $1826 = __THREW__; __THREW__ = 0;
                                $1827 = $1826&1;
                                if ($1827) {
                                 label = 217;
                                 break;
                                }
                                $215 = $1819;
                                $216 = $788;
                                $1828 = $215;
                                $1829 = ((($1828)) + 4|0);
                                $1830 = HEAP32[$1829>>2]|0;
                                $214 = $1828;
                                $1831 = $214;
                                $1832 = ((($1831)) + 8|0);
                                $213 = $1832;
                                $1833 = $213;
                                $212 = $1833;
                                $1834 = $212;
                                $1835 = HEAP32[$1834>>2]|0;
                                $1836 = ($1830>>>0)<($1835>>>0);
                                do {
                                 if ($1836) {
                                  __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i102,$1828,1);
                                  $211 = $1828;
                                  $1837 = $211;
                                  $1838 = ((($1837)) + 8|0);
                                  $210 = $1838;
                                  $1839 = $210;
                                  $209 = $1839;
                                  $1840 = $209;
                                  $1841 = ((($1828)) + 4|0);
                                  $1842 = HEAP32[$1841>>2]|0;
                                  $207 = $1842;
                                  $1843 = $207;
                                  $1844 = $216;
                                  $192 = $1844;
                                  $1845 = $192;
                                  $203 = $1840;
                                  $204 = $1843;
                                  $205 = $1845;
                                  $1846 = $203;
                                  $1847 = $204;
                                  $1848 = $205;
                                  $202 = $1848;
                                  $1849 = $202;
                                  ;HEAP8[$201>>0]=HEAP8[$206>>0]|0;
                                  $198 = $1846;
                                  $199 = $1847;
                                  $200 = $1849;
                                  $1850 = $198;
                                  $1851 = $199;
                                  $1852 = $200;
                                  $197 = $1852;
                                  $1853 = $197;
                                  $194 = $1850;
                                  $195 = $1851;
                                  $196 = $1853;
                                  $1854 = $195;
                                  $1855 = $196;
                                  $193 = $1855;
                                  $1856 = $193;
                                  __THREW__ = 0;
                                  invoke_vii(77,($1854|0),($1856|0));
                                  $1857 = __THREW__; __THREW__ = 0;
                                  $1858 = $1857&1;
                                  if ($1858) {
                                   label = 218;
                                   break;
                                  }
                                  __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i102);
                                  $1859 = ((($1828)) + 4|0);
                                  $1860 = HEAP32[$1859>>2]|0;
                                  $1861 = ((($1860)) + 4|0);
                                  HEAP32[$1859>>2] = $1861;
                                 } else {
                                  $1862 = $216;
                                  $208 = $1862;
                                  $1863 = $208;
                                  __THREW__ = 0;
                                  invoke_vii(78,($1828|0),($1863|0));
                                  $1864 = __THREW__; __THREW__ = 0;
                                  $1865 = $1864&1;
                                  if ($1865) {
                                   label = 218;
                                  }
                                 }
                                } while(0);
                                if ((label|0) == 218) {
                                 $2262 = ___cxa_find_matching_catch()|0;
                                 $2263 = tempRet0;
                                 $774 = $2262;
                                 $775 = $2263;
                                 __ZN6refptrI12staticScene2ED2Ev($788);
                                 break;
                                }
                                __ZN6refptrI12staticScene2ED2Ev($788);
                                $1866 = $772;
                                $190 = $1866;
                                $191 = $type10;
                                $1867 = $190;
                                $1868 = ((($1867)) + 4|0);
                                $1869 = HEAP32[$1868>>2]|0;
                                $189 = $1867;
                                $1870 = $189;
                                $1871 = ((($1870)) + 8|0);
                                $188 = $1871;
                                $1872 = $188;
                                $187 = $1872;
                                $1873 = $187;
                                $1874 = HEAP32[$1873>>2]|0;
                                $1875 = ($1869|0)!=($1874|0);
                                if ($1875) {
                                 __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i106,$1867,1);
                                 $186 = $1867;
                                 $1876 = $186;
                                 $1877 = ((($1876)) + 8|0);
                                 $185 = $1877;
                                 $1878 = $185;
                                 $184 = $1878;
                                 $1879 = $184;
                                 $1880 = ((($1867)) + 4|0);
                                 $1881 = HEAP32[$1880>>2]|0;
                                 $183 = $1881;
                                 $1882 = $183;
                                 $1883 = $191;
                                 $179 = $1879;
                                 $180 = $1882;
                                 $181 = $1883;
                                 $1884 = $179;
                                 $1885 = $180;
                                 $1886 = $181;
                                 $178 = $1886;
                                 $1887 = $178;
                                 ;HEAP8[$177>>0]=HEAP8[$182>>0]|0;
                                 $174 = $1884;
                                 $175 = $1885;
                                 $176 = $1887;
                                 $1888 = $174;
                                 $1889 = $175;
                                 $1890 = $176;
                                 $173 = $1890;
                                 $1891 = $173;
                                 $170 = $1888;
                                 $171 = $1889;
                                 $172 = $1891;
                                 $1892 = $171;
                                 $1893 = $172;
                                 $169 = $1893;
                                 $1894 = $169;
                                 __THREW__ = 0;
                                 invoke_vii(94,($1892|0),($1894|0));
                                 $1895 = __THREW__; __THREW__ = 0;
                                 $1896 = $1895&1;
                                 if ($1896) {
                                  label = 217;
                                  break;
                                 }
                                 __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i106);
                                 $1897 = ((($1867)) + 4|0);
                                 $1898 = HEAP32[$1897>>2]|0;
                                 $1899 = ((($1898)) + 20|0);
                                 HEAP32[$1897>>2] = $1899;
                                } else {
                                 $1900 = $191;
                                 __THREW__ = 0;
                                 invoke_vii(95,($1867|0),($1900|0));
                                 $1901 = __THREW__; __THREW__ = 0;
                                 $1902 = $1901&1;
                                 if ($1902) {
                                  label = 217;
                                  break;
                                 }
                                }
                                __ZN9trackTypeD2Ev($type10);
                                __ZN9trackTypeC2Ev($type11);
                                HEAP8[$type11>>0] = 3;
                                $1903 = ((($type11)) + 1|0);
                                HEAP8[$1903>>0] = 6;
                                $1904 = ((($type11)) + 2|0);
                                HEAP8[$1904>>0] = 0;
                                $1905 = ((($type11)) + 3|0);
                                HEAP8[$1905>>0] = 0;
                                $1906 = ((($type11)) + 4|0);
                                HEAP8[$1906>>0] = 0;
                                $1907 = ((($type11)) + 8|0);
                                __THREW__ = 0;
                                $1908 = (invoke_i(91)|0);
                                $1909 = __THREW__; __THREW__ = 0;
                                $1910 = $1909&1;
                                do {
                                 if ($1910) {
                                  label = 220;
                                 } else {
                                  __THREW__ = 0;
                                  $1911 = (invoke_iii(92,($1908|0),(4960|0))|0);
                                  $1912 = __THREW__; __THREW__ = 0;
                                  $1913 = $1912&1;
                                  if ($1913) {
                                   label = 220;
                                   break;
                                  }
                                  __THREW__ = 0;
                                  invoke_vii(93,($789|0),($1911|0));
                                  $1914 = __THREW__; __THREW__ = 0;
                                  $1915 = $1914&1;
                                  if ($1915) {
                                   label = 220;
                                   break;
                                  }
                                  $167 = $1907;
                                  $168 = $789;
                                  $1916 = $167;
                                  $1917 = ((($1916)) + 4|0);
                                  $1918 = HEAP32[$1917>>2]|0;
                                  $166 = $1916;
                                  $1919 = $166;
                                  $1920 = ((($1919)) + 8|0);
                                  $165 = $1920;
                                  $1921 = $165;
                                  $164 = $1921;
                                  $1922 = $164;
                                  $1923 = HEAP32[$1922>>2]|0;
                                  $1924 = ($1918>>>0)<($1923>>>0);
                                  do {
                                   if ($1924) {
                                    __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i110,$1916,1);
                                    $163 = $1916;
                                    $1925 = $163;
                                    $1926 = ((($1925)) + 8|0);
                                    $162 = $1926;
                                    $1927 = $162;
                                    $161 = $1927;
                                    $1928 = $161;
                                    $1929 = ((($1916)) + 4|0);
                                    $1930 = HEAP32[$1929>>2]|0;
                                    $159 = $1930;
                                    $1931 = $159;
                                    $1932 = $168;
                                    $144 = $1932;
                                    $1933 = $144;
                                    $155 = $1928;
                                    $156 = $1931;
                                    $157 = $1933;
                                    $1934 = $155;
                                    $1935 = $156;
                                    $1936 = $157;
                                    $154 = $1936;
                                    $1937 = $154;
                                    ;HEAP8[$153>>0]=HEAP8[$158>>0]|0;
                                    $150 = $1934;
                                    $151 = $1935;
                                    $152 = $1937;
                                    $1938 = $150;
                                    $1939 = $151;
                                    $1940 = $152;
                                    $149 = $1940;
                                    $1941 = $149;
                                    $146 = $1938;
                                    $147 = $1939;
                                    $148 = $1941;
                                    $1942 = $147;
                                    $1943 = $148;
                                    $145 = $1943;
                                    $1944 = $145;
                                    __THREW__ = 0;
                                    invoke_vii(77,($1942|0),($1944|0));
                                    $1945 = __THREW__; __THREW__ = 0;
                                    $1946 = $1945&1;
                                    if ($1946) {
                                     label = 221;
                                     break;
                                    }
                                    __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i110);
                                    $1947 = ((($1916)) + 4|0);
                                    $1948 = HEAP32[$1947>>2]|0;
                                    $1949 = ((($1948)) + 4|0);
                                    HEAP32[$1947>>2] = $1949;
                                   } else {
                                    $1950 = $168;
                                    $160 = $1950;
                                    $1951 = $160;
                                    __THREW__ = 0;
                                    invoke_vii(78,($1916|0),($1951|0));
                                    $1952 = __THREW__; __THREW__ = 0;
                                    $1953 = $1952&1;
                                    if ($1953) {
                                     label = 221;
                                    }
                                   }
                                  } while(0);
                                  if ((label|0) == 221) {
                                   $2266 = ___cxa_find_matching_catch()|0;
                                   $2267 = tempRet0;
                                   $774 = $2266;
                                   $775 = $2267;
                                   __ZN6refptrI12staticScene2ED2Ev($789);
                                   break;
                                  }
                                  __ZN6refptrI12staticScene2ED2Ev($789);
                                  $1954 = $772;
                                  $142 = $1954;
                                  $143 = $type11;
                                  $1955 = $142;
                                  $1956 = ((($1955)) + 4|0);
                                  $1957 = HEAP32[$1956>>2]|0;
                                  $141 = $1955;
                                  $1958 = $141;
                                  $1959 = ((($1958)) + 8|0);
                                  $140 = $1959;
                                  $1960 = $140;
                                  $139 = $1960;
                                  $1961 = $139;
                                  $1962 = HEAP32[$1961>>2]|0;
                                  $1963 = ($1957|0)!=($1962|0);
                                  if ($1963) {
                                   __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i114,$1955,1);
                                   $138 = $1955;
                                   $1964 = $138;
                                   $1965 = ((($1964)) + 8|0);
                                   $137 = $1965;
                                   $1966 = $137;
                                   $136 = $1966;
                                   $1967 = $136;
                                   $1968 = ((($1955)) + 4|0);
                                   $1969 = HEAP32[$1968>>2]|0;
                                   $135 = $1969;
                                   $1970 = $135;
                                   $1971 = $143;
                                   $131 = $1967;
                                   $132 = $1970;
                                   $133 = $1971;
                                   $1972 = $131;
                                   $1973 = $132;
                                   $1974 = $133;
                                   $130 = $1974;
                                   $1975 = $130;
                                   ;HEAP8[$129>>0]=HEAP8[$134>>0]|0;
                                   $126 = $1972;
                                   $127 = $1973;
                                   $128 = $1975;
                                   $1976 = $126;
                                   $1977 = $127;
                                   $1978 = $128;
                                   $125 = $1978;
                                   $1979 = $125;
                                   $122 = $1976;
                                   $123 = $1977;
                                   $124 = $1979;
                                   $1980 = $123;
                                   $1981 = $124;
                                   $121 = $1981;
                                   $1982 = $121;
                                   __THREW__ = 0;
                                   invoke_vii(94,($1980|0),($1982|0));
                                   $1983 = __THREW__; __THREW__ = 0;
                                   $1984 = $1983&1;
                                   if ($1984) {
                                    label = 220;
                                    break;
                                   }
                                   __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i114);
                                   $1985 = ((($1955)) + 4|0);
                                   $1986 = HEAP32[$1985>>2]|0;
                                   $1987 = ((($1986)) + 20|0);
                                   HEAP32[$1985>>2] = $1987;
                                  } else {
                                   $1988 = $143;
                                   __THREW__ = 0;
                                   invoke_vii(95,($1955|0),($1988|0));
                                   $1989 = __THREW__; __THREW__ = 0;
                                   $1990 = $1989&1;
                                   if ($1990) {
                                    label = 220;
                                    break;
                                   }
                                  }
                                  __ZN9trackTypeD2Ev($type11);
                                  __ZN9trackTypeC2Ev($type12);
                                  HEAP8[$type12>>0] = 2;
                                  $1991 = ((($type12)) + 1|0);
                                  HEAP8[$1991>>0] = 4;
                                  $1992 = ((($type12)) + 2|0);
                                  HEAP8[$1992>>0] = 0;
                                  $1993 = ((($type12)) + 3|0);
                                  HEAP8[$1993>>0] = 0;
                                  $1994 = ((($type12)) + 4|0);
                                  HEAP8[$1994>>0] = 0;
                                  $1995 = ((($type12)) + 8|0);
                                  __THREW__ = 0;
                                  $1996 = (invoke_i(91)|0);
                                  $1997 = __THREW__; __THREW__ = 0;
                                  $1998 = $1997&1;
                                  do {
                                   if ($1998) {
                                    label = 223;
                                   } else {
                                    __THREW__ = 0;
                                    $1999 = (invoke_iii(92,($1996|0),(4976|0))|0);
                                    $2000 = __THREW__; __THREW__ = 0;
                                    $2001 = $2000&1;
                                    if ($2001) {
                                     label = 223;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    invoke_vii(93,($790|0),($1999|0));
                                    $2002 = __THREW__; __THREW__ = 0;
                                    $2003 = $2002&1;
                                    if ($2003) {
                                     label = 223;
                                     break;
                                    }
                                    $119 = $1995;
                                    $120 = $790;
                                    $2004 = $119;
                                    $2005 = ((($2004)) + 4|0);
                                    $2006 = HEAP32[$2005>>2]|0;
                                    $118 = $2004;
                                    $2007 = $118;
                                    $2008 = ((($2007)) + 8|0);
                                    $117 = $2008;
                                    $2009 = $117;
                                    $116 = $2009;
                                    $2010 = $116;
                                    $2011 = HEAP32[$2010>>2]|0;
                                    $2012 = ($2006>>>0)<($2011>>>0);
                                    do {
                                     if ($2012) {
                                      __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i118,$2004,1);
                                      $115 = $2004;
                                      $2013 = $115;
                                      $2014 = ((($2013)) + 8|0);
                                      $114 = $2014;
                                      $2015 = $114;
                                      $113 = $2015;
                                      $2016 = $113;
                                      $2017 = ((($2004)) + 4|0);
                                      $2018 = HEAP32[$2017>>2]|0;
                                      $111 = $2018;
                                      $2019 = $111;
                                      $2020 = $120;
                                      $96 = $2020;
                                      $2021 = $96;
                                      $107 = $2016;
                                      $108 = $2019;
                                      $109 = $2021;
                                      $2022 = $107;
                                      $2023 = $108;
                                      $2024 = $109;
                                      $106 = $2024;
                                      $2025 = $106;
                                      ;HEAP8[$105>>0]=HEAP8[$110>>0]|0;
                                      $102 = $2022;
                                      $103 = $2023;
                                      $104 = $2025;
                                      $2026 = $102;
                                      $2027 = $103;
                                      $2028 = $104;
                                      $101 = $2028;
                                      $2029 = $101;
                                      $98 = $2026;
                                      $99 = $2027;
                                      $100 = $2029;
                                      $2030 = $99;
                                      $2031 = $100;
                                      $97 = $2031;
                                      $2032 = $97;
                                      __THREW__ = 0;
                                      invoke_vii(77,($2030|0),($2032|0));
                                      $2033 = __THREW__; __THREW__ = 0;
                                      $2034 = $2033&1;
                                      if ($2034) {
                                       label = 224;
                                       break;
                                      }
                                      __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i118);
                                      $2035 = ((($2004)) + 4|0);
                                      $2036 = HEAP32[$2035>>2]|0;
                                      $2037 = ((($2036)) + 4|0);
                                      HEAP32[$2035>>2] = $2037;
                                     } else {
                                      $2038 = $120;
                                      $112 = $2038;
                                      $2039 = $112;
                                      __THREW__ = 0;
                                      invoke_vii(78,($2004|0),($2039|0));
                                      $2040 = __THREW__; __THREW__ = 0;
                                      $2041 = $2040&1;
                                      if ($2041) {
                                       label = 224;
                                      }
                                     }
                                    } while(0);
                                    if ((label|0) == 224) {
                                     $2270 = ___cxa_find_matching_catch()|0;
                                     $2271 = tempRet0;
                                     $774 = $2270;
                                     $775 = $2271;
                                     __ZN6refptrI12staticScene2ED2Ev($790);
                                     break;
                                    }
                                    __ZN6refptrI12staticScene2ED2Ev($790);
                                    $2042 = $772;
                                    $94 = $2042;
                                    $95 = $type12;
                                    $2043 = $94;
                                    $2044 = ((($2043)) + 4|0);
                                    $2045 = HEAP32[$2044>>2]|0;
                                    $93 = $2043;
                                    $2046 = $93;
                                    $2047 = ((($2046)) + 8|0);
                                    $92 = $2047;
                                    $2048 = $92;
                                    $91 = $2048;
                                    $2049 = $91;
                                    $2050 = HEAP32[$2049>>2]|0;
                                    $2051 = ($2045|0)!=($2050|0);
                                    if ($2051) {
                                     __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i122,$2043,1);
                                     $90 = $2043;
                                     $2052 = $90;
                                     $2053 = ((($2052)) + 8|0);
                                     $89 = $2053;
                                     $2054 = $89;
                                     $88 = $2054;
                                     $2055 = $88;
                                     $2056 = ((($2043)) + 4|0);
                                     $2057 = HEAP32[$2056>>2]|0;
                                     $87 = $2057;
                                     $2058 = $87;
                                     $2059 = $95;
                                     $83 = $2055;
                                     $84 = $2058;
                                     $85 = $2059;
                                     $2060 = $83;
                                     $2061 = $84;
                                     $2062 = $85;
                                     $82 = $2062;
                                     $2063 = $82;
                                     ;HEAP8[$81>>0]=HEAP8[$86>>0]|0;
                                     $78 = $2060;
                                     $79 = $2061;
                                     $80 = $2063;
                                     $2064 = $78;
                                     $2065 = $79;
                                     $2066 = $80;
                                     $77 = $2066;
                                     $2067 = $77;
                                     $74 = $2064;
                                     $75 = $2065;
                                     $76 = $2067;
                                     $2068 = $75;
                                     $2069 = $76;
                                     $73 = $2069;
                                     $2070 = $73;
                                     __THREW__ = 0;
                                     invoke_vii(94,($2068|0),($2070|0));
                                     $2071 = __THREW__; __THREW__ = 0;
                                     $2072 = $2071&1;
                                     if ($2072) {
                                      label = 223;
                                      break;
                                     }
                                     __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i122);
                                     $2073 = ((($2043)) + 4|0);
                                     $2074 = HEAP32[$2073>>2]|0;
                                     $2075 = ((($2074)) + 20|0);
                                     HEAP32[$2073>>2] = $2075;
                                    } else {
                                     $2076 = $95;
                                     __THREW__ = 0;
                                     invoke_vii(95,($2043|0),($2076|0));
                                     $2077 = __THREW__; __THREW__ = 0;
                                     $2078 = $2077&1;
                                     if ($2078) {
                                      label = 223;
                                      break;
                                     }
                                    }
                                    __ZN9trackTypeD2Ev($type12);
                                    __ZN9trackTypeC2Ev($type13);
                                    HEAP8[$type13>>0] = 2;
                                    $2079 = ((($type13)) + 1|0);
                                    HEAP8[$2079>>0] = 4;
                                    $2080 = ((($type13)) + 2|0);
                                    HEAP8[$2080>>0] = 0;
                                    $2081 = ((($type13)) + 3|0);
                                    HEAP8[$2081>>0] = 0;
                                    $2082 = ((($type13)) + 4|0);
                                    HEAP8[$2082>>0] = 0;
                                    $2083 = ((($type13)) + 8|0);
                                    __THREW__ = 0;
                                    $2084 = (invoke_i(91)|0);
                                    $2085 = __THREW__; __THREW__ = 0;
                                    $2086 = $2085&1;
                                    do {
                                     if ($2086) {
                                      label = 226;
                                     } else {
                                      __THREW__ = 0;
                                      $2087 = (invoke_iii(92,($2084|0),(4992|0))|0);
                                      $2088 = __THREW__; __THREW__ = 0;
                                      $2089 = $2088&1;
                                      if ($2089) {
                                       label = 226;
                                       break;
                                      }
                                      __THREW__ = 0;
                                      invoke_vii(93,($791|0),($2087|0));
                                      $2090 = __THREW__; __THREW__ = 0;
                                      $2091 = $2090&1;
                                      if ($2091) {
                                       label = 226;
                                       break;
                                      }
                                      $71 = $2083;
                                      $72 = $791;
                                      $2092 = $71;
                                      $2093 = ((($2092)) + 4|0);
                                      $2094 = HEAP32[$2093>>2]|0;
                                      $70 = $2092;
                                      $2095 = $70;
                                      $2096 = ((($2095)) + 8|0);
                                      $69 = $2096;
                                      $2097 = $69;
                                      $68 = $2097;
                                      $2098 = $68;
                                      $2099 = HEAP32[$2098>>2]|0;
                                      $2100 = ($2094>>>0)<($2099>>>0);
                                      do {
                                       if ($2100) {
                                        __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i126,$2092,1);
                                        $67 = $2092;
                                        $2101 = $67;
                                        $2102 = ((($2101)) + 8|0);
                                        $66 = $2102;
                                        $2103 = $66;
                                        $65 = $2103;
                                        $2104 = $65;
                                        $2105 = ((($2092)) + 4|0);
                                        $2106 = HEAP32[$2105>>2]|0;
                                        $63 = $2106;
                                        $2107 = $63;
                                        $2108 = $72;
                                        $48 = $2108;
                                        $2109 = $48;
                                        $59 = $2104;
                                        $60 = $2107;
                                        $61 = $2109;
                                        $2110 = $59;
                                        $2111 = $60;
                                        $2112 = $61;
                                        $58 = $2112;
                                        $2113 = $58;
                                        ;HEAP8[$57>>0]=HEAP8[$62>>0]|0;
                                        $54 = $2110;
                                        $55 = $2111;
                                        $56 = $2113;
                                        $2114 = $54;
                                        $2115 = $55;
                                        $2116 = $56;
                                        $53 = $2116;
                                        $2117 = $53;
                                        $50 = $2114;
                                        $51 = $2115;
                                        $52 = $2117;
                                        $2118 = $51;
                                        $2119 = $52;
                                        $49 = $2119;
                                        $2120 = $49;
                                        __THREW__ = 0;
                                        invoke_vii(77,($2118|0),($2120|0));
                                        $2121 = __THREW__; __THREW__ = 0;
                                        $2122 = $2121&1;
                                        if ($2122) {
                                         label = 227;
                                         break;
                                        }
                                        __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i126);
                                        $2123 = ((($2092)) + 4|0);
                                        $2124 = HEAP32[$2123>>2]|0;
                                        $2125 = ((($2124)) + 4|0);
                                        HEAP32[$2123>>2] = $2125;
                                       } else {
                                        $2126 = $72;
                                        $64 = $2126;
                                        $2127 = $64;
                                        __THREW__ = 0;
                                        invoke_vii(78,($2092|0),($2127|0));
                                        $2128 = __THREW__; __THREW__ = 0;
                                        $2129 = $2128&1;
                                        if ($2129) {
                                         label = 227;
                                        }
                                       }
                                      } while(0);
                                      if ((label|0) == 227) {
                                       $2274 = ___cxa_find_matching_catch()|0;
                                       $2275 = tempRet0;
                                       $774 = $2274;
                                       $775 = $2275;
                                       __ZN6refptrI12staticScene2ED2Ev($791);
                                       break;
                                      }
                                      __ZN6refptrI12staticScene2ED2Ev($791);
                                      $2130 = ((($type13)) + 8|0);
                                      __THREW__ = 0;
                                      $2131 = (invoke_i(91)|0);
                                      $2132 = __THREW__; __THREW__ = 0;
                                      $2133 = $2132&1;
                                      if ($2133) {
                                       label = 226;
                                       break;
                                      }
                                      __THREW__ = 0;
                                      $2134 = (invoke_iii(92,($2131|0),(5008|0))|0);
                                      $2135 = __THREW__; __THREW__ = 0;
                                      $2136 = $2135&1;
                                      if ($2136) {
                                       label = 226;
                                       break;
                                      }
                                      __THREW__ = 0;
                                      invoke_vii(93,($792|0),($2134|0));
                                      $2137 = __THREW__; __THREW__ = 0;
                                      $2138 = $2137&1;
                                      if ($2138) {
                                       label = 226;
                                       break;
                                      }
                                      $46 = $2130;
                                      $47 = $792;
                                      $2139 = $46;
                                      $2140 = ((($2139)) + 4|0);
                                      $2141 = HEAP32[$2140>>2]|0;
                                      $45 = $2139;
                                      $2142 = $45;
                                      $2143 = ((($2142)) + 8|0);
                                      $44 = $2143;
                                      $2144 = $44;
                                      $43 = $2144;
                                      $2145 = $43;
                                      $2146 = HEAP32[$2145>>2]|0;
                                      $2147 = ($2141>>>0)<($2146>>>0);
                                      do {
                                       if ($2147) {
                                        __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i130,$2139,1);
                                        $42 = $2139;
                                        $2148 = $42;
                                        $2149 = ((($2148)) + 8|0);
                                        $41 = $2149;
                                        $2150 = $41;
                                        $40 = $2150;
                                        $2151 = $40;
                                        $2152 = ((($2139)) + 4|0);
                                        $2153 = HEAP32[$2152>>2]|0;
                                        $38 = $2153;
                                        $2154 = $38;
                                        $2155 = $47;
                                        $23 = $2155;
                                        $2156 = $23;
                                        $34 = $2151;
                                        $35 = $2154;
                                        $36 = $2156;
                                        $2157 = $34;
                                        $2158 = $35;
                                        $2159 = $36;
                                        $33 = $2159;
                                        $2160 = $33;
                                        ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
                                        $29 = $2157;
                                        $30 = $2158;
                                        $31 = $2160;
                                        $2161 = $29;
                                        $2162 = $30;
                                        $2163 = $31;
                                        $28 = $2163;
                                        $2164 = $28;
                                        $25 = $2161;
                                        $26 = $2162;
                                        $27 = $2164;
                                        $2165 = $26;
                                        $2166 = $27;
                                        $24 = $2166;
                                        $2167 = $24;
                                        __THREW__ = 0;
                                        invoke_vii(77,($2165|0),($2167|0));
                                        $2168 = __THREW__; __THREW__ = 0;
                                        $2169 = $2168&1;
                                        if ($2169) {
                                         label = 228;
                                         break;
                                        }
                                        __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i130);
                                        $2170 = ((($2139)) + 4|0);
                                        $2171 = HEAP32[$2170>>2]|0;
                                        $2172 = ((($2171)) + 4|0);
                                        HEAP32[$2170>>2] = $2172;
                                       } else {
                                        $2173 = $47;
                                        $39 = $2173;
                                        $2174 = $39;
                                        __THREW__ = 0;
                                        invoke_vii(78,($2139|0),($2174|0));
                                        $2175 = __THREW__; __THREW__ = 0;
                                        $2176 = $2175&1;
                                        if ($2176) {
                                         label = 228;
                                        }
                                       }
                                      } while(0);
                                      if ((label|0) == 228) {
                                       $2276 = ___cxa_find_matching_catch()|0;
                                       $2277 = tempRet0;
                                       $774 = $2276;
                                       $775 = $2277;
                                       __ZN6refptrI12staticScene2ED2Ev($792);
                                       break;
                                      }
                                      __ZN6refptrI12staticScene2ED2Ev($792);
                                      $2177 = $772;
                                      $21 = $2177;
                                      $22 = $type13;
                                      $2178 = $21;
                                      $2179 = ((($2178)) + 4|0);
                                      $2180 = HEAP32[$2179>>2]|0;
                                      $20 = $2178;
                                      $2181 = $20;
                                      $2182 = ((($2181)) + 8|0);
                                      $19 = $2182;
                                      $2183 = $19;
                                      $18 = $2183;
                                      $2184 = $18;
                                      $2185 = HEAP32[$2184>>2]|0;
                                      $2186 = ($2180|0)!=($2185|0);
                                      if (!($2186)) {
                                       $2211 = $22;
                                       __THREW__ = 0;
                                       invoke_vii(95,($2178|0),($2211|0));
                                       $2212 = __THREW__; __THREW__ = 0;
                                       $2213 = $2212&1;
                                       if ($2213) {
                                        label = 226;
                                        break;
                                       }
                                       __ZN9trackTypeD2Ev($type13);
                                       STACKTOP = sp;return;
                                      }
                                      __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i134,$2178,1);
                                      $17 = $2178;
                                      $2187 = $17;
                                      $2188 = ((($2187)) + 8|0);
                                      $16 = $2188;
                                      $2189 = $16;
                                      $15 = $2189;
                                      $2190 = $15;
                                      $2191 = ((($2178)) + 4|0);
                                      $2192 = HEAP32[$2191>>2]|0;
                                      $14 = $2192;
                                      $2193 = $14;
                                      $2194 = $22;
                                      $10 = $2190;
                                      $11 = $2193;
                                      $12 = $2194;
                                      $2195 = $10;
                                      $2196 = $11;
                                      $2197 = $12;
                                      $9 = $2197;
                                      $2198 = $9;
                                      ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
                                      $5 = $2195;
                                      $6 = $2196;
                                      $7 = $2198;
                                      $2199 = $5;
                                      $2200 = $6;
                                      $2201 = $7;
                                      $4 = $2201;
                                      $2202 = $4;
                                      $1 = $2199;
                                      $2 = $2200;
                                      $3 = $2202;
                                      $2203 = $2;
                                      $2204 = $3;
                                      $0 = $2204;
                                      $2205 = $0;
                                      __THREW__ = 0;
                                      invoke_vii(94,($2203|0),($2205|0));
                                      $2206 = __THREW__; __THREW__ = 0;
                                      $2207 = $2206&1;
                                      if ($2207) {
                                       label = 226;
                                       break;
                                      }
                                      __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i134);
                                      $2208 = ((($2178)) + 4|0);
                                      $2209 = HEAP32[$2208>>2]|0;
                                      $2210 = ((($2209)) + 20|0);
                                      HEAP32[$2208>>2] = $2210;
                                      __ZN9trackTypeD2Ev($type13);
                                      STACKTOP = sp;return;
                                     }
                                    } while(0);
                                    if ((label|0) == 226) {
                                     $2272 = ___cxa_find_matching_catch()|0;
                                     $2273 = tempRet0;
                                     $774 = $2272;
                                     $775 = $2273;
                                    }
                                    __ZN9trackTypeD2Ev($type13);
                                    $2278 = $774;
                                    $2279 = $775;
                                    ___resumeException($2278|0);
                                    // unreachable;
                                   }
                                  } while(0);
                                  if ((label|0) == 223) {
                                   $2268 = ___cxa_find_matching_catch()|0;
                                   $2269 = tempRet0;
                                   $774 = $2268;
                                   $775 = $2269;
                                  }
                                  __ZN9trackTypeD2Ev($type12);
                                  $2278 = $774;
                                  $2279 = $775;
                                  ___resumeException($2278|0);
                                  // unreachable;
                                 }
                                } while(0);
                                if ((label|0) == 220) {
                                 $2264 = ___cxa_find_matching_catch()|0;
                                 $2265 = tempRet0;
                                 $774 = $2264;
                                 $775 = $2265;
                                }
                                __ZN9trackTypeD2Ev($type11);
                                $2278 = $774;
                                $2279 = $775;
                                ___resumeException($2278|0);
                                // unreachable;
                               }
                              } while(0);
                              if ((label|0) == 217) {
                               $2260 = ___cxa_find_matching_catch()|0;
                               $2261 = tempRet0;
                               $774 = $2260;
                               $775 = $2261;
                              }
                              __ZN9trackTypeD2Ev($type10);
                              $2278 = $774;
                              $2279 = $775;
                              ___resumeException($2278|0);
                              // unreachable;
                             }
                            } while(0);
                            if ((label|0) == 214) {
                             $2256 = ___cxa_find_matching_catch()|0;
                             $2257 = tempRet0;
                             $774 = $2256;
                             $775 = $2257;
                            }
                            __ZN9trackTypeD2Ev($type9);
                            $2278 = $774;
                            $2279 = $775;
                            ___resumeException($2278|0);
                            // unreachable;
                           }
                          } while(0);
                          if ((label|0) == 211) {
                           $2252 = ___cxa_find_matching_catch()|0;
                           $2253 = tempRet0;
                           $774 = $2252;
                           $775 = $2253;
                          }
                          __ZN9trackTypeD2Ev($type8);
                          $2278 = $774;
                          $2279 = $775;
                          ___resumeException($2278|0);
                          // unreachable;
                         }
                        } while(0);
                        if ((label|0) == 208) {
                         $2248 = ___cxa_find_matching_catch()|0;
                         $2249 = tempRet0;
                         $774 = $2248;
                         $775 = $2249;
                        }
                        __ZN9trackTypeD2Ev($type7);
                        $2278 = $774;
                        $2279 = $775;
                        ___resumeException($2278|0);
                        // unreachable;
                       }
                      } while(0);
                      if ((label|0) == 205) {
                       $2244 = ___cxa_find_matching_catch()|0;
                       $2245 = tempRet0;
                       $774 = $2244;
                       $775 = $2245;
                      }
                      __ZN9trackTypeD2Ev($type6);
                      $2278 = $774;
                      $2279 = $775;
                      ___resumeException($2278|0);
                      // unreachable;
                     }
                    } while(0);
                    if ((label|0) == 202) {
                     $2240 = ___cxa_find_matching_catch()|0;
                     $2241 = tempRet0;
                     $774 = $2240;
                     $775 = $2241;
                    }
                    __ZN9trackTypeD2Ev($type5);
                    $2278 = $774;
                    $2279 = $775;
                    ___resumeException($2278|0);
                    // unreachable;
                   }
                  } while(0);
                  if ((label|0) == 199) {
                   $2236 = ___cxa_find_matching_catch()|0;
                   $2237 = tempRet0;
                   $774 = $2236;
                   $775 = $2237;
                  }
                  __ZN9trackTypeD2Ev($type4);
                  $2278 = $774;
                  $2279 = $775;
                  ___resumeException($2278|0);
                  // unreachable;
                 }
                } while(0);
                if ((label|0) == 195) {
                 $2230 = ___cxa_find_matching_catch()|0;
                 $2231 = tempRet0;
                 $774 = $2230;
                 $775 = $2231;
                }
                __ZN9trackTypeD2Ev($type3);
                $2278 = $774;
                $2279 = $775;
                ___resumeException($2278|0);
                // unreachable;
               }
              }
             }
            } while(0);
            if ((label|0) == 191) {
             $2224 = ___cxa_find_matching_catch()|0;
             $2225 = tempRet0;
             $774 = $2224;
             $775 = $2225;
            }
            __ZN9trackTypeD2Ev($type2);
            $2278 = $774;
            $2279 = $775;
            ___resumeException($2278|0);
            // unreachable;
           }
          }
         }
        } while(0);
        if ((label|0) == 188) {
         $2220 = ___cxa_find_matching_catch()|0;
         $2221 = tempRet0;
         $774 = $2220;
         $775 = $2221;
        }
        __ZN9trackTypeD2Ev($type1);
        $2278 = $774;
        $2279 = $775;
        ___resumeException($2278|0);
        // unreachable;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 184) {
  $2214 = ___cxa_find_matching_catch()|0;
  $2215 = tempRet0;
  $774 = $2214;
  $775 = $2215;
 }
 __ZN9trackTypeD2Ev($type);
 $2278 = $774;
 $2279 = $775;
 ___resumeException($2278|0);
 // unreachable;
}
function __ZN9trackTypeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $6 = sp + 12|0;
 $10 = $this;
 $11 = $10;
 $12 = ((($11)) + 8|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN9trackTypeC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 ;HEAP8[$3>>0]=HEAP8[$4>>0]|0;HEAP8[$3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$3+4>>0]=HEAP8[$4+4>>0]|0;
 $5 = ((($3)) + 8|0);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEEC2ERKS6_($5,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 12|0;
 $34 = sp + 60|0;
 $__v = sp + 92|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 20)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 20)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 20)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferI9trackTypeRNS_9allocatorIS1_EEEC2EjjS4_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __THREW__ = 0;
 invoke_vii(94,($118|0),($120|0));
 $121 = __THREW__; __THREW__ = 0;
 $122 = $121&1;
 if ($122) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferI9trackTypeRNS_9allocatorIS1_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 }
 $123 = ((($__v)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 20|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(96,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferI9trackTypeRNS_9allocatorIS1_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferI9trackTypeRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN9trackTypeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI6refptrI12staticScene2ENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI6refptrI12staticScene2ENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZN6refptrI12staticScene2ED2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 4)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEEC2ERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 100|0;
 $10 = sp + 108|0;
 $11 = sp;
 $15 = sp + 110|0;
 $17 = sp + 8|0;
 $19 = sp + 111|0;
 $25 = sp + 109|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 4)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(97,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseI6refptrI12staticScene2ENS_9allocatorIS3_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(98,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseI6refptrI12staticScene2ENS_9allocatorIS3_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<2;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = ((($14)) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<2)|0);
  $2 = $14;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN6refptrI12staticScene2EC2ERKS1_($42,$44);
  __ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 4|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 214748364;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferI9trackTypeRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*20)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*20)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*20)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -20|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -20|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN9trackTypeC2EOS_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -20|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 20)&-1;
 __ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 20)&-1;
 $39 = (($26) + (($38*20)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 20)&-1;
 $51 = (($42) + (($50*20)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 20)&-1;
 $67 = (($54) + (($66*20)|0)|0);
 __ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN9trackTypeC2EOS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 92|0;
 $6 = sp;
 $9 = sp + 108|0;
 $10 = sp + 125|0;
 $11 = sp + 8|0;
 $15 = sp + 124|0;
 $31 = $this;
 $32 = $0;
 $33 = $31;
 $34 = $32;
 ;HEAP8[$33>>0]=HEAP8[$34>>0]|0;HEAP8[$33+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$34+3>>0]|0;HEAP8[$33+4>>0]=HEAP8[$34+4>>0]|0;
 $35 = ((($33)) + 8|0);
 $36 = $32;
 $37 = ((($36)) + 8|0);
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 $28 = $39;
 $40 = $28;
 $41 = ((($40)) + 8|0);
 $27 = $41;
 $42 = $27;
 $26 = $42;
 $43 = $26;
 $25 = $43;
 $44 = $25;
 $13 = $38;
 $14 = $44;
 $45 = $13;
 $12 = $45;
 HEAP32[$45>>2] = 0;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($45)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $47;
 HEAP32[$9>>2] = 0;
 $48 = $8;
 $7 = $9;
 $49 = $7;
 $50 = HEAP32[$49>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $48;
 HEAP32[$5>>2] = $50;
 $51 = $4;
 $3 = $6;
 $2 = $5;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$51>>2] = $53;
 $54 = $30;
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$38>>2] = $55;
 $56 = $30;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($38)) + 4|0);
 HEAP32[$59>>2] = $58;
 $60 = $30;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $21 = $38;
 $66 = $21;
 $67 = ((($66)) + 8|0);
 $20 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 HEAP32[$69>>2] = $65;
 $70 = $30;
 $24 = $70;
 $71 = $24;
 $72 = ((($71)) + 8|0);
 $23 = $72;
 $73 = $23;
 $22 = $73;
 $74 = $22;
 HEAP32[$74>>2] = 0;
 $75 = $30;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = 0;
 $77 = $30;
 HEAP32[$77>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 20)&-1;
 $39 = (($26) + (($38*20)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 20)&-1;
 $55 = (($42) + (($54*20)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*20)|0)|0);
 __ZNKSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI9trackTypeRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -20|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN9trackTypeD2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 20)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZN5Enemy6updateEjf($this,$elapsedTime,$elapsedEnemyDist) {
 $this = $this|0;
 $elapsedTime = $elapsedTime|0;
 $elapsedEnemyDist = +$elapsedEnemyDist;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0;
 var $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0;
 var $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $angle = 0.0, $bbox = 0, $cosA = 0.0, $cosA1 = 0.0, $delta = 0.0, $pos = 0, $sinA = 0.0, $sinA2 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $pos = sp + 56|0;
 $bbox = sp + 32|0;
 $3 = sp + 8|0;
 $0 = $this;
 $1 = $elapsedTime;
 $2 = $elapsedEnemyDist;
 $4 = $0;
 $5 = ((($4)) + 68|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if ($7) {
  $91 = ((($4)) + 12|0);
  $92 = ((($91)) + 32|0);
  $93 = ((($92)) + 12|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $94;
  $96 = $95 * 0.10000000000000001;
  $97 = $96;
  $98 = (+Math_cos((+$97)));
  $cosA1 = $98;
  $99 = ((($4)) + 12|0);
  $100 = ((($99)) + 32|0);
  $101 = ((($100)) + 12|0);
  $102 = +HEAPF32[$101>>2];
  $103 = $102;
  $104 = $103 * 0.10000000000000001;
  $105 = $104;
  $106 = (+Math_sin((+$105)));
  $sinA2 = $106;
  $107 = $cosA1;
  $108 = ((($4)) + 12|0);
  $109 = ((($108)) + 16|0);
  $110 = ((($109)) + 4|0);
  HEAPF32[$110>>2] = $107;
  $111 = $cosA1;
  $112 = ((($4)) + 12|0);
  $113 = ((($112)) + 32|0);
  $114 = ((($113)) + 8|0);
  HEAPF32[$114>>2] = $111;
  $115 = $sinA2;
  $116 = -$115;
  $117 = ((($4)) + 12|0);
  $118 = ((($117)) + 16|0);
  $119 = ((($118)) + 8|0);
  HEAPF32[$119>>2] = $116;
  $120 = $sinA2;
  $121 = ((($4)) + 12|0);
  $122 = ((($121)) + 32|0);
  $123 = ((($122)) + 4|0);
  HEAPF32[$123>>2] = $120;
  $124 = $2;
  $125 = ((($4)) + 12|0);
  $126 = ((($125)) + 32|0);
  $127 = ((($126)) + 12|0);
  $128 = +HEAPF32[$127>>2];
  $129 = $128 + $124;
  HEAPF32[$127>>2] = $129;
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($4)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($8))|0;
 HEAP32[$9>>2] = $11;
 $12 = ((($4)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(0);
 if ($14) {
  __ZN5Enemy9changedirEv($4);
 }
 $15 = $1;
 $16 = (+($15>>>0));
 $17 = $16 * 0.004999999888241291;
 $delta = $17;
 $18 = ((($4)) + 12|0);
 $19 = ((($18)) + 16|0);
 $20 = ((($19)) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $21 < 50.0;
 if ($22) {
  $23 = ((($4)) + 60|0);
  $24 = +HEAPF32[$23>>2];
  $25 = ((($4)) + 12|0);
  $26 = ((($25)) + 12|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $27 + $24;
  HEAPF32[$26>>2] = $28;
 }
 $29 = ((($4)) + 12|0);
 $30 = ((($29)) + 12|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $31 < -10.0;
 if ($32) {
  $33 = ((($4)) + 60|0);
  $34 = +HEAPF32[$33>>2];
  $35 = -$34;
  $36 = ((($4)) + 60|0);
  HEAPF32[$36>>2] = $35;
  $37 = ((($4)) + 12|0);
  $38 = ((($37)) + 12|0);
  HEAPF32[$38>>2] = -10.0;
 }
 $39 = ((($4)) + 12|0);
 $40 = ((($39)) + 12|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $41 > 10.0;
 if ($42) {
  $43 = ((($4)) + 12|0);
  $44 = ((($43)) + 12|0);
  HEAPF32[$44>>2] = 10.0;
  $45 = ((($4)) + 60|0);
  $46 = +HEAPF32[$45>>2];
  $47 = -$46;
  $48 = ((($4)) + 60|0);
  HEAPF32[$48>>2] = $47;
 }
 $49 = ((($4)) + 60|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $50 * 0.31415927410125732;
 $angle = $51;
 $52 = $angle;
 $53 = (+Math_cos((+$52)));
 $cosA = $53;
 $54 = $angle;
 $55 = (+Math_sin((+$54)));
 $sinA = $55;
 $56 = $cosA;
 $57 = ((($4)) + 12|0);
 $58 = ((($57)) + 16|0);
 $59 = ((($58)) + 4|0);
 HEAPF32[$59>>2] = $56;
 $60 = $cosA;
 $61 = ((($4)) + 12|0);
 HEAPF32[$61>>2] = $60;
 $62 = $sinA;
 $63 = -$62;
 $64 = ((($4)) + 12|0);
 $65 = ((($64)) + 16|0);
 HEAPF32[$65>>2] = $63;
 $66 = $sinA;
 $67 = ((($4)) + 12|0);
 $68 = ((($67)) + 4|0);
 HEAPF32[$68>>2] = $66;
 $69 = $2;
 $70 = ((($4)) + 12|0);
 $71 = ((($70)) + 16|0);
 $72 = ((($71)) + 12|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $73 + $69;
 HEAPF32[$72>>2] = $74;
 $75 = ((($4)) + 12|0);
 $76 = ((($75)) + 12|0);
 $77 = +HEAPF32[$76>>2];
 $78 = ((($4)) + 12|0);
 $79 = ((($78)) + 16|0);
 $80 = ((($79)) + 12|0);
 $81 = +HEAPF32[$80>>2];
 $82 = ((($4)) + 12|0);
 $83 = ((($82)) + 32|0);
 $84 = ((($83)) + 12|0);
 $85 = +HEAPF32[$84>>2];
 __ZN4vec3C2Efff($pos,$77,$81,$85);
 $86 = ((($4)) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 20|0);
 __ZNK5aabb29translateER4vec3($bbox,$88,$pos);
 ;HEAP32[$3>>2]=HEAP32[(5108)>>2]|0;HEAP32[$3+4>>2]=HEAP32[(5108)+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[(5108)+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[(5108)+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[(5108)+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[(5108)+20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$3+20>>2]|0;
 $89 = (__ZN5aabb29intersectES_($bbox,$$byval_copy)|0);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 __ZN6Player3dieEv(5048);
 $90 = ((($4)) + 68|0);
 HEAP8[$90>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN5Enemy9changedirEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = +HEAPF32[$2>>2];
 $4 = -$3;
 $5 = ((($1)) + 60|0);
 HEAPF32[$5>>2] = $4;
 $6 = (+__ZN19randomize_generator9get_floatEv(5024));
 $7 = $6 * 2000.0;
 $8 = $7 + 1000.0;
 $9 = (~~(($8)));
 $10 = ((($1)) + 64|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN4vec3C2Efff($this,$ix,$iy,$iz) {
 $this = $this|0;
 $ix = +$ix;
 $iy = +$iy;
 $iz = +$iz;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ix;
 $2 = $iy;
 $3 = $iz;
 $4 = $0;
 $5 = $1;
 HEAPF32[$4>>2] = $5;
 $6 = $2;
 $7 = ((($4)) + 4|0);
 HEAPF32[$7>>2] = $6;
 $8 = $3;
 $9 = ((($4)) + 8|0);
 HEAPF32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNK5aabb29translateER4vec3($agg$result,$this,$t) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $3 = sp + 16|0;
 $0 = $this;
 $1 = $t;
 $4 = $0;
 __ZN5aabb2C2Ev($agg$result);
 $5 = $1;
 __ZplRK4vec3S1_($2,$4,$5);
 ;HEAP32[$agg$result>>2]=HEAP32[$2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$2+8>>2]|0;
 $6 = ((($agg$result)) + 12|0);
 $7 = ((($4)) + 12|0);
 $8 = $1;
 __ZplRK4vec3S1_($3,$7,$8);
 ;HEAP32[$6>>2]=HEAP32[$3>>2]|0;HEAP32[$6+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$3+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN5aabb29intersectES_($this,$r) {
 $this = $this|0;
 $r = $r|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$r>>2];
 $6 = $4 > $5;
 if ($6) {
  $7 = ((($r)) + 12|0);
  $8 = +HEAPF32[$7>>2];
  $9 = +HEAPF32[$2>>2];
  $10 = $8 > $9;
  if ($10) {
   $11 = ((($2)) + 12|0);
   $12 = ((($11)) + 4|0);
   $13 = +HEAPF32[$12>>2];
   $14 = ((($r)) + 4|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $13 > $15;
   if ($16) {
    $17 = ((($r)) + 12|0);
    $18 = ((($17)) + 4|0);
    $19 = +HEAPF32[$18>>2];
    $20 = ((($2)) + 4|0);
    $21 = +HEAPF32[$20>>2];
    $22 = $19 > $21;
    if ($22) {
     $23 = ((($2)) + 12|0);
     $24 = ((($23)) + 8|0);
     $25 = +HEAPF32[$24>>2];
     $26 = ((($r)) + 8|0);
     $27 = +HEAPF32[$26>>2];
     $28 = $25 > $27;
     if ($28) {
      $29 = ((($r)) + 12|0);
      $30 = ((($29)) + 8|0);
      $31 = +HEAPF32[$30>>2];
      $32 = ((($2)) + 8|0);
      $33 = +HEAPF32[$32>>2];
      $34 = $31 > $33;
      if ($34) {
       $$expand_i1_val = 1;
       HEAP8[$0>>0] = $$expand_i1_val;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $35 = $$pre_trunc&1;
       STACKTOP = sp;return ($35|0);
      }
     }
    }
   }
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $35 = $$pre_trunc&1;
 STACKTOP = sp;return ($35|0);
}
function __ZN6Player3dieEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 88|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($1)) + 92|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN19randomize_generator9get_floatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN19randomize_generator9get_shortEv($1)|0);
 $3 = (+($2<<16>>16));
 $4 = $3 * 3.0518509447574615E-5;
 STACKTOP = sp;return (+$4);
}
function __Z8mainloopv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5144>>2]|0;
 __ZN8testview6renderEv($0);
 return;
}
function _main() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 __Z9initTouchPFvvE(99);
 $2 = (__Znwj(1104)|0);
 __THREW__ = 0;
 invoke_vi(100,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  HEAP32[5144>>2] = $2;
  __Z7touchgov();
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8testview6renderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $deltaDistance = 0.0, $deltaTime = 0.0, $fps = 0.0, $textc = 0, $time = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $textc = sp + 24|0;
 $0 = $this;
 $1 = $0;
 $2 = (+_emscripten_get_now());
 $3 = (~~(($2))>>>0);
 $time = $3;
 $4 = $time;
 $5 = HEAP32[5936>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (+($6>>>0));
 $deltaTime = $7;
 $8 = $time;
 HEAP32[5936>>2] = $8;
 $9 = $deltaTime;
 $10 = $9 * 0.05000000074505806;
 $deltaDistance = $10;
 $11 = HEAP32[5264>>2]|0;
 __ZN6device5clearEj($11,16640);
 $12 = HEAP8[(5136)>>0]|0;
 $13 = $12&1;
 if ($13) {
  $16 = HEAP32[(5140)>>2]|0;
  $17 = ($16>>>0)>(3000);
  if ($17) {
   $18 = ((($1)) + 16|0);
   __ZN5track5resetEb($18,1);
   __ZN6Player5resetEv(5048);
   $19 = ((($1)) + 304|0);
   __ZN8EnemyGen5resetEv($19);
  }
 } else {
  $14 = ((($1)) + 16|0);
  $15 = $deltaDistance;
  __ZN5track6renderEf($14,$15);
 }
 $20 = $deltaTime;
 $21 = (~~(($20))>>>0);
 __ZN6Player6updateEj(5048,$21);
 $22 = ((($1)) + 304|0);
 $23 = $deltaTime;
 $24 = (~~(($23))>>>0);
 $25 = $deltaDistance;
 __ZN8EnemyGen6updateEjf($22,$24,$25);
 __ZN12staticScene215renderInstancesEv();
 $26 = ((($1)) + 244|0);
 __ZN9peaceText6renderEPf($26,0);
 $27 = $time;
 $28 = ((($1)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) - ($29))|0;
 $31 = (+($30>>>0));
 $32 = 1000.0 / $31;
 $fps = $32;
 $33 = $time;
 $34 = ((($1)) + 8|0);
 HEAP32[$34>>2] = $33;
 ;HEAP32[$textc>>2]=HEAP32[5240>>2]|0;HEAP32[$textc+4>>2]=HEAP32[5240+4>>2]|0;HEAP32[$textc+8>>2]=HEAP32[5240+8>>2]|0;HEAP32[$textc+12>>2]=HEAP32[5240+12>>2]|0;
 $35 = $time;
 $36 = ((($1)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) - ($37))|0;
 $39 = ($38>>>0)>(1000);
 if (!($39)) {
  $46 = HEAP32[$1>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$1>>2] = $47;
  __Z4swapv();
  STACKTOP = sp;return;
 }
 $40 = $time;
 $41 = ((($1)) + 12|0);
 HEAP32[$41>>2] = $40;
 $42 = HEAP32[$1>>2]|0;
 $43 = ((($1)) + 4|0);
 HEAP32[$43>>2] = $42;
 HEAP32[$1>>2] = 0;
 $44 = ((($1)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 HEAP32[$vararg_buffer>>2] = $45;
 (_printf((5256|0),($vararg_buffer|0))|0);
 $46 = HEAP32[$1>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[$1>>2] = $47;
 __Z4swapv();
 STACKTOP = sp;return;
}
function __ZN8testviewC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $color = 0, $extensions = 0, $float3_ = 0, $height = 0, $isFullScreen = 0, $mat = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $width = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $color = sp + 120|0;
 $width = sp + 20|0;
 $height = sp + 16|0;
 $isFullScreen = sp + 12|0;
 $mat = sp + 24|0;
 $float3_ = sp + 88|0;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 __ZN5trackC2Ev($4);
 $5 = ((($3)) + 244|0);
 __THREW__ = 0;
 invoke_vi(101,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $134 = ___cxa_find_matching_catch()|0;
  $135 = tempRet0;
  $1 = $134;
  $2 = $135;
  __ZN5trackD2Ev($4);
  $148 = $1;
  $149 = $2;
  ___resumeException($148|0);
  // unreachable;
 }
 $8 = ((($3)) + 304|0);
 __THREW__ = 0;
 invoke_vi(102,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $136 = ___cxa_find_matching_catch()|0;
  $137 = tempRet0;
  $1 = $136;
  $2 = $137;
 } else {
  $11 = ((($3)) + 1036|0);
  __THREW__ = 0;
  invoke_vi(103,($11|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $138 = ___cxa_find_matching_catch()|0;
   $139 = tempRet0;
   $1 = $138;
   $2 = $139;
  } else {
   $14 = ((($3)) + 1040|0);
   __THREW__ = 0;
   invoke_vi(104,($14|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $140 = ___cxa_find_matching_catch()|0;
    $141 = tempRet0;
    $1 = $140;
    $2 = $141;
   } else {
    $17 = ((($3)) + 1100|0);
    __THREW__ = 0;
    $18 = (invoke_ii(105,80)|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    do {
     if ($20) {
      label = 48;
     } else {
      __THREW__ = 0;
      invoke_vi(106,($18|0));
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $144 = ___cxa_find_matching_catch()|0;
       $145 = tempRet0;
       $1 = $144;
       $2 = $145;
       __ZdlPv($18);
       break;
      }
      __THREW__ = 0;
      invoke_vii(107,($17|0),($18|0));
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       label = 48;
      } else {
       __THREW__ = 0;
       $25 = (+invoke_d(108));
       $26 = __THREW__; __THREW__ = 0;
       $27 = $26&1;
       do {
        if (!($27)) {
         $28 = (~~(($25))>>>0);
         HEAP32[5936>>2] = $28;
         $29 = HEAP32[5936>>2]|0;
         HEAP32[5024>>2] = $29;
         __THREW__ = 0;
         $30 = (+invoke_d(108));
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if (!($32)) {
          __THREW__ = 0;
          HEAPF64[$vararg_buffer>>3] = $30;
          (invoke_iii(109,(5192|0),($vararg_buffer|0))|0);
          $33 = __THREW__; __THREW__ = 0;
          $34 = $33&1;
          if (!($34)) {
           __THREW__ = 0;
           $35 = (invoke_ii(110,7939)|0);
           $36 = __THREW__; __THREW__ = 0;
           $37 = $36&1;
           if (!($37)) {
            $extensions = $35;
            $38 = $extensions;
            __THREW__ = 0;
            HEAP32[$vararg_buffer1>>2] = $38;
            (invoke_iii(109,(5200|0),($vararg_buffer1|0))|0);
            $39 = __THREW__; __THREW__ = 0;
            $40 = $39&1;
            if (!($40)) {
             $41 = HEAP32[5264>>2]|0;
             __THREW__ = 0;
             invoke_vi(111,($41|0));
             $42 = __THREW__; __THREW__ = 0;
             $43 = $42&1;
             if (!($43)) {
              __THREW__ = 0;
              invoke_v(112);
              $44 = __THREW__; __THREW__ = 0;
              $45 = $44&1;
              if (!($45)) {
               ;HEAP32[$color>>2]=HEAP32[5480>>2]|0;HEAP32[$color+4>>2]=HEAP32[5480+4>>2]|0;HEAP32[$color+8>>2]=HEAP32[5480+8>>2]|0;HEAP32[$color+12>>2]=HEAP32[5480+12>>2]|0;
               $46 = HEAP32[5264>>2]|0;
               __THREW__ = 0;
               invoke_vii(113,($46|0),($color|0));
               $47 = __THREW__; __THREW__ = 0;
               $48 = $47&1;
               if (!($48)) {
                __THREW__ = 0;
                invoke_viii(114,($width|0),($height|0),($isFullScreen|0));
                $49 = __THREW__; __THREW__ = 0;
                $50 = $49&1;
                if ($50) {
                 break;
                }
                $51 = HEAP32[$width>>2]|0;
                $52 = HEAP32[$height>>2]|0;
                __THREW__ = 0;
                invoke_vidiiddi(115,($mat|0),1.5707963705062866,($51|0),($52|0),4.0,900.0,0);
                $53 = __THREW__; __THREW__ = 0;
                $54 = $53&1;
                if ($54) {
                 break;
                }
                $55 = HEAP32[5264>>2]|0;
                __THREW__ = 0;
                invoke_vii(116,($55|0),($mat|0));
                $56 = __THREW__; __THREW__ = 0;
                $57 = $56&1;
                if ($57) {
                 break;
                }
                __THREW__ = 0;
                invoke_viddd(117,($float3_|0),0.0,0.0,13.0);
                $58 = __THREW__; __THREW__ = 0;
                $59 = $58&1;
                if ($59) {
                 break;
                }
                $60 = ((($3)) + 1100|0);
                __THREW__ = 0;
                $61 = (invoke_ii(118,($60|0))|0);
                $62 = __THREW__; __THREW__ = 0;
                $63 = $62&1;
                if ($63) {
                 break;
                }
                __THREW__ = 0;
                invoke_vii(119,($61|0),($float3_|0));
                $64 = __THREW__; __THREW__ = 0;
                $65 = $64&1;
                if ($65) {
                 break;
                }
                $66 = ((($3)) + 1100|0);
                __THREW__ = 0;
                $67 = (invoke_ii(118,($66|0))|0);
                $68 = __THREW__; __THREW__ = 0;
                $69 = $68&1;
                if ($69) {
                 break;
                }
                $70 = ((($67)) + 8|0);
                HEAPF32[$70>>2] = 1.8849557638168335;
                $71 = ((($3)) + 1100|0);
                __THREW__ = 0;
                $72 = (invoke_ii(118,($71|0))|0);
                $73 = __THREW__; __THREW__ = 0;
                $74 = $73&1;
                if ($74) {
                 break;
                }
                $75 = ((($72)) + 12|0);
                HEAPF32[$75>>2] = 3.1415927410125732;
                $76 = ((($3)) + 1100|0);
                __THREW__ = 0;
                $77 = (invoke_ii(118,($76|0))|0);
                $78 = __THREW__; __THREW__ = 0;
                $79 = $78&1;
                if ($79) {
                 break;
                }
                __THREW__ = 0;
                invoke_vidd(120,($77|0),0.0,0.0);
                $80 = __THREW__; __THREW__ = 0;
                $81 = $80&1;
                if ($81) {
                 break;
                }
                $82 = HEAP32[5264>>2]|0;
                $83 = ((($3)) + 1100|0);
                __THREW__ = 0;
                $84 = (invoke_ii(118,($83|0))|0);
                $85 = __THREW__; __THREW__ = 0;
                $86 = $85&1;
                if ($86) {
                 break;
                }
                $87 = ((($84)) + 16|0);
                __THREW__ = 0;
                invoke_vii(121,($82|0),($87|0));
                $88 = __THREW__; __THREW__ = 0;
                $89 = $88&1;
                if ($89) {
                 break;
                }
                $90 = ((($3)) + 1036|0);
                __THREW__ = 0;
                $91 = (invoke_i(91)|0);
                $92 = __THREW__; __THREW__ = 0;
                $93 = $92&1;
                if ($93) {
                 break;
                }
                __THREW__ = 0;
                $94 = (invoke_iii(92,($91|0),(5208|0))|0);
                $95 = __THREW__; __THREW__ = 0;
                $96 = $95&1;
                if ($96) {
                 break;
                }
                __THREW__ = 0;
                (invoke_iii(122,($90|0),($94|0))|0);
                $97 = __THREW__; __THREW__ = 0;
                $98 = $97&1;
                if ($98) {
                 break;
                }
                __THREW__ = 0;
                invoke_v(123);
                $99 = __THREW__; __THREW__ = 0;
                $100 = $99&1;
                if ($100) {
                 break;
                }
                $101 = ((($3)) + 16|0);
                __THREW__ = 0;
                invoke_vi(124,($101|0));
                $102 = __THREW__; __THREW__ = 0;
                $103 = $102&1;
                if ($103) {
                 break;
                }
                __THREW__ = 0;
                invoke_v(125);
                $104 = __THREW__; __THREW__ = 0;
                $105 = $104&1;
                if ($105) {
                 break;
                }
                $106 = ((($3)) + 16|0);
                __THREW__ = 0;
                invoke_vii(126,($106|0),0);
                $107 = __THREW__; __THREW__ = 0;
                $108 = $107&1;
                if ($108) {
                 break;
                }
                $109 = ((($3)) + 1040|0);
                $110 = ((($109)) + 12|0);
                __THREW__ = 0;
                invoke_vi(127,($110|0));
                $111 = __THREW__; __THREW__ = 0;
                $112 = $111&1;
                if ($112) {
                 break;
                }
                $113 = ((($3)) + 1040|0);
                $114 = ((($3)) + 1036|0);
                __THREW__ = 0;
                $115 = (invoke_ii(128,($114|0))|0);
                $116 = __THREW__; __THREW__ = 0;
                $117 = $116&1;
                if ($117) {
                 break;
                }
                __THREW__ = 0;
                invoke_vii(129,($113|0),($115|0));
                $118 = __THREW__; __THREW__ = 0;
                $119 = $118&1;
                if ($119) {
                 break;
                }
                __THREW__ = 0;
                invoke_vi(130,(5048|0));
                $120 = __THREW__; __THREW__ = 0;
                $121 = $120&1;
                if ($121) {
                 break;
                }
                $122 = ((($3)) + 304|0);
                __THREW__ = 0;
                invoke_vi(131,($122|0));
                $123 = __THREW__; __THREW__ = 0;
                $124 = $123&1;
                if ($124) {
                 break;
                }
                $125 = ((($3)) + 244|0);
                __THREW__ = 0;
                invoke_vi(132,($125|0));
                $126 = __THREW__; __THREW__ = 0;
                $127 = $126&1;
                if ($127) {
                 break;
                }
                $128 = ((($3)) + 244|0);
                __THREW__ = 0;
                (invoke_iiiiiii(133,($128|0),0,0,(5224|0),16,16)|0);
                $129 = __THREW__; __THREW__ = 0;
                $130 = $129&1;
                if ($130) {
                 break;
                }
                $131 = ((($3)) + 244|0);
                __THREW__ = 0;
                invoke_vi(134,($131|0));
                $132 = __THREW__; __THREW__ = 0;
                $133 = $132&1;
                if ($133) {
                 break;
                }
                STACKTOP = sp;return;
               }
              }
             }
            }
           }
          }
         }
        }
       } while(0);
       $146 = ___cxa_find_matching_catch()|0;
       $147 = tempRet0;
       $1 = $146;
       $2 = $147;
       __ZN6refptrI6cameraED2Ev($17);
      }
     }
    } while(0);
    if ((label|0) == 48) {
     $142 = ___cxa_find_matching_catch()|0;
     $143 = tempRet0;
     $1 = $142;
     $2 = $143;
    }
    __ZN16staticScene2InstD2Ev($14);
   }
   __ZN6refptrI12staticScene2ED2Ev($11);
  }
  __ZN8EnemyGenD2Ev($8);
 }
 __ZN9peaceTextD2Ev($5);
 __ZN5trackD2Ev($4);
 $148 = $1;
 $149 = $2;
 ___resumeException($148|0);
 // unreachable;
}
function ___cxx_global_var_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $6 = sp + 8|0;
 $9 = 5032;
 $10 = $9;
 $8 = $10;
 $11 = $8;
 $7 = $11;
 HEAP32[$11>>2] = 0;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($11)) + 8|0);
 $5 = $13;
 HEAP32[$6>>2] = 0;
 $14 = $5;
 $4 = $6;
 $15 = $4;
 $16 = HEAP32[$15>>2]|0;
 $2 = $14;
 HEAP32[$3>>2] = $16;
 $17 = $2;
 $1 = $17;
 $0 = $3;
 $18 = $0;
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $19;
 (___cxa_atexit((135|0),(5032|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6PlayerC2Ev(5048);
 (___cxa_atexit((136|0),(5048|0),(___dso_handle|0))|0);
 return;
}
function __ZN6PlayerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN16staticScene2InstC2Ev($3);
 $4 = ((($3)) + 60|0);
 __THREW__ = 0;
 invoke_vi(87,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZN16staticScene2InstD2Ev($3);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  $7 = ((($3)) + 88|0);
  HEAP8[$7>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN16staticScene2InstC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8duallinkC2Ev($3);
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 12|0);
 __THREW__ = 0;
 invoke_vi(137,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZN8duallinkD2Ev($3);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN9float4x3aC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4vec4C2Ev($1);
 $2 = ((($1)) + 16|0);
 __ZN4vec4C2Ev($2);
 $3 = ((($1)) + 32|0);
 __ZN4vec4C2Ev($3);
 STACKTOP = sp;return;
}
function __ZN4vec4C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN16staticScene2InstD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8duallinkD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6PlayerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN16staticScene2InstD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8EnemyGen5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin = 0, $__end = 0, $__range = 0, $e = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 720|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 724|0);
 HEAP32[$3>>2] = 6000;
 $4 = ((($1)) + 728|0);
 HEAP32[$4>>2] = 0;
 $__range = $1;
 $5 = $__range;
 $__begin = $5;
 $6 = $__range;
 $7 = ((($6)) + 720|0);
 $__end = $7;
 while(1) {
  $8 = $__begin;
  $9 = $__end;
  $10 = ($8|0)!=($9|0);
  if (!($10)) {
   break;
  }
  $11 = $__begin;
  $e = $11;
  $12 = $e;
  __ZN5Enemy5resetEv($12);
  $13 = $__begin;
  $14 = ((($13)) + 72|0);
  $__begin = $14;
 }
 STACKTOP = sp;return;
}
function __ZN5Enemy5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 68|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($1)) + 64|0);
 HEAP32[$3>>2] = 0;
 __ZN16staticScene2Inst8setModelEP12staticScene2($1,0);
 STACKTOP = sp;return;
}
function __ZN16staticScene2Inst8setModelEP12staticScene2($this,$model) {
 $this = $this|0;
 $model = $model|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $model;
 $2 = $0;
 __ZN8duallink6unlinkEv($2);
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = ((($5)) + 68|0);
  __ZN8duallink10insertbackEPS_($6,$2);
 }
 $7 = $1;
 $8 = ((($2)) + 8|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN8EnemyGen6updateEjf($this,$elapsedTime,$backgroundElapsedDist) {
 $this = $this|0;
 $elapsedTime = $elapsedTime|0;
 $backgroundElapsedDist = +$backgroundElapsedDist;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin = 0, $__end = 0, $__range = 0, $e = 0, $elapsedDist = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $elapsedTime;
 $2 = $backgroundElapsedDist;
 $3 = $0;
 $4 = $1;
 $5 = ((($3)) + 728|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($3)) + 728|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 724|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)>($11>>>0);
 if ($12) {
  __ZN8EnemyGen10spawnEnemyEv($3);
 }
 $13 = $1;
 $14 = (+($13>>>0));
 $15 = $14 * -0.02500000037252903;
 $elapsedDist = $15;
 $16 = HEAP8[(5136)>>0]|0;
 $17 = $16&1;
 if ($17) {
  $18 = $2;
  $19 = $elapsedDist;
  $20 = $19 + $18;
  $elapsedDist = $20;
 }
 $__range = $3;
 $21 = $__range;
 $__begin = $21;
 $22 = $__range;
 $23 = ((($22)) + 720|0);
 $__end = $23;
 while(1) {
  $24 = $__begin;
  $25 = $__end;
  $26 = ($24|0)!=($25|0);
  if (!($26)) {
   break;
  }
  $27 = $__begin;
  $e = $27;
  $28 = $e;
  $29 = (__ZN16staticScene2InstcvbEv($28)|0);
  if ($29) {
   $30 = $e;
   $31 = $1;
   $32 = $elapsedDist;
   __ZN5Enemy6updateEjf($30,$31,$32);
  }
  $33 = $__begin;
  $34 = ((($33)) + 72|0);
  $__begin = $34;
 }
 STACKTOP = sp;return;
}
function __ZN8EnemyGen10spawnEnemyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 720|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + (($6*72)|0)|0);
 $8 = ((($7)) + 68|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($4)) + 720|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($4) + (($10*72)|0)|0);
 $12 = ((($11)) + 12|0);
 __ZN9float4x3a8identityEv($12);
 $13 = (+__ZN19randomize_generator9get_floatEv(5024));
 $14 = $13 * 20.0;
 $15 = $14 - 10.0;
 $16 = ((($4)) + 720|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($4) + (($17*72)|0)|0);
 $19 = ((($18)) + 12|0);
 $20 = ((($19)) + 12|0);
 HEAPF32[$20>>2] = $15;
 $21 = ((($4)) + 720|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($4) + (($22*72)|0)|0);
 $24 = ((($23)) + 12|0);
 $25 = ((($24)) + 16|0);
 $26 = ((($25)) + 12|0);
 HEAPF32[$26>>2] = 200.0;
 $27 = ((($4)) + 720|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($4) + (($28*72)|0)|0);
 $30 = (__ZN19randomize_generator9get_shortEv(5024)|0);
 $31 = $30 << 16 >> 16;
 $2 = 5032;
 $32 = $2;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$32>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($38|0) / 4)&-1;
 $40 = (($31>>>0) % ($39>>>0))&-1;
 $0 = 5032;
 $1 = $40;
 $41 = $0;
 $42 = $1;
 $43 = HEAP32[$41>>2]|0;
 $44 = (($43) + ($42<<2)|0);
 $45 = (__ZN6refptrI12staticScene2EcvPS0_Ev($44)|0);
 __ZN16staticScene2Inst8setModelEP12staticScene2($29,$45);
 $46 = (+__ZN19randomize_generator9get_floatEv(5024));
 $47 = $46;
 $48 = $47 * 0.80000000000000004;
 $49 = $48 - 0.40000000000000002;
 $50 = $49;
 $51 = ((($4)) + 720|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($4) + (($52*72)|0)|0);
 $54 = ((($53)) + 60|0);
 HEAPF32[$54>>2] = $50;
 $55 = ((($4)) + 720|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($4) + (($56*72)|0)|0);
 __ZN5Enemy9changedirEv($57);
 $58 = ((($4)) + 720|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[$58>>2] = $60;
 $61 = HEAP32[$58>>2]|0;
 $62 = (($61|0) % 10)&-1;
 HEAP32[$58>>2] = $62;
 $63 = ((($4)) + 724|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) - 300)|0;
 HEAP32[$63>>2] = $65;
 $66 = ((($4)) + 724|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67>>>0)<(977);
 if (!($68)) {
  $70 = ((($4)) + 728|0);
  HEAP32[$70>>2] = 0;
  STACKTOP = sp;return;
 }
 $69 = ((($4)) + 724|0);
 HEAP32[$69>>2] = 977;
 $70 = ((($4)) + 728|0);
 HEAP32[$70>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9float4x3a8identityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $2 = sp + 16|0;
 $3 = sp + 32|0;
 $0 = $this;
 $4 = $0;
 __ZN4vec4C2Effff($1,1.0,0.0,0.0,0.0);
 ;HEAP32[$4>>2]=HEAP32[$1>>2]|0;HEAP32[$4+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$1+12>>2]|0;
 $5 = ((($4)) + 16|0);
 __ZN4vec4C2Effff($2,0.0,1.0,0.0,0.0);
 ;HEAP32[$5>>2]=HEAP32[$2>>2]|0;HEAP32[$5+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$2+12>>2]|0;
 $6 = ((($4)) + 32|0);
 __ZN4vec4C2Effff($3,0.0,0.0,1.0,0.0);
 ;HEAP32[$6>>2]=HEAP32[$3>>2]|0;HEAP32[$6+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$3+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4vec4C2Effff($this,$ix,$iy,$iz,$iw) {
 $this = $this|0;
 $ix = +$ix;
 $iy = +$iy;
 $iz = +$iz;
 $iw = +$iw;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ix;
 $2 = $iy;
 $3 = $iz;
 $4 = $iw;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = $2;
 $8 = ((($5)) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $3;
 $10 = ((($5)) + 8|0);
 HEAPF32[$10>>2] = $9;
 $11 = $4;
 $12 = ((($5)) + 12|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN6refptrI12staticScene2EcvPS0_Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN16staticScene2InstcvbEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=($1|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5trackC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN9trackDataC2Ev($3);
 $4 = ((($3)) + 24|0);
 $5 = ((($4)) + 180|0);
 $6 = $4;
 while(1) {
  __THREW__ = 0;
  invoke_vi(104,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   break;
  }
  $9 = ((($6)) + 60|0);
  $10 = ($9|0)==($5|0);
  if ($10) {
   label = 4;
   break;
  } else {
   $6 = $9;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $1 = $11;
 $2 = $12;
 $13 = ($4|0)==($6|0);
 if ($13) {
  __ZN9trackDataD2Ev($3);
  $17 = $1;
  $18 = $2;
  ___resumeException($17|0);
  // unreachable;
 } else {
  $15 = $6;
 }
 while(1) {
  $14 = ((($15)) + -60|0);
  __ZN16staticScene2InstD2Ev($14);
  $16 = ($14|0)==($4|0);
  if ($16) {
   break;
  } else {
   $15 = $14;
  }
 }
 __ZN9trackDataD2Ev($3);
 $17 = $1;
 $18 = $2;
 ___resumeException($17|0);
 // unreachable;
}
function __ZN9trackDataC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $6 = sp + 12|0;
 $10 = $this;
 $11 = $10;
 $12 = ((($11)) + 24|0);
 $13 = $11;
 while(1) {
  $9 = $13;
  $14 = $9;
  $8 = $14;
  $15 = $8;
  $7 = $15;
  HEAP32[$15>>2] = 0;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($15)) + 8|0);
  $5 = $17;
  HEAP32[$6>>2] = 0;
  $18 = $5;
  $4 = $6;
  $19 = $4;
  $20 = HEAP32[$19>>2]|0;
  $2 = $18;
  HEAP32[$3>>2] = $20;
  $21 = $2;
  $1 = $21;
  $0 = $3;
  $22 = $0;
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$21>>2] = $23;
  $24 = ((($13)) + 12|0);
  $25 = ($24|0)==($12|0);
  if ($25) {
   break;
  } else {
   $13 = $24;
  }
 }
 STACKTOP = sp;return;
}
function __ZN9trackDataD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $4 = $2;
 while(1) {
  $3 = ((($4)) + -12|0);
  __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEED2Ev($3);
  $5 = ($3|0)==($1|0);
  if ($5) {
   break;
  } else {
   $4 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI9trackTypeNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI9trackTypeNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -20|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZN9trackTypeD2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 20)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZN8EnemyGenC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 720|0);
 $5 = $3;
 while(1) {
  __THREW__ = 0;
  invoke_vi(138,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   break;
  }
  $8 = ((($5)) + 72|0);
  $9 = ($8|0)==($4|0);
  if ($9) {
   label = 4;
   break;
  } else {
   $5 = $8;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 $12 = ($3|0)==($5|0);
 if ($12) {
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 } else {
  $14 = $5;
 }
 while(1) {
  $13 = ((($14)) + -72|0);
  __ZN5EnemyD2Ev($13);
  $15 = ($13|0)==($3|0);
  if ($15) {
   break;
  } else {
   $14 = $13;
  }
 }
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN5EnemyC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN16staticScene2InstC2Ev($1);
 $2 = ((($1)) + 68|0);
 HEAP8[$2>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN5EnemyD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN16staticScene2InstD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6refptrI12staticScene2EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6cameraC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $this;
 $4 = $0;
 __ZN8countrefC2Ev($4);
 $5 = 5160;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 16|0);
 __THREW__ = 0;
 invoke_vi(139,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = ((($4)) + 8|0);
  HEAPF32[$9>>2] = 1.5707963705062866;
  $10 = ((($4)) + 12|0);
  HEAPF32[$10>>2] = 1.5707963705062866;
  $11 = ((($4)) + 16|0);
  __THREW__ = 0;
  invoke_vi(140,($3|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   dest=$11; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $14 = ((($4)) + 16|0);
   __THREW__ = 0;
   $15 = (invoke_iii(141,($14|0),0)|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iii(142,($15|0),3)|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     HEAPF32[$18>>2] = 0.5;
     $21 = ((($4)) + 16|0);
     __THREW__ = 0;
     $22 = (invoke_iii(141,($21|0),1)|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      __THREW__ = 0;
      $25 = (invoke_iii(142,($22|0),3)|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       HEAPF32[$25>>2] = 0.5;
       $28 = ((($4)) + 16|0);
       __THREW__ = 0;
       $29 = (invoke_iii(141,($28|0),2)|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if (!($31)) {
        __THREW__ = 0;
        $32 = (invoke_iii(142,($29|0),3)|0);
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if (!($34)) {
         HEAPF32[$32>>2] = 0.5;
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 }
 $35 = ___cxa_find_matching_catch()|0;
 $36 = tempRet0;
 $1 = $35;
 $2 = $36;
 __ZN8countrefD2Ev($4);
 $37 = $1;
 $38 = $2;
 ___resumeException($37|0);
 // unreachable;
}
function __ZN4mat4C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN4mat4ixIiEER4vec4T_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3<<4)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4vec4ixIiEERfT_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3<<2)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN6cameraD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8countrefD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6cameraD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6cameraD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN6refptrI6cameraEC2EPS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$2>>2]|0;
 __ZN8countref3refEv($6);
 STACKTOP = sp;return;
}
function __ZN6device13setclearcolorEPf($this,$color) {
 $this = $this|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $color;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 12|0);
 $12 = +HEAPF32[$11>>2];
 _glClearColor((+$3),(+$6),(+$9),(+$12));
 STACKTOP = sp;return;
}
function __ZNK6refptrI6cameraEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN6camera6setposER4vec3($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = ((($2)) + 16|0);
 $6 = (__ZN4mat4ixIiEER4vec4T_($5,0)|0);
 $7 = (__ZN4vec4ixIiEERfT_($6,3)|0);
 HEAPF32[$7>>2] = $4;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($2)) + 16|0);
 $12 = (__ZN4mat4ixIiEER4vec4T_($11,1)|0);
 $13 = (__ZN4vec4ixIiEERfT_($12,3)|0);
 HEAPF32[$13>>2] = $10;
 $14 = $1;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($2)) + 16|0);
 $18 = (__ZN4mat4ixIiEER4vec4T_($17,2)|0);
 $19 = (__ZN4vec4ixIiEERfT_($18,3)|0);
 HEAPF32[$19>>2] = $16;
 STACKTOP = sp;return;
}
function __ZN6refptrI12staticScene2EaSEPKS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  __ZN8countref3refEv($5);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  __ZN8countref5unrefEv($8);
 }
 $9 = $1;
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($2|0);
}
function __ZN9peaceText5beginEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6refptrI6cameraED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $ptr1 = $4;
 HEAP32[$1>>2] = 0;
 $5 = $ptr1;
 __THREW__ = 0;
 invoke_vi(82,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8EnemyGenD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 720|0);
 $4 = $2;
 while(1) {
  $3 = ((($4)) + -72|0);
  __ZN5EnemyD2Ev($3);
  $5 = ($3|0)==($1|0);
  if ($5) {
   break;
  } else {
   $4 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZN9peaceTextD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 __ZN6refptrI6bufferED2Ev($2);
 $3 = ((($1)) + 52|0);
 __ZN6refptrI6bufferED2Ev($3);
 $4 = ((($1)) + 24|0);
 __ZN6refptrI7programED2Ev($4);
 $5 = ((($1)) + 20|0);
 __ZN6refptrI7textureED2Ev($5);
 __ZNSt3__113unordered_setI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6refptrI7programED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $ptr1 = $4;
 HEAP32[$1>>2] = 0;
 $5 = $ptr1;
 __THREW__ = 0;
 invoke_vi(82,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113unordered_setI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE12__deallocateEPNS_11__hash_nodeIS1_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE12__deallocateEPNS_11__hash_nodeIS1_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $5 = sp + 80|0;
 $17 = $this;
 $18 = $__np;
 $19 = $17;
 $16 = $19;
 $20 = $16;
 $21 = ((($20)) + 8|0);
 $15 = $21;
 $22 = $15;
 $14 = $22;
 $23 = $14;
 $__na = $23;
 while(1) {
  $24 = $18;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $26 = $18;
  $27 = HEAP32[$26>>2]|0;
  $__next = $27;
  $28 = $__na;
  $29 = $18;
  $30 = ((($29)) + 8|0);
  $13 = $30;
  $31 = $13;
  $3 = $28;
  $4 = $31;
  $32 = $3;
  $33 = $4;
  ;HEAP8[$2>>0]=HEAP8[$5>>0]|0;
  $0 = $32;
  $1 = $33;
  $34 = $__na;
  $35 = $18;
  $10 = $34;
  $11 = $35;
  $12 = 1;
  $36 = $10;
  $37 = $11;
  $38 = $12;
  $7 = $36;
  $8 = $37;
  $9 = $38;
  $39 = $8;
  $6 = $39;
  $40 = $6;
  __ZdlPv($40);
  $41 = $__next;
  $18 = $41;
 }
 STACKTOP = sp;return;
}
function __ZN5trackD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = ((($2)) + 180|0);
 $5 = $3;
 while(1) {
  $4 = ((($5)) + -60|0);
  __ZN16staticScene2InstD2Ev($4);
  $6 = ($4|0)==($2|0);
  if ($6) {
   break;
  } else {
   $5 = $4;
  }
 }
 __ZN9trackDataD2Ev($1);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_game_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init1();
 return;
}
function __ZN6Player6updateEj($this,$elapsedTime) {
 $this = $this|0;
 $elapsedTime = $elapsedTime|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $16 = 0;
 var $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0;
 var $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0;
 var $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0;
 var $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $angle = 0.0, $cosA = 0.0, $cosA1 = 0.0, $delta = 0.0, $pos = 0, $sinA = 0.0, $sinA2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pos = sp;
 $2 = sp + 24|0;
 $0 = $this;
 $1 = $elapsedTime;
 $3 = $0;
 $4 = ((($3)) + 88|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 $7 = $1;
 if ($6) {
  $90 = ((($3)) + 92|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($7))|0;
  HEAP32[$90>>2] = $92;
  $93 = ((($3)) + 12|0);
  $94 = ((($93)) + 32|0);
  $95 = ((($94)) + 12|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $96;
  $98 = $97 * 0.10000000000000001;
  $99 = $98;
  $100 = (+Math_cos((+$99)));
  $cosA1 = $100;
  $101 = ((($3)) + 12|0);
  $102 = ((($101)) + 32|0);
  $103 = ((($102)) + 12|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $104;
  $106 = $105 * 0.10000000000000001;
  $107 = $106;
  $108 = (+Math_sin((+$107)));
  $sinA2 = $108;
  $109 = $cosA1;
  $110 = ((($3)) + 12|0);
  $111 = ((($110)) + 16|0);
  $112 = ((($111)) + 4|0);
  HEAPF32[$112>>2] = $109;
  $113 = $cosA1;
  $114 = ((($3)) + 12|0);
  $115 = ((($114)) + 32|0);
  $116 = ((($115)) + 8|0);
  HEAPF32[$116>>2] = $113;
  $117 = $sinA2;
  $118 = -$117;
  $119 = ((($3)) + 12|0);
  $120 = ((($119)) + 16|0);
  $121 = ((($120)) + 8|0);
  HEAPF32[$121>>2] = $118;
  $122 = $sinA2;
  $123 = ((($3)) + 12|0);
  $124 = ((($123)) + 32|0);
  $125 = ((($124)) + 4|0);
  HEAPF32[$125>>2] = $122;
  $126 = $1;
  $127 = (+($126>>>0));
  $128 = $127 * 0.0050000000000000001;
  $129 = ((($3)) + 12|0);
  $130 = ((($129)) + 32|0);
  $131 = ((($130)) + 12|0);
  $132 = +HEAPF32[$131>>2];
  $133 = $132;
  $134 = $133 + $128;
  $135 = $134;
  HEAPF32[$131>>2] = $135;
  $136 = ((($3)) + 12|0);
  $137 = ((($136)) + 12|0);
  $138 = +HEAPF32[$137>>2];
  $139 = ((($3)) + 12|0);
  $140 = ((($139)) + 16|0);
  $141 = ((($140)) + 12|0);
  $142 = +HEAPF32[$141>>2];
  $143 = ((($3)) + 12|0);
  $144 = ((($143)) + 32|0);
  $145 = ((($144)) + 12|0);
  $146 = +HEAPF32[$145>>2];
  __ZN4vec3C2Efff($pos,$138,$142,$146);
  $147 = ((($3)) + 60|0);
  $148 = ((($3)) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ((($149)) + 20|0);
  __ZNK5aabb29translateER4vec3($2,$150,$pos);
  ;HEAP32[$147>>2]=HEAP32[$2>>2]|0;HEAP32[$147+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$147+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$147+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$147+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$147+20>>2]=HEAP32[$2+20>>2]|0;
  STACKTOP = sp;return;
 }
 $8 = (+($7>>>0));
 $9 = $8 * 0.004999999888241291;
 $delta = $9;
 $10 = HEAP32[48536>>2]|0;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = +HEAPF32[(48540)>>2];
   $13 = $12;
   $14 = $13 > 0.5;
   $15 = $delta;
   $16 = ((($3)) + 84|0);
   $17 = +HEAPF32[$16>>2];
   if ($14) {
    $18 = $17 - $15;
    HEAPF32[$16>>2] = $18;
    $19 = ((($3)) + 84|0);
    $20 = +HEAPF32[$19>>2];
    $21 = $20 < -0.40000000596046448;
    if (!($21)) {
     break;
    }
    $22 = ((($3)) + 84|0);
    HEAPF32[$22>>2] = -0.40000000596046448;
    break;
   } else {
    $23 = $17 + $15;
    HEAPF32[$16>>2] = $23;
    $24 = ((($3)) + 84|0);
    $25 = +HEAPF32[$24>>2];
    $26 = $25 > 0.40000000596046448;
    if (!($26)) {
     break;
    }
    $27 = ((($3)) + 84|0);
    HEAPF32[$27>>2] = 0.40000000596046448;
    break;
   }
  } else {
   $28 = ((($3)) + 84|0);
   $29 = +HEAPF32[$28>>2];
   $30 = $29 > 0.0;
   if ($30) {
    $31 = $delta;
    $32 = ((($3)) + 84|0);
    $33 = +HEAPF32[$32>>2];
    $34 = $33 - $31;
    HEAPF32[$32>>2] = $34;
    $35 = ((($3)) + 84|0);
    $36 = +HEAPF32[$35>>2];
    $37 = $36 < 0.0;
    if (!($37)) {
     break;
    }
    $38 = ((($3)) + 84|0);
    HEAPF32[$38>>2] = 0.0;
    break;
   }
   $39 = ((($3)) + 84|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $40 < 0.0;
   if ($41) {
    $42 = $delta;
    $43 = ((($3)) + 84|0);
    $44 = +HEAPF32[$43>>2];
    $45 = $44 + $42;
    HEAPF32[$43>>2] = $45;
    $46 = ((($3)) + 84|0);
    $47 = +HEAPF32[$46>>2];
    $48 = $47 > 0.0;
    if ($48) {
     $49 = ((($3)) + 84|0);
     HEAPF32[$49>>2] = 0.0;
    }
   }
  }
 } while(0);
 $50 = ((($3)) + 84|0);
 $51 = +HEAPF32[$50>>2];
 $52 = ((($3)) + 12|0);
 $53 = ((($52)) + 12|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $54 + $51;
 HEAPF32[$53>>2] = $55;
 $56 = ((($3)) + 12|0);
 $57 = ((($56)) + 12|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $58 < -10.0;
 if ($59) {
  $60 = ((($3)) + 84|0);
  HEAPF32[$60>>2] = 0.0;
  $61 = ((($3)) + 12|0);
  $62 = ((($61)) + 12|0);
  HEAPF32[$62>>2] = -10.0;
 }
 $63 = ((($3)) + 12|0);
 $64 = ((($63)) + 12|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $65 > 10.0;
 if ($66) {
  $67 = ((($3)) + 12|0);
  $68 = ((($67)) + 12|0);
  HEAPF32[$68>>2] = 10.0;
  $69 = ((($3)) + 84|0);
  HEAPF32[$69>>2] = 0.0;
 }
 $70 = ((($3)) + 84|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $71 * 0.31415927410125732;
 $angle = $72;
 $73 = $angle;
 $74 = (+Math_cos((+$73)));
 $cosA = $74;
 $75 = $angle;
 $76 = (+Math_sin((+$75)));
 $sinA = $76;
 $77 = $cosA;
 $78 = ((($3)) + 12|0);
 $79 = ((($78)) + 16|0);
 $80 = ((($79)) + 4|0);
 HEAPF32[$80>>2] = $77;
 $81 = $cosA;
 $82 = ((($3)) + 12|0);
 HEAPF32[$82>>2] = $81;
 $83 = $sinA;
 $84 = -$83;
 $85 = ((($3)) + 12|0);
 $86 = ((($85)) + 16|0);
 HEAPF32[$86>>2] = $84;
 $87 = $sinA;
 $88 = ((($3)) + 12|0);
 $89 = ((($88)) + 4|0);
 HEAPF32[$89>>2] = $87;
 $136 = ((($3)) + 12|0);
 $137 = ((($136)) + 12|0);
 $138 = +HEAPF32[$137>>2];
 $139 = ((($3)) + 12|0);
 $140 = ((($139)) + 16|0);
 $141 = ((($140)) + 12|0);
 $142 = +HEAPF32[$141>>2];
 $143 = ((($3)) + 12|0);
 $144 = ((($143)) + 32|0);
 $145 = ((($144)) + 12|0);
 $146 = +HEAPF32[$145>>2];
 __ZN4vec3C2Efff($pos,$138,$142,$146);
 $147 = ((($3)) + 60|0);
 $148 = ((($3)) + 8|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ((($149)) + 20|0);
 __ZNK5aabb29translateER4vec3($2,$150,$pos);
 ;HEAP32[$147>>2]=HEAP32[$2>>2]|0;HEAP32[$147+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$147+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$147+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$147+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$147+20>>2]=HEAP32[$2+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6Player5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 88|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($4)) + 12|0);
 __ZN9float4x3a8identityEv($6);
 $7 = ((($4)) + 12|0);
 $8 = ((($7)) + 16|0);
 $9 = ((($8)) + 12|0);
 HEAPF32[$9>>2] = 15.0;
 $10 = (__ZN19randomize_generator9get_shortEv(5024)|0);
 $11 = $10 << 16 >> 16;
 $2 = 5032;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$12>>2]|0;
 $16 = $14;
 $17 = $15;
 $18 = (($16) - ($17))|0;
 $19 = (($18|0) / 4)&-1;
 $20 = (($11>>>0) % ($19>>>0))&-1;
 $0 = 5032;
 $1 = $20;
 $21 = $0;
 $22 = $1;
 $23 = HEAP32[$21>>2]|0;
 $24 = (($23) + ($22<<2)|0);
 $25 = (__ZN6refptrI12staticScene2EcvPS0_Ev($24)|0);
 __ZN16staticScene2Inst8setModelEP12staticScene2($4,$25);
 STACKTOP = sp;return;
}
function __ZN5track15createNextTrackEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $14;
 $start = 0;
 $16 = ((($15)) + 212|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($15)) + 208|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $21 = ((($15)) + 220|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($15) + (($22*12)|0)|0);
  $24 = (__ZN19randomize_generator9get_shortEv(5024)|0);
  $25 = $24 << 16 >> 16;
  $26 = ((($15)) + 220|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($15) + (($27*12)|0)|0);
  $13 = $28;
  $29 = $13;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$29>>2]|0;
  $33 = $31;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  $36 = (($35|0) / 20)&-1;
  $37 = (($25>>>0) % ($36>>>0))&-1;
  $11 = $23;
  $12 = $37;
  $38 = $11;
  $39 = $12;
  $40 = HEAP32[$38>>2]|0;
  $41 = (($40) + (($39*20)|0)|0);
  $42 = ((($15)) + 204|0);
  HEAP32[$42>>2] = $41;
  $43 = ((($15)) + 204|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $47 = (+($46|0));
  $48 = ((($15)) + 204|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 1|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ((($15)) + 204|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP8[$54>>0]|0;
  $56 = $55 << 24 >> 24;
  $57 = (($52) - ($56))|0;
  $58 = (+($57|0));
  $59 = (+__ZN19randomize_generator9get_floatEv(5024));
  $60 = $58 * $59;
  $61 = $47 + $60;
  $62 = (~~(($61)));
  $63 = ((($15)) + 208|0);
  HEAP32[$63>>2] = $62;
  $64 = ((($15)) + 212|0);
  HEAP32[$64>>2] = 0;
  $65 = ((($15)) + 220|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[$65>>2] = $67;
  $68 = ((($15)) + 220|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69|0) % 2)&-1;
  HEAP32[$68>>2] = $70;
 }
 $71 = ((($15)) + 212|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(0);
 if ($73) {
  $74 = ((($15)) + 204|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($75)) + 2|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&1;
  if ($78) {
   $79 = ((($15)) + 216|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($15)) + 24|0);
   $82 = (($81) + (($80*60)|0)|0);
   $83 = ((($15)) + 204|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($84)) + 8|0);
   $9 = $85;
   $10 = 0;
   $86 = $9;
   $87 = $10;
   $88 = HEAP32[$86>>2]|0;
   $89 = (($88) + ($87<<2)|0);
   $90 = (__ZN6refptrI12staticScene2EcvPS0_Ev($89)|0);
   __ZN16staticScene2Inst8setModelEP12staticScene2($82,$90);
   $176 = ((($15)) + 212|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + 1)|0;
   HEAP32[$176>>2] = $178;
   $179 = ((($15)) + 216|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($180) + 1)|0;
   HEAP32[$179>>2] = $181;
   $182 = HEAP32[$179>>2]|0;
   $183 = (($182|0) % 3)&-1;
   HEAP32[$179>>2] = $183;
   STACKTOP = sp;return;
  }
 }
 $91 = ((($15)) + 212|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($15)) + 208|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) - 1)|0;
 $96 = ($92|0)==($95|0);
 if ($96) {
  $97 = ((($15)) + 204|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($98)) + 3|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&1;
  if ($101) {
   $102 = ((($15)) + 216|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ((($15)) + 24|0);
   $105 = (($104) + (($103*60)|0)|0);
   $106 = ((($15)) + 204|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ((($107)) + 8|0);
   $109 = ((($15)) + 204|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ((($110)) + 8|0);
   $5 = $111;
   $112 = $5;
   $113 = ((($112)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = HEAP32[$112>>2]|0;
   $116 = $114;
   $117 = $115;
   $118 = (($116) - ($117))|0;
   $119 = (($118|0) / 4)&-1;
   $120 = (($119) - 1)|0;
   $3 = $108;
   $4 = $120;
   $121 = $3;
   $122 = $4;
   $123 = HEAP32[$121>>2]|0;
   $124 = (($123) + ($122<<2)|0);
   $125 = (__ZN6refptrI12staticScene2EcvPS0_Ev($124)|0);
   __ZN16staticScene2Inst8setModelEP12staticScene2($105,$125);
   $176 = ((($15)) + 212|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + 1)|0;
   HEAP32[$176>>2] = $178;
   $179 = ((($15)) + 216|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($180) + 1)|0;
   HEAP32[$179>>2] = $181;
   $182 = HEAP32[$179>>2]|0;
   $183 = (($182|0) % 3)&-1;
   HEAP32[$179>>2] = $183;
   STACKTOP = sp;return;
  }
 }
 $126 = ((($15)) + 204|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ((($127)) + 4|0);
 $129 = HEAP8[$128>>0]|0;
 $130 = $129&1;
 $131 = ((($15)) + 216|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((($15)) + 24|0);
 $134 = (($133) + (($132*60)|0)|0);
 $135 = ((($15)) + 204|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($136)) + 8|0);
 if ($130) {
  $138 = ((($15)) + 212|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($15)) + 204|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ((($141)) + 8|0);
  $2 = $142;
  $143 = $2;
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = HEAP32[$143>>2]|0;
  $147 = $145;
  $148 = $146;
  $149 = (($147) - ($148))|0;
  $150 = (($149|0) / 4)&-1;
  $151 = (($139>>>0) % ($150>>>0))&-1;
  $0 = $137;
  $1 = $151;
  $152 = $0;
  $153 = $1;
  $154 = HEAP32[$152>>2]|0;
  $155 = (($154) + ($153<<2)|0);
  $156 = (__ZN6refptrI12staticScene2EcvPS0_Ev($155)|0);
  __ZN16staticScene2Inst8setModelEP12staticScene2($134,$156);
  $176 = ((($15)) + 212|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + 1)|0;
  HEAP32[$176>>2] = $178;
  $179 = ((($15)) + 216|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + 1)|0;
  HEAP32[$179>>2] = $181;
  $182 = HEAP32[$179>>2]|0;
  $183 = (($182|0) % 3)&-1;
  HEAP32[$179>>2] = $183;
  STACKTOP = sp;return;
 } else {
  $157 = (__ZN19randomize_generator9get_shortEv(5024)|0);
  $158 = $157 << 16 >> 16;
  $159 = ((($15)) + 204|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ((($160)) + 8|0);
  $6 = $161;
  $162 = $6;
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = HEAP32[$162>>2]|0;
  $166 = $164;
  $167 = $165;
  $168 = (($166) - ($167))|0;
  $169 = (($168|0) / 4)&-1;
  $170 = (($158>>>0) % ($169>>>0))&-1;
  $7 = $137;
  $8 = $170;
  $171 = $7;
  $172 = $8;
  $173 = HEAP32[$171>>2]|0;
  $174 = (($173) + ($172<<2)|0);
  $175 = (__ZN6refptrI12staticScene2EcvPS0_Ev($174)|0);
  __ZN16staticScene2Inst8setModelEP12staticScene2($134,$175);
  $176 = ((($15)) + 212|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + 1)|0;
  HEAP32[$176>>2] = $178;
  $179 = ((($15)) + 216|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + 1)|0;
  HEAP32[$179>>2] = $181;
  $182 = HEAP32[$179>>2]|0;
  $183 = (($182|0) % 3)&-1;
  HEAP32[$179>>2] = $183;
  STACKTOP = sp;return;
 }
}
function __ZN5track6renderEf($this,$elapsedDistance) {
 $this = $this|0;
 $elapsedDistance = +$elapsedDistance;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $alpha = 0, $i = 0, $t = 0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $elapsedDistance;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 224|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 + $3;
 HEAPF32[$4>>2] = $6;
 $7 = ((($2)) + 224|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 > 300.0;
 if ($9) {
  __ZN5track15createNextTrackEv($2);
 }
 $10 = ((($2)) + 224|0);
 $11 = +HEAPF32[$10>>2];
 $12 = ((($2)) + 224|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $13 / 300.0;
 $15 = (+Math_floor((+$14)));
 $16 = $15 * 300.0;
 $17 = $11 - $16;
 $18 = ((($2)) + 224|0);
 HEAPF32[$18>>2] = $17;
 $alpha = 0;
 while(1) {
  $19 = $alpha;
  $20 = ($19|0)<(2);
  if (!($20)) {
   break;
  }
  $21 = $alpha;
  __ZN12staticScene25beginEi($21);
  $22 = ((($2)) + 224|0);
  $23 = +HEAPF32[$22>>2];
  $24 = -$23;
  $y = $24;
  $25 = ((($2)) + 216|0);
  $26 = HEAP32[$25>>2]|0;
  $t = $26;
  $i = 0;
  while(1) {
   $27 = $i;
   $28 = ($27|0)<(3);
   if (!($28)) {
    break;
   }
   $29 = $y;
   $30 = $t;
   $31 = ((($2)) + 24|0);
   $32 = (($31) + (($30*60)|0)|0);
   $33 = ((($32)) + 12|0);
   $34 = ((($33)) + 16|0);
   $35 = ((($34)) + 12|0);
   HEAPF32[$35>>2] = $29;
   $36 = $t;
   $37 = (($36) + 1)|0;
   $t = $37;
   $38 = $t;
   $39 = (($38|0) % 3)&-1;
   $t = $39;
   $40 = $y;
   $41 = $40 + 300.0;
   $y = $41;
   $42 = $i;
   $43 = (($42) + 1)|0;
   $i = $43;
  }
  $44 = $alpha;
  $45 = (($44) + 1)|0;
  $alpha = $45;
 }
 STACKTOP = sp;return;
}
function __ZN5track5resetEb($this,$death) {
 $this = $this|0;
 $death = $death|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $7 = $death&1;
 $6 = $7;
 $8 = $5;
 $9 = $6;
 $10 = $9&1;
 if ($10) {
  $11 = (__ZN19randomize_generator9get_shortEv(5024)|0);
  $12 = $11 << 16 >> 16;
  $4 = $8;
  $13 = $4;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$13>>2]|0;
  $17 = $15;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  $20 = (($19|0) / 20)&-1;
  $21 = (($12>>>0) % ($20>>>0))&-1;
  $2 = $8;
  $3 = $21;
  $22 = $2;
  $23 = $3;
  $24 = HEAP32[$22>>2]|0;
  $25 = (($24) + (($23*20)|0)|0);
  $26 = ((($8)) + 204|0);
  HEAP32[$26>>2] = $25;
 } else {
  $0 = $8;
  $1 = 0;
  $27 = $0;
  $28 = $1;
  $29 = HEAP32[$27>>2]|0;
  $30 = (($29) + (($28*20)|0)|0);
  $31 = ((($8)) + 204|0);
  HEAP32[$31>>2] = $30;
 }
 $32 = ((($8)) + 208|0);
 HEAP32[$32>>2] = 5;
 $33 = ((($8)) + 212|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($8)) + 216|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($8)) + 224|0);
 HEAPF32[$35>>2] = 0.0;
 $36 = ((($8)) + 220|0);
 HEAP32[$36>>2] = 1;
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = ($37|0)<(3);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = ((($8)) + 24|0);
  $41 = (($40) + (($39*60)|0)|0);
  $42 = ((($41)) + 12|0);
  __ZN9float4x3a8identityEv($42);
  __ZN5track15createNextTrackEv($8);
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 STACKTOP = sp;return;
}
function __ZN6camera10accumAngleEff($this,$y,$x) {
 $this = $this|0;
 $y = +$y;
 $x = +$x;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $i = 0, $j = 0, $mat = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mat = sp + 8|0;
 $3 = sp + 72|0;
 $4 = sp + 136|0;
 $0 = $this;
 $1 = $y;
 $2 = $x;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $2;
 $9 = $7 + $8;
 $10 = ((($5)) + 8|0);
 HEAPF32[$10>>2] = $9;
 $11 = ((($5)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 > 3.1415927410125732;
 if ($13) {
  $14 = ((($5)) + 8|0);
  HEAPF32[$14>>2] = 3.1415927410125732;
 }
 $15 = ((($5)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $16 < 0.0;
 if ($17) {
  $18 = ((($5)) + 8|0);
  HEAPF32[$18>>2] = 0.0;
 }
 $19 = ((($5)) + 12|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = $20 + $21;
 $23 = (+_fmodf($22,6.2831854820251465));
 $24 = ((($5)) + 12|0);
 HEAPF32[$24>>2] = $23;
 $25 = ((($5)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = -$26;
 __Z8rotateZ4f($3,$27);
 $28 = ((($5)) + 8|0);
 $29 = +HEAPF32[$28>>2];
 __Z8rotateX4f($4,$29);
 __ZmlRK4mat4S1_($mat,$3,$4);
 $i = 0;
 while(1) {
  $30 = $i;
  $31 = ($30|0)<(3);
  if (!($31)) {
   break;
  }
  $j = 0;
  while(1) {
   $32 = $j;
   $33 = ($32|0)<(3);
   $34 = $i;
   if (!($33)) {
    break;
   }
   $35 = (__ZN4mat4ixIiEER4vec4T_($mat,$34)|0);
   $36 = $j;
   $37 = (__ZN4vec4ixIiEERfT_($35,$36)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = ((($5)) + 16|0);
   $40 = $i;
   $41 = (__ZN4mat4ixIiEER4vec4T_($39,$40)|0);
   $42 = $j;
   $43 = (__ZN4vec4ixIiEERfT_($41,$42)|0);
   HEAPF32[$43>>2] = $38;
   $44 = $j;
   $45 = (($44) + 1)|0;
   $j = $45;
  }
  $46 = (($34) + 1)|0;
  $i = $46;
 }
 STACKTOP = sp;return;
}
function __ZN6device15setrenderstatesE12renderstates($this,$instates) {
 $this = $this|0;
 $instates = $instates|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$instates>>2]|0;
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$instates>>2]|0;
 $6 = $5 >>> 12;
 $7 = $6 & 3;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $9 = HEAP32[$instates>>2]|0;
   $10 = $9 & 15;
   $11 = ($10|0)==(0);
   $12 = ((($1)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($11) {
    if (!($14)) {
     break;
    }
    $15 = ((($1)) + 12|0);
    HEAP32[$15>>2] = 0;
    _glDisable(3042);
    break;
   } else {
    if ($14) {
     break;
    }
    $16 = ((($1)) + 12|0);
    HEAP32[$16>>2] = 1;
    _glEnable(3042);
    break;
   }
  } else {
   $17 = ((($1)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$instates>>2]|0;
   $20 = $19 >>> 12;
   $21 = $20 & 3;
   $22 = ($18|0)!=($21|0);
   if ($22) {
    $23 = HEAP32[$instates>>2]|0;
    $24 = $23 >>> 12;
    $25 = $24 & 3;
    $26 = ((($1)) + 20|0);
    HEAP32[$26>>2] = $25;
    $27 = ((($1)) + 20|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (5272 + ($28<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    _glBlendEquation(($30|0));
   }
   $31 = ((($1)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$instates>>2]|0;
   $34 = $33 & 255;
   $35 = ($32|0)!=($34|0);
   if ($35) {
    $36 = HEAP32[$instates>>2]|0;
    $37 = $36 & 255;
    $38 = ((($1)) + 16|0);
    HEAP32[$38>>2] = $37;
    $39 = HEAP32[$instates>>2]|0;
    $40 = $39 & 15;
    $41 = (5288 + ($40<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$instates>>2]|0;
    $44 = $43 >>> 4;
    $45 = $44 & 15;
    $46 = (5288 + ($45<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    _glBlendFunc(($42|0),($47|0));
   }
   $48 = ((($1)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0);
   if (!($50)) {
    $51 = ((($1)) + 12|0);
    HEAP32[$51>>2] = 1;
    _glEnable(3042);
   }
  }
 } while(0);
 $52 = HEAP32[$1>>2]|0;
 $53 = $52 >>> 8;
 $54 = $53 & 15;
 $55 = HEAP32[$instates>>2]|0;
 $56 = $55 >>> 8;
 $57 = $56 & 15;
 $58 = ($54|0)!=($57|0);
 if ($58) {
  (_printf((5344|0),($vararg_buffer|0))|0);
  $59 = HEAP32[$instates>>2]|0;
  $60 = $59 >>> 8;
  $61 = $60 & 1;
  $62 = $61&255;
  $63 = HEAP32[$instates>>2]|0;
  $64 = $63 >>> 9;
  $65 = $64 & 1;
  $66 = $65&255;
  $67 = HEAP32[$instates>>2]|0;
  $68 = $67 >>> 10;
  $69 = $68 & 1;
  $70 = $69&255;
  $71 = HEAP32[$instates>>2]|0;
  $72 = $71 >>> 11;
  $73 = $72 & 1;
  $74 = $73&255;
  _glColorMask(($62|0),($66|0),($70|0),($74|0));
 }
 $75 = HEAP32[$1>>2]|0;
 $76 = $75 >>> 15;
 $77 = $76 & 7;
 $78 = HEAP32[$instates>>2]|0;
 $79 = $78 >>> 15;
 $80 = $79 & 7;
 $81 = ($77|0)!=($80|0);
 do {
  if ($81) {
   $82 = HEAP32[$instates>>2]|0;
   $83 = $82 >>> 15;
   $84 = $83 & 7;
   $85 = ($84|0)==(7);
   if ($85) {
    _glDisable(2929);
    break;
   }
   _glEnable(2929);
   $86 = HEAP32[$instates>>2]|0;
   $87 = $86 >>> 15;
   $88 = $87 & 7;
   $89 = ((($1)) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($88|0)!=($90|0);
   if ($91) {
    $92 = HEAP32[$instates>>2]|0;
    $93 = $92 >>> 15;
    $94 = $93 & 7;
    $95 = ((($1)) + 4|0);
    HEAP32[$95>>2] = $94;
    $96 = HEAP32[$instates>>2]|0;
    $97 = $96 >>> 15;
    $98 = $97 & 7;
    $99 = (5432 + ($98<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    _glDepthFunc(($100|0));
   }
  }
 } while(0);
 $101 = HEAP32[$1>>2]|0;
 $102 = $101 >>> 14;
 $103 = $102 & 1;
 $104 = HEAP32[$instates>>2]|0;
 $105 = $104 >>> 14;
 $106 = $105 & 1;
 $107 = ($103|0)!=($106|0);
 if ($107) {
  $108 = HEAP32[$instates>>2]|0;
  $109 = $108 >>> 14;
  $110 = $109 & 1;
  $111 = $110&255;
  _glDepthMask(($111|0));
 }
 $112 = HEAP32[$1>>2]|0;
 $113 = $112 >>> 18;
 $114 = $113 & 3;
 $115 = HEAP32[$instates>>2]|0;
 $116 = $115 >>> 18;
 $117 = $116 & 3;
 $118 = ($114|0)!=($117|0);
 do {
  if ($118) {
   $119 = HEAP32[$instates>>2]|0;
   $120 = $119 >>> 18;
   $121 = $120 & 3;
   $122 = ($121|0)==(0);
   if ($122) {
    _glDisable(2884);
    break;
   }
   _glEnable(2884);
   $123 = HEAP32[$instates>>2]|0;
   $124 = $123 >>> 18;
   $125 = $124 & 3;
   $126 = ((($1)) + 24|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)!=($127|0);
   if ($128) {
    $129 = HEAP32[$instates>>2]|0;
    $130 = $129 >>> 18;
    $131 = $130 & 3;
    $132 = ((($1)) + 24|0);
    HEAP32[$132>>2] = $131;
    $133 = HEAP32[$instates>>2]|0;
    $134 = $133 >>> 18;
    $135 = $134 & 3;
    $136 = (5464 + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    _glCullFace(($137|0));
   }
  }
 } while(0);
 ;HEAP32[$1>>2]=HEAP32[$instates>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6device4initEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $color = 0, $currentstates = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $currentstates = sp + 4|0;
 $color = sp + 8|0;
 $r = sp + 24|0;
 $1 = sp + 28|0;
 $0 = $this;
 $2 = $0;
 __ZN12renderstatesC2Ev($currentstates);
 ;HEAP32[$2>>2]=HEAP32[$currentstates>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -2049;
 $5 = $4 | 2048;
 HEAP32[$2>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = $6 & -229377;
 $8 = $7 | 229376;
 HEAP32[$2>>2] = $8;
 $9 = ((($2)) + 4|0);
 HEAP32[$9>>2] = 1;
 $10 = ((($2)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($2)) + 16|0);
 HEAP32[$11>>2] = -1;
 $12 = ((($2)) + 20|0);
 HEAP32[$12>>2] = 1;
 $13 = HEAP32[$2>>2]|0;
 $14 = $13 & -786433;
 HEAP32[$2>>2] = $14;
 $15 = ((($2)) + 24|0);
 HEAP32[$15>>2] = 1;
 ;HEAP32[$color>>2]=HEAP32[5480>>2]|0;HEAP32[$color+4>>2]=HEAP32[5480+4>>2]|0;HEAP32[$color+8>>2]=HEAP32[5480+8>>2]|0;HEAP32[$color+12>>2]=HEAP32[5480+12>>2]|0;
 $16 = HEAP32[5264>>2]|0;
 __ZN6device13setclearcolorEPf($16,$color);
 $17 = HEAP32[5264>>2]|0;
 __ZN6device5clearEj($17,16640);
 __ZN12renderstatesC2Ev($r);
 $18 = HEAP32[$r>>2]|0;
 $19 = $18 & -229377;
 $20 = $19 | 32768;
 HEAP32[$r>>2] = $20;
 $21 = HEAP32[$r>>2]|0;
 $22 = $21 & -786433;
 $23 = $22 | 524288;
 HEAP32[$r>>2] = $23;
 ;HEAP32[$1>>2]=HEAP32[$r>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 __ZN6device15setrenderstatesE12renderstates($2,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN6device5clearEj($this,$mode) {
 $this = $this|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mode;
 $2 = $1;
 _glClear(($2|0));
 STACKTOP = sp;return;
}
function __ZN6device7setViewER4mat4($this,$iviewinverse) {
 $this = $this|0;
 $iviewinverse = $iviewinverse|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 72|0;
 $4 = sp + 136|0;
 $0 = $this;
 $1 = $iviewinverse;
 $5 = $0;
 $6 = ((($5)) + 220|0);
 $7 = $1;
 dest=$6; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $8 = ((($5)) + 156|0);
 $9 = ((($5)) + 220|0);
 __ZntRK4mat4($2,$9);
 dest=$8; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $10 = ((($5)) + 348|0);
 $11 = ((($5)) + 284|0);
 $12 = ((($5)) + 156|0);
 __ZmlRK4mat4S1_($3,$11,$12);
 dest=$10; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $13 = ((($5)) + 428|0);
 $14 = ((($5)) + 220|0);
 $15 = (__ZN4mat4ixIiEER4vec4T_($14,0)|0);
 $16 = (__ZN4vec4ixIiEERfT_($15,3)|0);
 $17 = +HEAPF32[$16>>2];
 $18 = ((($5)) + 220|0);
 $19 = (__ZN4mat4ixIiEER4vec4T_($18,1)|0);
 $20 = (__ZN4vec4ixIiEERfT_($19,3)|0);
 $21 = +HEAPF32[$20>>2];
 $22 = ((($5)) + 220|0);
 $23 = (__ZN4mat4ixIiEER4vec4T_($22,2)|0);
 $24 = (__ZN4vec4ixIiEERfT_($23,3)|0);
 $25 = +HEAPF32[$24>>2];
 __ZN4vec3C2Efff($4,$17,$21,$25);
 ;HEAP32[$13>>2]=HEAP32[$4>>2]|0;HEAP32[$13+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6device13setProjectionER4mat4($this,$iprojection) {
 $this = $this|0;
 $iprojection = $iprojection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $projection_4x3 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $projection_4x3 = sp + 72|0;
 $3 = sp + 136|0;
 $4 = sp + 152|0;
 $5 = sp + 168|0;
 $0 = $this;
 $1 = $iprojection;
 $6 = $0;
 $7 = ((($6)) + 284|0);
 $8 = $1;
 dest=$7; src=$8; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $9 = ((($6)) + 348|0);
 $10 = ((($6)) + 284|0);
 $11 = ((($6)) + 156|0);
 __ZmlRK4mat4S1_($2,$10,$11);
 dest=$9; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $12 = ((($6)) + 284|0);
 dest=$projection_4x3; src=$12; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $13 = (__ZN4mat4ixIiEER4vec4T_($projection_4x3,3)|0);
 __ZN4vec4C2Effff($3,0.0,0.0,0.0,1.0);
 ;HEAP32[$13>>2]=HEAP32[$3>>2]|0;HEAP32[$13+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$3+12>>2]|0;
 $14 = ((($6)) + 412|0);
 $15 = ((($6)) + 284|0);
 $16 = (__ZN4mat4ixIiEER4vec4T_($15,3)|0);
 __ZntRK4mat4($5,$projection_4x3);
 __ZmlRK4vec4RK4mat4($4,$16,$5);
 ;HEAP32[$14>>2]=HEAP32[$4>>2]|0;HEAP32[$14+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function __Z7reshapeii($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $mat = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mat = sp + 8|0;
 $0 = $width;
 $1 = $height;
 $2 = $0;
 $3 = $1;
 _glViewport(0,0,($2|0),($3|0));
 $4 = $0;
 $5 = $1;
 __Z18perspectiveMatrixXfiiffb($mat,1.5707963705062866,$4,$5,4.0,900.0,0);
 $6 = HEAP32[5264>>2]|0;
 __ZN6device13setProjectionER4mat4($6,$mat);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_device_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init54();
 return;
}
function __ZN12renderstatesC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -16;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4 & -241;
 HEAP32[$1>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = $6 & -12289;
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = $8 & -229377;
 $10 = $9 | 32768;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$1>>2]|0;
 $12 = $11 & -257;
 $13 = $12 | 256;
 HEAP32[$1>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = $14 & -513;
 $16 = $15 | 512;
 HEAP32[$1>>2] = $16;
 $17 = HEAP32[$1>>2]|0;
 $18 = $17 & -1025;
 $19 = $18 | 1024;
 HEAP32[$1>>2] = $19;
 $20 = HEAP32[$1>>2]|0;
 $21 = $20 & -2049;
 HEAP32[$1>>2] = $21;
 $22 = HEAP32[$1>>2]|0;
 $23 = $22 & -16385;
 $24 = $23 | 16384;
 HEAP32[$1>>2] = $24;
 $25 = HEAP32[$1>>2]|0;
 $26 = $25 & -786433;
 $27 = $26 | 262144;
 HEAP32[$1>>2] = $27;
 $28 = HEAP32[$1>>2]|0;
 $29 = $28 & 1048575;
 HEAP32[$1>>2] = $29;
 STACKTOP = sp;return;
}
function ___cxx_global_var_init54() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6deviceC2Ev(5496);
 return;
}
function __ZN6deviceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN12renderstatesC2Ev($1);
 $2 = ((($1)) + 28|0);
 $3 = ((($2)) + 64|0);
 $4 = $2;
 while(1) {
  __ZN4vec4C2Ev($4);
  $5 = ((($4)) + 16|0);
  $6 = ($5|0)==($3|0);
  if ($6) {
   break;
  } else {
   $4 = $5;
  }
 }
 $7 = ((($1)) + 92|0);
 $8 = ((($7)) + 64|0);
 $9 = $7;
 while(1) {
  __ZN4vec4C2Ev($9);
  $10 = ((($9)) + 16|0);
  $11 = ($10|0)==($8|0);
  if ($11) {
   break;
  } else {
   $9 = $10;
  }
 }
 $12 = ((($1)) + 156|0);
 __ZN4mat4C2Ev($12);
 $13 = ((($1)) + 220|0);
 __ZN4mat4C2Ev($13);
 $14 = ((($1)) + 284|0);
 __ZN4mat4C2Ev($14);
 $15 = ((($1)) + 348|0);
 __ZN4mat4C2Ev($15);
 $16 = ((($1)) + 412|0);
 __ZN4vec4C2Ev($16);
 $17 = ((($1)) + 428|0);
 __ZN4vec3C2Ev($17);
 STACKTOP = sp;return;
}
function __ZmlRK9float4x3aRK4vec3($agg$result,$b,$dest) {
 $agg$result = $agg$result|0;
 $b = $b|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 24|0;
 $4 = sp + 40|0;
 $0 = $b;
 $1 = $dest;
 __ZN4vec3C2Ev($agg$result);
 $5 = $0;
 $6 = $1;
 __ZN4vec4C2ERK4vec3f($2,$6,1.0);
 $7 = (+__Z3dotRK4vec4S1_($5,$2));
 HEAPF32[$agg$result>>2] = $7;
 $8 = $0;
 $9 = ((($8)) + 16|0);
 $10 = $1;
 __ZN4vec4C2ERK4vec3f($3,$10,1.0);
 $11 = (+__Z3dotRK4vec4S1_($9,$3));
 $12 = ((($agg$result)) + 4|0);
 HEAPF32[$12>>2] = $11;
 $13 = $0;
 $14 = ((($13)) + 32|0);
 $15 = $1;
 __ZN4vec4C2ERK4vec3f($4,$15,1.0);
 $16 = (+__Z3dotRK4vec4S1_($14,$4));
 $17 = ((($agg$result)) + 8|0);
 HEAPF32[$17>>2] = $16;
 STACKTOP = sp;return;
}
function __ZN4vec4C2ERK4vec3f($this,$xyz,$iw) {
 $this = $this|0;
 $xyz = $xyz|0;
 $iw = +$iw;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $xyz;
 $2 = $iw;
 $3 = $0;
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 HEAPF32[$3>>2] = $5;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($3)) + 4|0);
 HEAPF32[$9>>2] = $8;
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($3)) + 8|0);
 HEAPF32[$13>>2] = $12;
 $14 = $2;
 $15 = ((($3)) + 12|0);
 HEAPF32[$15>>2] = $14;
 STACKTOP = sp;return;
}
function __Z9initScenev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $p = 0, $p1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 28|0;
 $p = sp + 24|0;
 $p1 = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = sp + 12|0;
 $5 = (__ZN6refptrI7programEcvPS0_Ev(5952)|0);
 $6 = ($5|0)!=(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(2);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = (5952 + ($9<<2)|0);
  $11 = (__ZN12baseresourceI7programLi512EE10getmanagerEv()|0);
  $12 = $i;
  $13 = ($12|0)!=(0);
  $14 = $13 ? 6000 : 6032;
  $15 = (__ZN12baseresourceI7programLi512EE8tmanager3getEPKc($11,$14)|0);
  (__ZN6refptrI7programEaSEPKS0_($10,$15)|0);
  $16 = $i;
  $17 = (5952 + ($16<<2)|0);
  $18 = (__ZNK6refptrI7programEptEv($17)|0);
  $19 = (__ZN7program10getUniformEPKc($18,6056)|0);
  HEAP32[$p>>2] = $19;
  $20 = (__ZN7uniformcvbEv($p)|0);
  if ($20) {
   $21 = (__ZN7uniformptEv($p)|0);
   HEAP32[$t>>2] = 0;
   __ZN7uniform8setValueEPvji($21,$t,35678,1);
  }
  $22 = $i;
  $23 = (5952 + ($22<<2)|0);
  $24 = (__ZNK6refptrI7programEptEv($23)|0);
  $25 = (__ZN7program10getUniformEPKc($24,6072)|0);
  HEAP32[$p1>>2] = $25;
  $26 = (__ZN7uniformcvbEv($p1)|0);
  if ($26) {
   $27 = (__ZN7uniformptEv($p1)|0);
   HEAP32[$t>>2] = 1;
   __ZN7uniform8setValueEPvji($27,$t,35678,1);
  }
  $28 = $i;
  $29 = (5960 + ($28<<2)|0);
  $30 = $i;
  $31 = (5952 + ($30<<2)|0);
  $32 = (__ZNK6refptrI7programEptEv($31)|0);
  $33 = (__ZN7program10getUniformEPKc($32,6088)|0);
  HEAP32[$0>>2] = $33;
  ;HEAP32[$29>>2]=HEAP32[$0>>2]|0;
  $34 = $i;
  $35 = (5968 + ($34<<2)|0);
  $36 = $i;
  $37 = (5952 + ($36<<2)|0);
  $38 = (__ZNK6refptrI7programEptEv($37)|0);
  $39 = (__ZN7program10getUniformEPKc($38,6096)|0);
  HEAP32[$1>>2] = $39;
  ;HEAP32[$35>>2]=HEAP32[$1>>2]|0;
  $40 = $i;
  $41 = (5976 + ($40<<2)|0);
  $42 = $i;
  $43 = (5952 + ($42<<2)|0);
  $44 = (__ZNK6refptrI7programEptEv($43)|0);
  $45 = (__ZN7program12getAttributeEPKc($44,48024)|0);
  HEAP32[$2>>2] = $45;
  ;HEAP32[$41>>2]=HEAP32[$2>>2]|0;
  $46 = $i;
  $47 = (5984 + ($46<<2)|0);
  $48 = $i;
  $49 = (5952 + ($48<<2)|0);
  $50 = (__ZNK6refptrI7programEptEv($49)|0);
  $51 = (__ZN7program12getAttributeEPKc($50,6104)|0);
  HEAP32[$3>>2] = $51;
  ;HEAP32[$47>>2]=HEAP32[$3>>2]|0;
  $52 = $i;
  $53 = (5992 + ($52<<2)|0);
  $54 = $i;
  $55 = (5952 + ($54<<2)|0);
  $56 = (__ZNK6refptrI7programEptEv($55)|0);
  $57 = (__ZN7program12getAttributeEPKc($56,6120)|0);
  HEAP32[$4>>2] = $57;
  ;HEAP32[$53>>2]=HEAP32[$4>>2]|0;
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 STACKTOP = sp;return;
}
function __ZN12staticScene214loadByFullNameEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 268|0;
 $buffer1 = sp + 8|0;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = (__ZNK5named7getnameEv($3)|0);
 (_strcpy(($buffer|0),($4|0))|0);
 (__Z6strextPcPKc($buffer,6136)|0);
 $5 = ((($2)) + 44|0);
 $6 = (__ZN12baseresourceI7textureLi512EE10getmanagerEv()|0);
 $7 = (__ZN12baseresourceI7textureLi512EE8tmanager3getEPKc($6,$buffer)|0);
 (__ZN6refptrI7textureEaSEPKS0_($5,$7)|0);
 __Z9initScenev();
 _memset(($buffer1|0),0,260)|0;
 HEAP8[$buffer1>>0] = 46;
 $8 = ((($buffer1)) + 1|0);
 HEAP8[$8>>0] = 47;
 $9 = $1;
 (_strcat(($buffer1|0),($9|0))|0);
 (__Z8strposixPc($buffer1)|0);
 _emscripten_async_wget_data(($buffer1|0),($2|0),(143|0),(144|0));
 $10 = ((($2)) + 16|0);
 (__ZNK5named7getnameEv($10)|0);
 STACKTOP = sp;return;
}
function __ZN12staticScene28onLoadedER6stream($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$arith = 0, $$arith18 = 0, $$overflow = 0, $$overflow19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0.0, $769 = 0.0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0.0, $775 = 0.0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0.0, $782 = 0.0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0.0, $797 = 0.0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0.0, $801 = 0.0, $802 = 0, $803 = 0, $804 = 0, $805 = 0.0, $806 = 0.0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0, $816 = 0, $817 = 0, $818 = 0.0, $819 = 0.0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0.0, $824 = 0.0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0.0, $833 = 0.0, $834 = 0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0.0, $84 = 0, $840 = 0.0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0.0, $848 = 0.0, $849 = 0, $85 = 0, $850 = 0, $851 = 0.0, $852 = 0.0, $853 = 0, $854 = 0, $855 = 0.0, $856 = 0.0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0.0, $977 = 0.0, $978 = 0, $979 = 0, $98 = 0, $980 = 0.0, $981 = 0.0, $982 = 0, $983 = 0, $984 = 0.0, $985 = 0.0, $986 = 0, $987 = 0, $988 = 0.0;
 var $989 = 0.0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0.0, $994 = 0.0, $995 = 0, $996 = 0, $997 = 0, $998 = 0.0, $999 = 0.0, $__a$i$i = 0, $__begin = 0, $__begin12 = 0, $__begin17 = 0, $__begin2 = 0, $__begin5 = 0, $__begin8 = 0, $__end = 0;
 var $__end13 = 0, $__end18 = 0, $__end3 = 0, $__end6 = 0, $__end9 = 0, $__i$i$i = 0, $__range = 0, $__range1 = 0, $__range11 = 0, $__range16 = 0, $__range4 = 0, $__range7 = 0, $eoi = 0, $eov = 0, $i = 0, $indexoffset = 0, $indices = 0, $m = 0, $m10 = 0, $m2 = 0;
 var $materialCount = 0, $materials = 0, $n = 0, $ni = 0, $nindices = 0, $nv = 0, $nverts = 0, $o = 0, $o15 = 0, $objectCount = 0, $objects = 0, $oi = 0, $om = 0, $op = 0, $ov = 0, $processedindex = 0, $processedvertex = 0, $s = 0, $s14 = 0, $texName = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vertexbase = 0, $vertexoffset = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp;
 $vararg_buffer7 = sp + 72|0;
 $vararg_buffer4 = sp + 48|0;
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 64|0;
 $3 = sp + 1244|0;
 $6 = sp + 1232|0;
 $14 = sp + 1200|0;
 $17 = sp + 1188|0;
 $28 = sp + 1144|0;
 $31 = sp + 1132|0;
 $35 = sp + 1116|0;
 $38 = sp + 1104|0;
 $53 = sp + 1044|0;
 $56 = sp + 1032|0;
 $60 = sp + 1016|0;
 $63 = sp + 1004|0;
 $76 = sp + 952|0;
 $79 = sp + 940|0;
 $83 = sp + 924|0;
 $86 = sp + 912|0;
 $114 = sp + 800|0;
 $117 = sp + 788|0;
 $126 = sp + 752|0;
 $129 = sp + 740|0;
 $173 = sp + 148|0;
 $176 = sp + 140|0;
 $180 = sp + 124|0;
 $183 = sp + 100|0;
 $195 = sp + 164|0;
 $198 = sp + 176|0;
 $202 = sp + 192|0;
 $205 = sp + 204|0;
 $210 = sp + 700|0;
 $213 = sp + 376|0;
 $220 = sp + 404|0;
 $223 = sp + 416|0;
 $objects = sp + 440|0;
 $materials = sp + 452|0;
 $objectCount = sp + 464|0;
 $__begin = sp + 480|0;
 $__end = sp + 484|0;
 $materialCount = sp + 492|0;
 $__begin2 = sp + 508|0;
 $__end3 = sp + 512|0;
 $texName = sp + 520|0;
 $__begin5 = sp + 536|0;
 $__end6 = sp + 540|0;
 $vertices = sp + 548|0;
 $indices = sp + 560|0;
 $__begin8 = sp + 596|0;
 $__end9 = sp + 600|0;
 $__begin12 = sp + 620|0;
 $__end13 = sp + 624|0;
 $__begin17 = sp + 640|0;
 $__end18 = sp + 644|0;
 $op = sp + 668|0;
 $231 = sp + 680|0;
 $227 = $this;
 $228 = $in;
 $232 = $227;
 $233 = ((($232)) + 20|0);
 __ZN5aabb24nullEv($233);
 $226 = $objects;
 $234 = $226;
 $225 = $234;
 $235 = $225;
 $224 = $235;
 HEAP32[$235>>2] = 0;
 $236 = ((($235)) + 4|0);
 HEAP32[$236>>2] = 0;
 $237 = ((($235)) + 8|0);
 $222 = $237;
 HEAP32[$223>>2] = 0;
 $238 = $222;
 $221 = $223;
 $239 = $221;
 $240 = HEAP32[$239>>2]|0;
 $219 = $238;
 HEAP32[$220>>2] = $240;
 $241 = $219;
 $218 = $241;
 $217 = $220;
 $242 = $217;
 $243 = HEAP32[$242>>2]|0;
 HEAP32[$241>>2] = $243;
 $216 = $materials;
 $244 = $216;
 $215 = $244;
 $245 = $215;
 $214 = $245;
 HEAP32[$245>>2] = 0;
 $246 = ((($245)) + 4|0);
 HEAP32[$246>>2] = 0;
 $247 = ((($245)) + 8|0);
 $212 = $247;
 HEAP32[$213>>2] = 0;
 $248 = $212;
 $211 = $213;
 $249 = $211;
 $250 = HEAP32[$249>>2]|0;
 $209 = $248;
 HEAP32[$210>>2] = $250;
 $251 = $209;
 $208 = $251;
 $207 = $210;
 $252 = $207;
 $253 = HEAP32[$252>>2]|0;
 HEAP32[$251>>2] = $253;
 $254 = $228;
 __THREW__ = 0;
 invoke_vii(145,($254|0),($objectCount|0));
 $255 = __THREW__; __THREW__ = 0;
 $256 = $255&1;
 L1: do {
  if (!($256)) {
   $257 = HEAP32[$objectCount>>2]|0;
   __THREW__ = 0;
   invoke_vii(146,($objects|0),($257|0));
   $258 = __THREW__; __THREW__ = 0;
   $259 = $258&1;
   if (!($259)) {
    $__range = $objects;
    $260 = $__range;
    $206 = $260;
    $261 = $206;
    $262 = HEAP32[$261>>2]|0;
    $203 = $261;
    $204 = $262;
    $263 = $204;
    $200 = $202;
    $201 = $263;
    $264 = $200;
    $265 = $201;
    HEAP32[$264>>2] = $265;
    $266 = HEAP32[$202>>2]|0;
    HEAP32[$205>>2] = $266;
    $267 = HEAP32[$205>>2]|0;
    HEAP32[$__begin>>2] = $267;
    $268 = $__range;
    $199 = $268;
    $269 = $199;
    $270 = ((($269)) + 4|0);
    $271 = HEAP32[$270>>2]|0;
    $196 = $269;
    $197 = $271;
    $272 = $197;
    $193 = $195;
    $194 = $272;
    $273 = $193;
    $274 = $194;
    HEAP32[$273>>2] = $274;
    $275 = HEAP32[$195>>2]|0;
    HEAP32[$198>>2] = $275;
    $276 = HEAP32[$198>>2]|0;
    HEAP32[$__end>>2] = $276;
    while(1) {
     $191 = $__begin;
     $192 = $__end;
     $277 = $191;
     $278 = $192;
     $189 = $277;
     $190 = $278;
     $279 = $189;
     $188 = $279;
     $280 = $188;
     $281 = HEAP32[$280>>2]|0;
     $282 = $190;
     $187 = $282;
     $283 = $187;
     $284 = HEAP32[$283>>2]|0;
     $285 = ($281|0)==($284|0);
     $286 = $285 ^ 1;
     if (!($286)) {
      break;
     }
     $186 = $__begin;
     $287 = $186;
     $288 = HEAP32[$287>>2]|0;
     $o = $288;
     $289 = $228;
     $290 = $o;
     __THREW__ = 0;
     invoke_vii(147,($289|0),($290|0));
     $291 = __THREW__; __THREW__ = 0;
     $292 = $291&1;
     if ($292) {
      break L1;
     }
     $293 = $228;
     $294 = $o;
     $295 = ((($294)) + 16|0);
     __THREW__ = 0;
     invoke_vii(148,($293|0),($295|0));
     $296 = __THREW__; __THREW__ = 0;
     $297 = $296&1;
     if ($297) {
      break L1;
     }
     $185 = $__begin;
     $298 = $185;
     $299 = HEAP32[$298>>2]|0;
     $300 = ((($299)) + 28|0);
     HEAP32[$298>>2] = $300;
    }
    $303 = $228;
    __THREW__ = 0;
    invoke_vii(145,($303|0),($materialCount|0));
    $304 = __THREW__; __THREW__ = 0;
    $305 = $304&1;
    if (!($305)) {
     $306 = HEAP32[$materialCount>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = $306;
     (invoke_iii(109,(6144|0),($vararg_buffer|0))|0);
     $307 = __THREW__; __THREW__ = 0;
     $308 = $307&1;
     if (!($308)) {
      $309 = HEAP32[$materialCount>>2]|0;
      __THREW__ = 0;
      invoke_vii(149,($materials|0),($309|0));
      $310 = __THREW__; __THREW__ = 0;
      $311 = $310&1;
      if (!($311)) {
       $nindices = 0;
       $nverts = 0;
       $__range1 = $materials;
       $312 = $__range1;
       $184 = $312;
       $313 = $184;
       $314 = HEAP32[$313>>2]|0;
       $181 = $313;
       $182 = $314;
       $315 = $182;
       $178 = $180;
       $179 = $315;
       $316 = $178;
       $317 = $179;
       HEAP32[$316>>2] = $317;
       $318 = HEAP32[$180>>2]|0;
       HEAP32[$183>>2] = $318;
       $319 = HEAP32[$183>>2]|0;
       HEAP32[$__begin2>>2] = $319;
       $320 = $__range1;
       $177 = $320;
       $321 = $177;
       $322 = ((($321)) + 4|0);
       $323 = HEAP32[$322>>2]|0;
       $174 = $321;
       $175 = $323;
       $324 = $175;
       $171 = $173;
       $172 = $324;
       $325 = $171;
       $326 = $172;
       HEAP32[$325>>2] = $326;
       $327 = HEAP32[$173>>2]|0;
       HEAP32[$176>>2] = $327;
       $328 = HEAP32[$176>>2]|0;
       HEAP32[$__end3>>2] = $328;
       while(1) {
        $169 = $__begin2;
        $170 = $__end3;
        $329 = $169;
        $330 = $170;
        $167 = $329;
        $168 = $330;
        $331 = $167;
        $166 = $331;
        $332 = $166;
        $333 = HEAP32[$332>>2]|0;
        $334 = $168;
        $165 = $334;
        $335 = $165;
        $336 = HEAP32[$335>>2]|0;
        $337 = ($333|0)==($336|0);
        $338 = $337 ^ 1;
        if (!($338)) {
         break;
        }
        $164 = $__begin2;
        $339 = $164;
        $340 = HEAP32[$339>>2]|0;
        $m = $340;
        $163 = $texName;
        $341 = $163;
        $162 = $341;
        $342 = $162;
        $161 = $342;
        $343 = $161;
        $160 = $343;
        $159 = $341;
        $344 = $159;
        $158 = $344;
        $345 = $158;
        $157 = $345;
        $346 = $157;
        $__a$i$i = $346;
        $__i$i$i = 0;
        while(1) {
         $347 = $__i$i$i;
         $348 = ($347>>>0)<(3);
         if (!($348)) {
          break;
         }
         $349 = $__i$i$i;
         $350 = $__a$i$i;
         $351 = (($350) + ($349<<2)|0);
         HEAP32[$351>>2] = 0;
         $352 = $__i$i$i;
         $353 = (($352) + 1)|0;
         $__i$i$i = $353;
        }
        $354 = $228;
        __THREW__ = 0;
        invoke_vii(150,($354|0),($texName|0));
        $355 = __THREW__; __THREW__ = 0;
        $356 = $355&1;
        if ($356) {
         label = 28;
         break;
        }
        $156 = $texName;
        $357 = $156;
        $155 = $357;
        $358 = $155;
        $154 = $358;
        $359 = $154;
        $153 = $359;
        $360 = $153;
        $152 = $360;
        $361 = $152;
        $362 = HEAP8[$361>>0]|0;
        $363 = $362&255;
        $364 = $363 & 1;
        $365 = ($364|0)!=(0);
        if ($365) {
         $148 = $358;
         $366 = $148;
         $147 = $366;
         $367 = $147;
         $146 = $367;
         $368 = $146;
         $369 = ((($368)) + 4|0);
         $370 = HEAP32[$369>>2]|0;
         $377 = $370;
        } else {
         $151 = $358;
         $371 = $151;
         $150 = $371;
         $372 = $150;
         $149 = $372;
         $373 = $149;
         $374 = HEAP8[$373>>0]|0;
         $375 = $374&255;
         $376 = $375 >> 1;
         $377 = $376;
        }
        $378 = ($377|0)==(0);
        if (!($378)) {
         $379 = $m;
         __THREW__ = 0;
         $380 = (invoke_i(151)|0);
         $381 = __THREW__; __THREW__ = 0;
         $382 = $381&1;
         if ($382) {
          label = 28;
          break;
         }
         $145 = $texName;
         $383 = $145;
         $144 = $383;
         $384 = $144;
         $143 = $384;
         $385 = $143;
         $142 = $385;
         $386 = $142;
         $141 = $386;
         $387 = $141;
         $140 = $387;
         $388 = $140;
         $389 = HEAP8[$388>>0]|0;
         $390 = $389&255;
         $391 = $390 & 1;
         $392 = ($391|0)!=(0);
         if ($392) {
          $134 = $385;
          $393 = $134;
          $133 = $393;
          $394 = $133;
          $132 = $394;
          $395 = $132;
          $396 = ((($395)) + 8|0);
          $397 = HEAP32[$396>>2]|0;
          $404 = $397;
         } else {
          $139 = $385;
          $398 = $139;
          $138 = $398;
          $399 = $138;
          $137 = $399;
          $400 = $137;
          $401 = ((($400)) + 1|0);
          $136 = $401;
          $402 = $136;
          $135 = $402;
          $403 = $135;
          $404 = $403;
         }
         $131 = $404;
         $405 = $131;
         __THREW__ = 0;
         $406 = (invoke_iii(152,($380|0),($405|0))|0);
         $407 = __THREW__; __THREW__ = 0;
         $408 = $407&1;
         if ($408) {
          label = 28;
          break;
         }
         __THREW__ = 0;
         (invoke_iii(153,($379|0),($406|0))|0);
         $409 = __THREW__; __THREW__ = 0;
         $410 = $409&1;
         if ($410) {
          label = 28;
          break;
         }
        }
        $413 = $228;
        $414 = $m;
        $415 = ((($414)) + 4|0);
        __THREW__ = 0;
        invoke_vii(154,($413|0),($415|0));
        $416 = __THREW__; __THREW__ = 0;
        $417 = $416&1;
        if ($417) {
         label = 28;
         break;
        }
        $418 = $m;
        $419 = ((($418)) + 4|0);
        $__range4 = $419;
        $420 = $__range4;
        $130 = $420;
        $421 = $130;
        $422 = HEAP32[$421>>2]|0;
        $127 = $421;
        $128 = $422;
        $423 = $128;
        $124 = $126;
        $125 = $423;
        $424 = $124;
        $425 = $125;
        HEAP32[$424>>2] = $425;
        $426 = HEAP32[$126>>2]|0;
        HEAP32[$129>>2] = $426;
        $427 = HEAP32[$129>>2]|0;
        HEAP32[$__begin5>>2] = $427;
        $428 = $__range4;
        $118 = $428;
        $429 = $118;
        $430 = ((($429)) + 4|0);
        $431 = HEAP32[$430>>2]|0;
        $115 = $429;
        $116 = $431;
        $432 = $116;
        $112 = $114;
        $113 = $432;
        $433 = $112;
        $434 = $113;
        HEAP32[$433>>2] = $434;
        $435 = HEAP32[$114>>2]|0;
        HEAP32[$117>>2] = $435;
        $436 = HEAP32[$117>>2]|0;
        HEAP32[$__end6>>2] = $436;
        while(1) {
         $110 = $__begin5;
         $111 = $__end6;
         $437 = $110;
         $438 = $111;
         $108 = $437;
         $109 = $438;
         $439 = $108;
         $107 = $439;
         $440 = $107;
         $441 = HEAP32[$440>>2]|0;
         $442 = $109;
         $106 = $442;
         $443 = $106;
         $444 = HEAP32[$443>>2]|0;
         $445 = ($441|0)==($444|0);
         $446 = $445 ^ 1;
         if (!($446)) {
          break;
         }
         $105 = $__begin5;
         $447 = $105;
         $448 = HEAP32[$447>>2]|0;
         $s = $448;
         $449 = $s;
         $450 = ((($449)) + 16|0);
         $451 = HEAP32[$450>>2]|0;
         $452 = $s;
         $453 = HEAP32[$452>>2]|0;
         $101 = $objects;
         $102 = $453;
         $454 = $101;
         $455 = $102;
         $456 = HEAP32[$454>>2]|0;
         $457 = (($456) + (($455*28)|0)|0);
         $458 = ((($457)) + 16|0);
         $96 = $458;
         $459 = $96;
         $460 = ((($459)) + 4|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = HEAP32[$459>>2]|0;
         $463 = $461;
         $464 = $462;
         $465 = (($463) - ($464))|0;
         $466 = (($465|0) / 64)&-1;
         $467 = Math_imul($451, $466)|0;
         $468 = $nverts;
         $469 = (($468) + ($467))|0;
         $nverts = $469;
         $470 = $s;
         $471 = ((($470)) + 8|0);
         $472 = HEAP32[$471>>2]|0;
         $473 = $s;
         $474 = HEAP32[$473>>2]|0;
         $49 = $objects;
         $50 = $474;
         $475 = $49;
         $476 = $50;
         $477 = HEAP32[$475>>2]|0;
         $478 = (($477) + (($476*28)|0)|0);
         $479 = ((($478)) + 16|0);
         $25 = $479;
         $480 = $25;
         $481 = ((($480)) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = HEAP32[$480>>2]|0;
         $484 = $482;
         $485 = $483;
         $486 = (($484) - ($485))|0;
         $487 = (($486|0) / 64)&-1;
         $488 = Math_imul($472, $487)|0;
         $489 = $nindices;
         $490 = (($489) + ($488))|0;
         $nindices = $490;
         $23 = $__begin5;
         $491 = $23;
         $492 = HEAP32[$491>>2]|0;
         $493 = ((($492)) + 20|0);
         HEAP32[$491>>2] = $493;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($texName);
        $21 = $__begin2;
        $494 = $21;
        $495 = HEAP32[$494>>2]|0;
        $496 = ((($495)) + 16|0);
        HEAP32[$494>>2] = $496;
       }
       if ((label|0) == 28) {
        $411 = ___cxa_find_matching_catch()|0;
        $412 = tempRet0;
        $229 = $411;
        $230 = $412;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($texName);
        __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEED2Ev($materials);
        __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEED2Ev($objects);
        $1006 = $229;
        $1007 = $230;
        ___resumeException($1006|0);
        // unreachable;
       }
       $9 = $vertices;
       $497 = $9;
       $8 = $497;
       $498 = $8;
       $7 = $498;
       HEAP32[$498>>2] = 0;
       $499 = ((($498)) + 4|0);
       HEAP32[$499>>2] = 0;
       $500 = ((($498)) + 8|0);
       $5 = $500;
       HEAP32[$6>>2] = 0;
       $501 = $5;
       $4 = $6;
       $502 = $4;
       $503 = HEAP32[$502>>2]|0;
       $2 = $501;
       HEAP32[$3>>2] = $503;
       $504 = $2;
       $1 = $504;
       $0 = $3;
       $505 = $0;
       $506 = HEAP32[$505>>2]|0;
       HEAP32[$504>>2] = $506;
       $507 = $228;
       __THREW__ = 0;
       invoke_vii(155,($507|0),($vertices|0));
       $508 = __THREW__; __THREW__ = 0;
       $509 = $508&1;
       if ($509) {
        label = 57;
       } else {
        $10 = $vertices;
        $510 = $10;
        $511 = ((($510)) + 4|0);
        $512 = HEAP32[$511>>2]|0;
        $513 = HEAP32[$510>>2]|0;
        $514 = $512;
        $515 = $513;
        $516 = (($514) - ($515))|0;
        $517 = (($516|0) / 12)&-1;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1>>2] = $517;
        (invoke_iii(109,(6160|0),($vararg_buffer1|0))|0);
        $518 = __THREW__; __THREW__ = 0;
        $519 = $518&1;
        if ($519) {
         label = 57;
        } else {
         $20 = $indices;
         $520 = $20;
         $19 = $520;
         $521 = $19;
         $18 = $521;
         HEAP32[$521>>2] = 0;
         $522 = ((($521)) + 4|0);
         HEAP32[$522>>2] = 0;
         $523 = ((($521)) + 8|0);
         $16 = $523;
         HEAP32[$17>>2] = 0;
         $524 = $16;
         $15 = $17;
         $525 = $15;
         $526 = HEAP32[$525>>2]|0;
         $13 = $524;
         HEAP32[$14>>2] = $526;
         $527 = $13;
         $12 = $527;
         $11 = $14;
         $528 = $11;
         $529 = HEAP32[$528>>2]|0;
         HEAP32[$527>>2] = $529;
         $530 = $228;
         __THREW__ = 0;
         invoke_vii(156,($530|0),($indices|0));
         $531 = __THREW__; __THREW__ = 0;
         $532 = $531&1;
         L46: do {
          if ($532) {
           label = 58;
          } else {
           $22 = $indices;
           $533 = $22;
           $534 = ((($533)) + 4|0);
           $535 = HEAP32[$534>>2]|0;
           $536 = HEAP32[$533>>2]|0;
           $537 = $535;
           $538 = $536;
           $539 = (($537) - ($538))|0;
           $540 = (($539|0) / 2)&-1;
           __THREW__ = 0;
           HEAP32[$vararg_buffer4>>2] = $540;
           (invoke_iii(109,(6176|0),($vararg_buffer4|0))|0);
           $541 = __THREW__; __THREW__ = 0;
           $542 = $541&1;
           if ($542) {
            label = 58;
           } else {
            $vertexoffset = 0;
            $indexoffset = 0;
            $543 = $nverts;
            $$arith18 = ($543*28)|0;
            $$overflow19 = ($543>>>0)>(153391689);
            $544 = $$overflow19 ? -1 : $$arith18;
            __THREW__ = 0;
            $545 = (invoke_ii(157,($544|0))|0);
            $546 = __THREW__; __THREW__ = 0;
            $547 = $546&1;
            if ($547) {
             label = 58;
            } else {
             $548 = ($543|0)==(0);
             L50: do {
              if (!($548)) {
               $549 = (($545) + (($543*28)|0)|0);
               $550 = $545;
               while(1) {
                __THREW__ = 0;
                invoke_vi(158,($550|0));
                $551 = __THREW__; __THREW__ = 0;
                $552 = $551&1;
                if ($552) {
                 break;
                }
                $553 = ((($550)) + 28|0);
                $554 = ($553|0)==($549|0);
                if ($554) {
                 break L50;
                } else {
                 $550 = $553;
                }
               }
               $742 = ___cxa_find_matching_catch()|0;
               $743 = tempRet0;
               $229 = $742;
               $230 = $743;
               __ZdaPv($545);
               break L46;
              }
             } while(0);
             $processedvertex = $545;
             $555 = $nindices;
             $$arith = $555<<1;
             $$overflow = ($555>>>0)>(2147483647);
             $556 = $$overflow ? -1 : $$arith;
             __THREW__ = 0;
             $557 = (invoke_ii(157,($556|0))|0);
             $558 = __THREW__; __THREW__ = 0;
             $559 = $558&1;
             if ($559) {
              label = 58;
             } else {
              $processedindex = $557;
              $n = 0;
              $560 = ((($232)) + 56|0);
              $24 = $materials;
              $561 = $24;
              $562 = ((($561)) + 4|0);
              $563 = HEAP32[$562>>2]|0;
              $564 = HEAP32[$561>>2]|0;
              $565 = $563;
              $566 = $564;
              $567 = (($565) - ($566))|0;
              $568 = (($567|0) / 16)&-1;
              __THREW__ = 0;
              invoke_vii(159,($560|0),($568|0));
              $569 = __THREW__; __THREW__ = 0;
              $570 = $569&1;
              if ($570) {
               label = 58;
              } else {
               $__range7 = $materials;
               $571 = $__range7;
               $32 = $571;
               $572 = $32;
               $573 = HEAP32[$572>>2]|0;
               $29 = $572;
               $30 = $573;
               $574 = $30;
               $26 = $28;
               $27 = $574;
               $575 = $26;
               $576 = $27;
               HEAP32[$575>>2] = $576;
               $577 = HEAP32[$28>>2]|0;
               HEAP32[$31>>2] = $577;
               $578 = HEAP32[$31>>2]|0;
               HEAP32[$__begin8>>2] = $578;
               $579 = $__range7;
               $39 = $579;
               $580 = $39;
               $581 = ((($580)) + 4|0);
               $582 = HEAP32[$581>>2]|0;
               $36 = $580;
               $37 = $582;
               $583 = $37;
               $33 = $35;
               $34 = $583;
               $584 = $33;
               $585 = $34;
               HEAP32[$584>>2] = $585;
               $586 = HEAP32[$35>>2]|0;
               HEAP32[$38>>2] = $586;
               $587 = HEAP32[$38>>2]|0;
               HEAP32[$__end9>>2] = $587;
               while(1) {
                $44 = $__begin8;
                $45 = $__end9;
                $588 = $44;
                $589 = $45;
                $42 = $588;
                $43 = $589;
                $590 = $42;
                $41 = $590;
                $591 = $41;
                $592 = HEAP32[$591>>2]|0;
                $593 = $43;
                $40 = $593;
                $594 = $40;
                $595 = HEAP32[$594>>2]|0;
                $596 = ($592|0)==($595|0);
                $597 = $596 ^ 1;
                if (!($597)) {
                 break;
                }
                $46 = $__begin8;
                $598 = $46;
                $599 = HEAP32[$598>>2]|0;
                $m10 = $599;
                $600 = ((($232)) + 56|0);
                $601 = $n;
                $602 = (($601) + 1)|0;
                $n = $602;
                $47 = $600;
                $48 = $601;
                $603 = $47;
                $604 = $48;
                $605 = HEAP32[$603>>2]|0;
                $606 = (($605) + ($604<<4)|0);
                $m2 = $606;
                $607 = $m2;
                $608 = $m10;
                __THREW__ = 0;
                (invoke_iii(160,($607|0),($608|0))|0);
                $609 = __THREW__; __THREW__ = 0;
                $610 = $609&1;
                if ($610) {
                 label = 58;
                 break L46;
                }
                $611 = $vertexoffset;
                $612 = ($611*28)|0;
                $613 = $m2;
                $614 = ((($613)) + 4|0);
                HEAP32[$614>>2] = $612;
                $615 = $indexoffset;
                $616 = $615<<1;
                $617 = $m2;
                $618 = ((($617)) + 8|0);
                HEAP32[$618>>2] = $616;
                $619 = $m2;
                $620 = ((($619)) + 12|0);
                HEAP32[$620>>2] = 0;
                $vertexbase = 0;
                $621 = $m10;
                $622 = ((($621)) + 4|0);
                $__range11 = $622;
                $623 = $__range11;
                $57 = $623;
                $624 = $57;
                $625 = HEAP32[$624>>2]|0;
                $54 = $624;
                $55 = $625;
                $626 = $55;
                $51 = $53;
                $52 = $626;
                $627 = $51;
                $628 = $52;
                HEAP32[$627>>2] = $628;
                $629 = HEAP32[$53>>2]|0;
                HEAP32[$56>>2] = $629;
                $630 = HEAP32[$56>>2]|0;
                HEAP32[$__begin12>>2] = $630;
                $631 = $__range11;
                $64 = $631;
                $632 = $64;
                $633 = ((($632)) + 4|0);
                $634 = HEAP32[$633>>2]|0;
                $61 = $632;
                $62 = $634;
                $635 = $62;
                $58 = $60;
                $59 = $635;
                $636 = $58;
                $637 = $59;
                HEAP32[$636>>2] = $637;
                $638 = HEAP32[$60>>2]|0;
                HEAP32[$63>>2] = $638;
                $639 = HEAP32[$63>>2]|0;
                HEAP32[$__end13>>2] = $639;
                while(1) {
                 $69 = $__begin12;
                 $70 = $__end13;
                 $640 = $69;
                 $641 = $70;
                 $67 = $640;
                 $68 = $641;
                 $642 = $67;
                 $66 = $642;
                 $643 = $66;
                 $644 = HEAP32[$643>>2]|0;
                 $645 = $68;
                 $65 = $645;
                 $646 = $65;
                 $647 = HEAP32[$646>>2]|0;
                 $648 = ($644|0)==($647|0);
                 $649 = $648 ^ 1;
                 if (!($649)) {
                  break;
                 }
                 $71 = $__begin12;
                 $650 = $71;
                 $651 = HEAP32[$650>>2]|0;
                 $s14 = $651;
                 $652 = $s14;
                 $653 = HEAP32[$652>>2]|0;
                 $72 = $objects;
                 $73 = $653;
                 $654 = $72;
                 $655 = $73;
                 $656 = HEAP32[$654>>2]|0;
                 $657 = (($656) + (($655*28)|0)|0);
                 $o15 = $657;
                 $658 = $o15;
                 $659 = ((($658)) + 16|0);
                 $__range16 = $659;
                 $660 = $__range16;
                 $80 = $660;
                 $661 = $80;
                 $662 = HEAP32[$661>>2]|0;
                 $77 = $661;
                 $78 = $662;
                 $663 = $78;
                 $74 = $76;
                 $75 = $663;
                 $664 = $74;
                 $665 = $75;
                 HEAP32[$664>>2] = $665;
                 $666 = HEAP32[$76>>2]|0;
                 HEAP32[$79>>2] = $666;
                 $667 = HEAP32[$79>>2]|0;
                 HEAP32[$__begin17>>2] = $667;
                 $668 = $__range16;
                 $87 = $668;
                 $669 = $87;
                 $670 = ((($669)) + 4|0);
                 $671 = HEAP32[$670>>2]|0;
                 $84 = $669;
                 $85 = $671;
                 $672 = $85;
                 $81 = $83;
                 $82 = $672;
                 $673 = $81;
                 $674 = $82;
                 HEAP32[$673>>2] = $674;
                 $675 = HEAP32[$83>>2]|0;
                 HEAP32[$86>>2] = $675;
                 $676 = HEAP32[$86>>2]|0;
                 HEAP32[$__end18>>2] = $676;
                 while(1) {
                  $92 = $__begin17;
                  $93 = $__end18;
                  $677 = $92;
                  $678 = $93;
                  $90 = $677;
                  $91 = $678;
                  $679 = $90;
                  $89 = $679;
                  $680 = $89;
                  $681 = HEAP32[$680>>2]|0;
                  $682 = $91;
                  $88 = $682;
                  $683 = $88;
                  $684 = HEAP32[$683>>2]|0;
                  $685 = ($681|0)==($684|0);
                  $686 = $685 ^ 1;
                  if (!($686)) {
                   break;
                  }
                  $94 = $__begin17;
                  $687 = $94;
                  $688 = HEAP32[$687>>2]|0;
                  $i = $688;
                  $689 = $vertexbase;
                  $690 = $s14;
                  $691 = ((($690)) + 16|0);
                  $692 = HEAP32[$691>>2]|0;
                  $693 = (($689) + ($692))|0;
                  $694 = ($693|0)>=(65536);
                  if ($694) {
                   __THREW__ = 0;
                   (invoke_iii(109,(6192|0),($vararg_buffer7|0))|0);
                   $695 = __THREW__; __THREW__ = 0;
                   $696 = $695&1;
                   if ($696) {
                    label = 58;
                    break L46;
                   }
                   $697 = ((($232)) + 56|0);
                   $698 = ((($232)) + 56|0);
                   $95 = $698;
                   $699 = $95;
                   $700 = ((($699)) + 4|0);
                   $701 = HEAP32[$700>>2]|0;
                   $702 = HEAP32[$699>>2]|0;
                   $703 = $701;
                   $704 = $702;
                   $705 = (($703) - ($704))|0;
                   $706 = (($705|0) / 16)&-1;
                   $707 = (($706) + 1)|0;
                   __THREW__ = 0;
                   invoke_vii(159,($697|0),($707|0));
                   $708 = __THREW__; __THREW__ = 0;
                   $709 = $708&1;
                   if ($709) {
                    label = 58;
                    break L46;
                   }
                   $710 = ((($232)) + 56|0);
                   $711 = $n;
                   $712 = (($711) - 1)|0;
                   $97 = $710;
                   $98 = $712;
                   $713 = $97;
                   $714 = $98;
                   $715 = HEAP32[$713>>2]|0;
                   $716 = (($715) + ($714<<4)|0);
                   $om = $716;
                   $717 = ((($232)) + 56|0);
                   $718 = $n;
                   $719 = (($718) + 1)|0;
                   $n = $719;
                   $99 = $717;
                   $100 = $718;
                   $720 = $99;
                   $721 = $100;
                   $722 = HEAP32[$720>>2]|0;
                   $723 = (($722) + ($721<<4)|0);
                   $m2 = $723;
                   $724 = $m2;
                   $725 = $om;
                   __THREW__ = 0;
                   (invoke_iii(160,($724|0),($725|0))|0);
                   $726 = __THREW__; __THREW__ = 0;
                   $727 = $726&1;
                   if ($727) {
                    label = 58;
                    break L46;
                   }
                   $728 = $vertexoffset;
                   $729 = ($728*28)|0;
                   $730 = $m2;
                   $731 = ((($730)) + 4|0);
                   HEAP32[$731>>2] = $729;
                   $732 = $indexoffset;
                   $733 = $732<<1;
                   $734 = $m2;
                   $735 = ((($734)) + 8|0);
                   HEAP32[$735>>2] = $733;
                   $736 = $m2;
                   $737 = ((($736)) + 12|0);
                   HEAP32[$737>>2] = 0;
                   $vertexbase = 0;
                  }
                  $103 = $vertices;
                  $104 = 0;
                  $744 = $103;
                  $745 = $104;
                  $746 = HEAP32[$744>>2]|0;
                  $747 = (($746) + (($745*12)|0)|0);
                  $748 = $s14;
                  $749 = ((($748)) + 12|0);
                  $750 = HEAP32[$749>>2]|0;
                  $751 = (($747) + ($750)|0);
                  $ov = $751;
                  $752 = $ov;
                  $753 = $s14;
                  $754 = ((($753)) + 16|0);
                  $755 = HEAP32[$754>>2]|0;
                  $756 = (($752) + (($755*12)|0)|0);
                  $eov = $756;
                  $757 = $processedvertex;
                  $758 = $vertexoffset;
                  $759 = (($757) + (($758*28)|0)|0);
                  $nv = $759;
                  while(1) {
                   $760 = $ov;
                   $761 = $eov;
                   $762 = ($760>>>0)<($761>>>0);
                   if (!($762)) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vi(161,($op|0));
                   $763 = __THREW__; __THREW__ = 0;
                   $764 = $763&1;
                   if ($764) {
                    label = 58;
                    break L46;
                   }
                   $765 = $ov;
                   $766 = HEAP16[$765>>1]|0;
                   $767 = $766&65535;
                   $768 = (+($767|0));
                   $769 = $768 * 1.5259021893143654E-5;
                   HEAPF32[$op>>2] = $769;
                   $770 = $ov;
                   $771 = ((($770)) + 2|0);
                   $772 = HEAP16[$771>>1]|0;
                   $773 = $772&65535;
                   $774 = (+($773|0));
                   $775 = $774 * 1.5259021893143654E-5;
                   $776 = ((($op)) + 4|0);
                   HEAPF32[$776>>2] = $775;
                   $777 = $ov;
                   $778 = ((($777)) + 4|0);
                   $779 = HEAP16[$778>>1]|0;
                   $780 = $779&65535;
                   $781 = (+($780|0));
                   $782 = $781 * 1.5259021893143654E-5;
                   $783 = ((($op)) + 8|0);
                   HEAPF32[$783>>2] = $782;
                   $784 = $nv;
                   $785 = $i;
                   __THREW__ = 0;
                   invoke_viii(162,($231|0),($785|0),($op|0));
                   $786 = __THREW__; __THREW__ = 0;
                   $787 = $786&1;
                   if ($787) {
                    label = 58;
                    break L46;
                   }
                   ;HEAP32[$784>>2]=HEAP32[$231>>2]|0;HEAP32[$784+4>>2]=HEAP32[$231+4>>2]|0;HEAP32[$784+8>>2]=HEAP32[$231+8>>2]|0;
                   $788 = ((($232)) + 20|0);
                   $789 = $nv;
                   __THREW__ = 0;
                   invoke_vii(163,($788|0),($789|0));
                   $790 = __THREW__; __THREW__ = 0;
                   $791 = $790&1;
                   if ($791) {
                    label = 58;
                    break L46;
                   }
                   $792 = $ov;
                   $793 = ((($792)) + 6|0);
                   $794 = HEAP8[$793>>0]|0;
                   $795 = $794&255;
                   $796 = (+($795|0));
                   $797 = $796 * 0.0039215688593685627;
                   $798 = $i;
                   $799 = ((($798)) + 48|0);
                   $800 = +HEAPF32[$799>>2];
                   $801 = $797 * $800;
                   $802 = $i;
                   $803 = ((($802)) + 48|0);
                   $804 = ((($803)) + 8|0);
                   $805 = +HEAPF32[$804>>2];
                   $806 = $801 + $805;
                   $807 = $nv;
                   $808 = ((($807)) + 12|0);
                   HEAPF32[$808>>2] = $806;
                   $809 = $ov;
                   $810 = ((($809)) + 7|0);
                   $811 = HEAP8[$810>>0]|0;
                   $812 = $811&255;
                   $813 = (+($812|0));
                   $814 = $813 * 0.0039215688593685627;
                   $815 = $i;
                   $816 = ((($815)) + 48|0);
                   $817 = ((($816)) + 4|0);
                   $818 = +HEAPF32[$817>>2];
                   $819 = $814 * $818;
                   $820 = $i;
                   $821 = ((($820)) + 48|0);
                   $822 = ((($821)) + 12|0);
                   $823 = +HEAPF32[$822>>2];
                   $824 = $819 + $823;
                   $825 = $nv;
                   $826 = ((($825)) + 12|0);
                   $827 = ((($826)) + 4|0);
                   HEAPF32[$827>>2] = $824;
                   $828 = $ov;
                   $829 = ((($828)) + 8|0);
                   $830 = HEAP16[$829>>1]|0;
                   $831 = $830&65535;
                   $832 = (+($831|0));
                   $833 = $832 * 1.5259021893143654E-5;
                   $834 = $o15;
                   $835 = +HEAPF32[$834>>2];
                   $836 = $833 * $835;
                   $837 = $o15;
                   $838 = ((($837)) + 8|0);
                   $839 = +HEAPF32[$838>>2];
                   $840 = $836 + $839;
                   $841 = $nv;
                   $842 = ((($841)) + 20|0);
                   HEAPF32[$842>>2] = $840;
                   $843 = $ov;
                   $844 = ((($843)) + 10|0);
                   $845 = HEAP16[$844>>1]|0;
                   $846 = $845&65535;
                   $847 = (+($846|0));
                   $848 = $847 * 1.5259021893143654E-5;
                   $849 = $o15;
                   $850 = ((($849)) + 4|0);
                   $851 = +HEAPF32[$850>>2];
                   $852 = $848 * $851;
                   $853 = $o15;
                   $854 = ((($853)) + 12|0);
                   $855 = +HEAPF32[$854>>2];
                   $856 = $852 + $855;
                   $857 = $nv;
                   $858 = ((($857)) + 20|0);
                   $859 = ((($858)) + 4|0);
                   HEAPF32[$859>>2] = $856;
                   $860 = $nv;
                   $861 = ((($860)) + 28|0);
                   $nv = $861;
                   $862 = $ov;
                   $863 = ((($862)) + 12|0);
                   $ov = $863;
                  }
                  $119 = $indices;
                  $120 = 0;
                  $864 = $119;
                  $865 = $120;
                  $866 = HEAP32[$864>>2]|0;
                  $867 = (($866) + ($865<<1)|0);
                  $868 = $s14;
                  $869 = ((($868)) + 4|0);
                  $870 = HEAP32[$869>>2]|0;
                  $871 = (($867) + ($870)|0);
                  $oi = $871;
                  $872 = $oi;
                  $873 = $s14;
                  $874 = ((($873)) + 8|0);
                  $875 = HEAP32[$874>>2]|0;
                  $876 = (($872) + ($875<<1)|0);
                  $eoi = $876;
                  $877 = $processedindex;
                  $878 = $indexoffset;
                  $879 = (($877) + ($878<<1)|0);
                  $ni = $879;
                  while(1) {
                   $880 = $oi;
                   $881 = $eoi;
                   $882 = ($880>>>0)<($881>>>0);
                   if (!($882)) {
                    break;
                   }
                   $883 = $oi;
                   $884 = HEAP16[$883>>1]|0;
                   $885 = $884&65535;
                   $886 = $vertexbase;
                   $887 = (($885) + ($886))|0;
                   $888 = $887&65535;
                   $889 = $ni;
                   HEAP16[$889>>1] = $888;
                   $890 = $ni;
                   $891 = ((($890)) + 2|0);
                   $ni = $891;
                   $892 = $oi;
                   $893 = ((($892)) + 2|0);
                   $oi = $893;
                  }
                  $894 = $s14;
                  $895 = ((($894)) + 16|0);
                  $896 = HEAP32[$895>>2]|0;
                  $897 = $vertexbase;
                  $898 = (($897) + ($896))|0;
                  $vertexbase = $898;
                  $899 = $s14;
                  $900 = ((($899)) + 16|0);
                  $901 = HEAP32[$900>>2]|0;
                  $902 = $vertexoffset;
                  $903 = (($902) + ($901))|0;
                  $vertexoffset = $903;
                  $904 = $s14;
                  $905 = ((($904)) + 8|0);
                  $906 = HEAP32[$905>>2]|0;
                  $907 = $indexoffset;
                  $908 = (($907) + ($906))|0;
                  $indexoffset = $908;
                  $909 = $s14;
                  $910 = ((($909)) + 8|0);
                  $911 = HEAP32[$910>>2]|0;
                  $912 = $m2;
                  $913 = ((($912)) + 12|0);
                  $914 = HEAP32[$913>>2]|0;
                  $915 = (($914) + ($911))|0;
                  HEAP32[$913>>2] = $915;
                  $121 = $__begin17;
                  $916 = $121;
                  $917 = HEAP32[$916>>2]|0;
                  $918 = ((($917)) + 64|0);
                  HEAP32[$916>>2] = $918;
                 }
                 $122 = $__begin12;
                 $919 = $122;
                 $920 = HEAP32[$919>>2]|0;
                 $921 = ((($920)) + 20|0);
                 HEAP32[$919>>2] = $921;
                }
                $123 = $__begin8;
                $922 = $123;
                $923 = HEAP32[$922>>2]|0;
                $924 = ((($923)) + 16|0);
                HEAP32[$922>>2] = $924;
               }
               $925 = $nverts;
               $926 = $vertexoffset;
               $927 = ($925|0)==($926|0);
               if (!($927)) {
                __THREW__ = 0;
                invoke_viiii(164,(6248|0),(6272|0),221,(6328|0));
                $928 = __THREW__; __THREW__ = 0;
                label = 58;
                break;
               }
               $929 = $nindices;
               $930 = $indexoffset;
               $931 = ($929|0)==($930|0);
               if (!($931)) {
                __THREW__ = 0;
                invoke_viiii(164,(6344|0),(6272|0),222,(6328|0));
                $932 = __THREW__; __THREW__ = 0;
                label = 58;
                break;
               }
               $933 = ((($232)) + 52|0);
               __THREW__ = 0;
               $934 = (invoke_ii(105,16)|0);
               $935 = __THREW__; __THREW__ = 0;
               $936 = $935&1;
               if ($936) {
                label = 58;
               } else {
                $937 = $nindices;
                $938 = $937<<1;
                __THREW__ = 0;
                invoke_viiii(165,($934|0),($938|0),34963,35044);
                $939 = __THREW__; __THREW__ = 0;
                $940 = $939&1;
                if ($940) {
                 $1002 = ___cxa_find_matching_catch()|0;
                 $1003 = tempRet0;
                 $229 = $1002;
                 $230 = $1003;
                 __ZdlPv($934);
                 break;
                }
                __THREW__ = 0;
                (invoke_iii(166,($933|0),($934|0))|0);
                $941 = __THREW__; __THREW__ = 0;
                $942 = $941&1;
                if ($942) {
                 label = 58;
                 break;
                }
                $943 = ((($232)) + 52|0);
                __THREW__ = 0;
                $944 = (invoke_ii(167,($943|0))|0);
                $945 = __THREW__; __THREW__ = 0;
                $946 = $945&1;
                if ($946) {
                 label = 58;
                 break;
                }
                $947 = $processedindex;
                $948 = $nindices;
                $949 = $948<<1;
                __THREW__ = 0;
                invoke_viiii(168,($944|0),($947|0),($949|0),0);
                $950 = __THREW__; __THREW__ = 0;
                $951 = $950&1;
                if ($951) {
                 label = 58;
                 break;
                }
                $952 = $processedindex;
                $953 = ($952|0)==(0|0);
                if (!($953)) {
                 __ZdaPv($952);
                }
                $954 = ((($232)) + 48|0);
                __THREW__ = 0;
                $955 = (invoke_ii(105,16)|0);
                $956 = __THREW__; __THREW__ = 0;
                $957 = $956&1;
                if ($957) {
                 label = 58;
                 break;
                }
                $958 = $nverts;
                $959 = ($958*28)|0;
                __THREW__ = 0;
                invoke_viiii(165,($955|0),($959|0),34962,35044);
                $960 = __THREW__; __THREW__ = 0;
                $961 = $960&1;
                if ($961) {
                 $1004 = ___cxa_find_matching_catch()|0;
                 $1005 = tempRet0;
                 $229 = $1004;
                 $230 = $1005;
                 __ZdlPv($955);
                 break;
                }
                __THREW__ = 0;
                (invoke_iii(166,($954|0),($955|0))|0);
                $962 = __THREW__; __THREW__ = 0;
                $963 = $962&1;
                if ($963) {
                 label = 58;
                 break;
                }
                $964 = ((($232)) + 48|0);
                __THREW__ = 0;
                $965 = (invoke_ii(167,($964|0))|0);
                $966 = __THREW__; __THREW__ = 0;
                $967 = $966&1;
                if ($967) {
                 label = 58;
                 break;
                }
                $968 = $processedvertex;
                $969 = $nverts;
                $970 = ($969*28)|0;
                __THREW__ = 0;
                invoke_viiii(168,($965|0),($968|0),($970|0),0);
                $971 = __THREW__; __THREW__ = 0;
                $972 = $971&1;
                if ($972) {
                 label = 58;
                 break;
                }
                $973 = $processedvertex;
                $974 = ($973|0)==(0|0);
                if (!($974)) {
                 __ZdaPv($973);
                }
                $975 = ((($232)) + 20|0);
                $976 = +HEAPF32[$975>>2];
                $977 = $976;
                $978 = ((($232)) + 20|0);
                $979 = ((($978)) + 4|0);
                $980 = +HEAPF32[$979>>2];
                $981 = $980;
                $982 = ((($232)) + 20|0);
                $983 = ((($982)) + 8|0);
                $984 = +HEAPF32[$983>>2];
                $985 = $984;
                $986 = ((($232)) + 20|0);
                $987 = ((($986)) + 12|0);
                $988 = +HEAPF32[$987>>2];
                $989 = $988;
                $990 = ((($232)) + 20|0);
                $991 = ((($990)) + 12|0);
                $992 = ((($991)) + 4|0);
                $993 = +HEAPF32[$992>>2];
                $994 = $993;
                $995 = ((($232)) + 20|0);
                $996 = ((($995)) + 12|0);
                $997 = ((($996)) + 8|0);
                $998 = +HEAPF32[$997>>2];
                $999 = $998;
                __THREW__ = 0;
                HEAPF64[$vararg_buffer9>>3] = $977;
                $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
                HEAPF64[$vararg_ptr12>>3] = $981;
                $vararg_ptr13 = ((($vararg_buffer9)) + 16|0);
                HEAPF64[$vararg_ptr13>>3] = $985;
                $vararg_ptr14 = ((($vararg_buffer9)) + 24|0);
                HEAPF64[$vararg_ptr14>>3] = $989;
                $vararg_ptr15 = ((($vararg_buffer9)) + 32|0);
                HEAPF64[$vararg_ptr15>>3] = $994;
                $vararg_ptr16 = ((($vararg_buffer9)) + 40|0);
                HEAPF64[$vararg_ptr16>>3] = $999;
                (invoke_iii(109,(6368|0),($vararg_buffer9|0))|0);
                $1000 = __THREW__; __THREW__ = 0;
                $1001 = $1000&1;
                if ($1001) {
                 label = 58;
                 break;
                }
                __ZNSt3__16vectorItNS_9allocatorItEEED2Ev($indices);
                __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEED2Ev($vertices);
                __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEED2Ev($materials);
                __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEED2Ev($objects);
                STACKTOP = sp;return;
               }
              }
             }
            }
           }
          }
         } while(0);
         if ((label|0) == 58) {
          $740 = ___cxa_find_matching_catch()|0;
          $741 = tempRet0;
          $229 = $740;
          $230 = $741;
         }
         __ZNSt3__16vectorItNS_9allocatorItEEED2Ev($indices);
        }
       }
       if ((label|0) == 57) {
        $738 = ___cxa_find_matching_catch()|0;
        $739 = tempRet0;
        $229 = $738;
        $230 = $739;
       }
       __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEED2Ev($vertices);
       __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEED2Ev($materials);
       __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEED2Ev($objects);
       $1006 = $229;
       $1007 = $230;
       ___resumeException($1006|0);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 $301 = ___cxa_find_matching_catch()|0;
 $302 = tempRet0;
 $229 = $301;
 $230 = $302;
 __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEED2Ev($materials);
 __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEED2Ev($objects);
 $1006 = $229;
 $1007 = $230;
 ___resumeException($1006|0);
 // unreachable;
}
function __ZN12staticScene25beginEi($alpha) {
 $alpha = $alpha|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alpha;
 $1 = $0;
 $2 = (5952 + ($1<<2)|0);
 $3 = (__ZNK6refptrI7programEptEv($2)|0);
 __ZN7program3useEv($3);
 $4 = $0;
 $5 = (5968 + ($4<<2)|0);
 $6 = (__ZN7uniformptEv($5)|0);
 $7 = HEAP32[5264>>2]|0;
 $8 = ((($7)) + 348|0);
 __ZN7uniform8setValueEPvji($6,$8,35676,1);
 $9 = $0;
 HEAP32[6392>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN12staticScene215renderInstancesEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $m = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 4|0;
 $0 = (__ZN12baseresourceI12staticScene2Li512EE10getmanagerEv()|0);
 $m = $0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(2);
  if (!($2)) {
   break;
  }
  $3 = $i;
  __ZN12staticScene25beginEi($3);
  $4 = $m;
  $5 = ((($4)) + 4|0);
  $6 = (__ZN10stringhashI12staticScene2Li512EE5beginEv($5)|0);
  HEAP32[$s>>2] = $6;
  while(1) {
   $7 = HEAP32[$s>>2]|0;
   $8 = $m;
   $9 = ((($8)) + 4|0);
   $10 = (__ZN10stringhashI12staticScene2Li512EE3endEv($9)|0);
   $11 = ($7|0)!=($10|0);
   if (!($11)) {
    break;
   }
   $12 = HEAP32[$s>>2]|0;
   __ZN12staticScene220innerRenderInstancesEv($12);
   $13 = $m;
   $14 = ((($13)) + 4|0);
   __ZN10stringhashI12staticScene2Li512EE7getnextERPS0_($14,$s);
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function __ZN12staticScene220innerRenderInstancesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0, $__end = 0, $__range = 0, $i = 0, $k = 0, $m = 0, $s = 0, $s1 = 0, $sa1 = 0;
 var $sa2 = 0, $sa3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 108|0;
 $12 = sp + 96|0;
 $16 = sp + 80|0;
 $19 = sp + 28|0;
 $s = sp + 16|0;
 $s1 = sp + 20|0;
 $__begin = sp + 40|0;
 $__end = sp + 44|0;
 $sa1 = sp + 52|0;
 $sa2 = sp + 56|0;
 $sa3 = sp + 60|0;
 $23 = $this;
 $26 = $23;
 $27 = ((($26)) + 68|0);
 $28 = ((($26)) + 68|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)==($30|0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = ((($26)) + 56|0);
 $22 = $32;
 $33 = $22;
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($33)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34|0)==($36|0);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = ((($26)) + 44|0);
 $39 = (__ZN6refptrI7textureEcvPS0_Ev($38)|0);
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = ((($26)) + 44|0);
  $42 = (__ZNK6refptrI7textureEptEv($41)|0);
  __ZN7texture3useEi($42,1);
 }
 $43 = ((($26)) + 52|0);
 $44 = (__ZN6refptrI6bufferEcvPS0_Ev($43)|0);
 __ZN6buffer5setupC2EPS_($s,$44);
 $45 = ((($26)) + 48|0);
 __THREW__ = 0;
 $46 = (invoke_ii(169,($45|0))|0);
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if (!($48)) {
  __THREW__ = 0;
  invoke_vii(170,($s1|0),($46|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if (!($50)) {
   $51 = ((($26)) + 56|0);
   $__range = $51;
   $52 = $__range;
   $20 = $52;
   $53 = $20;
   $54 = HEAP32[$53>>2]|0;
   $17 = $53;
   $18 = $54;
   $55 = $18;
   $14 = $16;
   $15 = $55;
   $56 = $14;
   $57 = $15;
   HEAP32[$56>>2] = $57;
   $58 = HEAP32[$16>>2]|0;
   HEAP32[$19>>2] = $58;
   $59 = HEAP32[$19>>2]|0;
   HEAP32[$__begin>>2] = $59;
   $60 = $__range;
   $13 = $60;
   $61 = $13;
   $62 = ((($61)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $10 = $61;
   $11 = $63;
   $64 = $11;
   $7 = $9;
   $8 = $64;
   $65 = $7;
   $66 = $8;
   HEAP32[$65>>2] = $66;
   $67 = HEAP32[$9>>2]|0;
   HEAP32[$12>>2] = $67;
   $68 = HEAP32[$12>>2]|0;
   HEAP32[$__end>>2] = $68;
   L13: while(1) {
    $5 = $__begin;
    $6 = $__end;
    $69 = $5;
    $70 = $6;
    $3 = $69;
    $4 = $70;
    $71 = $3;
    $2 = $71;
    $72 = $2;
    $73 = HEAP32[$72>>2]|0;
    $74 = $4;
    $1 = $74;
    $75 = $1;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($73|0)==($76|0);
    $78 = $77 ^ 1;
    if (!($78)) {
     label = 34;
     break;
    }
    $0 = $__begin;
    $79 = $0;
    $80 = HEAP32[$79>>2]|0;
    $m = $80;
    $81 = $m;
    __THREW__ = 0;
    $82 = (invoke_ii(171,($81|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 14;
     break;
    }
    $85 = ($82|0)!=(0|0);
    if ($85) {
     $86 = $m;
     __THREW__ = 0;
     $87 = (invoke_ii(172,($86|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 14;
      break;
     }
     $90 = ((($87)) + 20|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91 << 24 >> 24;
     $93 = HEAP32[6392>>2]|0;
     $94 = ($92|0)!=($93|0);
     if (!($94)) {
      $99 = $m;
      __THREW__ = 0;
      $100 = (invoke_ii(172,($99|0))|0);
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       label = 14;
       break;
      }
      __THREW__ = 0;
      invoke_vii(173,($100|0),0);
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if ($104) {
       label = 14;
       break;
      } else {
       label = 18;
      }
     }
    } else {
     __THREW__ = 0;
     invoke_vi(174,0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 14;
      break;
     } else {
      label = 18;
     }
    }
    if ((label|0) == 18) {
     label = 0;
     $107 = HEAP32[6392>>2]|0;
     $108 = (5976 + ($107<<2)|0);
     $109 = $m;
     $110 = ((($109)) + 4|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (0 + ($111)|0);
     __THREW__ = 0;
     invoke_viiiiiii(175,($sa1|0),($108|0),3,5126,0,28,($112|0));
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 14;
      break;
     }
     $115 = HEAP32[6392>>2]|0;
     $116 = (5984 + ($115<<2)|0);
     $117 = $m;
     $118 = ((($117)) + 4|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ((((0) + 20|0)) + ($119)|0);
     __THREW__ = 0;
     invoke_viiiiiii(175,($sa2|0),($116|0),2,5126,0,28,($120|0));
     $121 = __THREW__; __THREW__ = 0;
     $122 = $121&1;
     if ($122) {
      label = 27;
      break;
     }
     $123 = HEAP32[6392>>2]|0;
     $124 = (5992 + ($123<<2)|0);
     $125 = $m;
     $126 = ((($125)) + 4|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((((0) + 12|0)) + ($127)|0);
     __THREW__ = 0;
     invoke_viiiiiii(175,($sa3|0),($124|0),2,5126,0,28,($128|0));
     $129 = __THREW__; __THREW__ = 0;
     $130 = $129&1;
     if ($130) {
      label = 28;
      break;
     }
     $131 = ((($26)) + 68|0);
     $132 = ((($131)) + 4|0);
     $133 = HEAP32[$132>>2]|0;
     $k = $133;
     while(1) {
      $134 = $k;
      $135 = ((($26)) + 68|0);
      $136 = ($134|0)!=($135|0);
      if (!($136)) {
       break;
      }
      $137 = $k;
      $i = $137;
      $138 = HEAP32[6392>>2]|0;
      $139 = (5960 + ($138<<2)|0);
      __THREW__ = 0;
      $140 = (invoke_ii(176,($139|0))|0);
      $141 = __THREW__; __THREW__ = 0;
      $142 = $141&1;
      if ($142) {
       label = 29;
       break L13;
      }
      $143 = $i;
      $144 = ((($143)) + 12|0);
      __THREW__ = 0;
      invoke_viiii(177,($140|0),($144|0),35666,3);
      $145 = __THREW__; __THREW__ = 0;
      $146 = $145&1;
      if ($146) {
       label = 29;
       break L13;
      }
      $147 = HEAP32[5264>>2]|0;
      $148 = $m;
      $149 = ((($148)) + 8|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $150;
      $152 = $m;
      $153 = ((($152)) + 12|0);
      $154 = HEAP32[$153>>2]|0;
      __THREW__ = 0;
      invoke_viiiii(178,($147|0),($151|0),($154|0),4,5123);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       label = 29;
       break L13;
      }
      $157 = $k;
      $158 = ((($157)) + 4|0);
      $159 = HEAP32[$158>>2]|0;
      $k = $159;
     }
     __ZN9attribute5setupD2Ev($sa3);
     __ZN9attribute5setupD2Ev($sa2);
     __ZN9attribute5setupD2Ev($sa1);
    }
    $21 = $__begin;
    $166 = $21;
    $167 = HEAP32[$166>>2]|0;
    $168 = ((($167)) + 16|0);
    HEAP32[$166>>2] = $168;
   }
   if ((label|0) == 14) {
    $97 = ___cxa_find_matching_catch()|0;
    $98 = tempRet0;
    $24 = $97;
    $25 = $98;
   }
   else if ((label|0) == 27) {
    $160 = ___cxa_find_matching_catch()|0;
    $161 = tempRet0;
    $24 = $160;
    $25 = $161;
    label = 33;
   }
   else if ((label|0) == 28) {
    $162 = ___cxa_find_matching_catch()|0;
    $163 = tempRet0;
    $24 = $162;
    $25 = $163;
    label = 32;
   }
   else if ((label|0) == 29) {
    $164 = ___cxa_find_matching_catch()|0;
    $165 = tempRet0;
    $24 = $164;
    $25 = $165;
    __ZN9attribute5setupD2Ev($sa3);
    label = 32;
   }
   else if ((label|0) == 34) {
    __ZN6buffer5setupD2Ev($s1);
    __ZN6buffer5setupD2Ev($s);
    STACKTOP = sp;return;
   }
   if ((label|0) == 32) {
    __ZN9attribute5setupD2Ev($sa2);
    label = 33;
   }
   if ((label|0) == 33) {
    __ZN9attribute5setupD2Ev($sa1);
   }
   __ZN6buffer5setupD2Ev($s1);
   __ZN6buffer5setupD2Ev($s);
   $169 = $24;
   $170 = $25;
   ___resumeException($169|0);
   // unreachable;
  }
 }
 $95 = ___cxa_find_matching_catch()|0;
 $96 = tempRet0;
 $24 = $95;
 $25 = $96;
 __ZN6buffer5setupD2Ev($s);
 $169 = $24;
 $170 = $25;
 ___resumeException($169|0);
 // unreachable;
}
function __GLOBAL__sub_I_staticScene2_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init83();
 return;
}
function __ZN6refptrI7programEcvPS0_Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN12baseresourceI7programLi512EE10getmanagerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[15184>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (6400|0);
 }
 $4 = (___cxa_guard_acquire((15184|0))|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (6400|0);
 }
 __THREW__ = 0;
 invoke_vi(179,(6400|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  ___cxa_guard_abort((15184|0));
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((180|0),(6400|0),(___dso_handle|0))|0);
 ___cxa_guard_release((15184|0));
 STACKTOP = sp;return (6400|0);
}
function __ZN12baseresourceI7programLi512EE8tmanager3getEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rtn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = $2;
 $6 = (__ZN10stringhashI7programLi512EE6searchEPKc($4,$5)|0);
 $rtn = $6;
 $7 = $rtn;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $rtn;
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = $2;
  $11 = (__ZN12baseresourceI7programLi512EE8tmanager9innerloadEPKc($3,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN6refptrI7programEaSEPKS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  __ZN8countref3refEv($5);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  __ZN8countref5unrefEv($8);
 }
 $9 = $1;
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($2|0);
}
function __ZNK6refptrI7programEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN7uniformcvbEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(-1);
 STACKTOP = sp;return ($3|0);
}
function __ZN7uniformptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN12baseresourceI7textureLi512EE10getmanagerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[15176>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (10504|0);
 }
 $4 = (___cxa_guard_acquire((15176|0))|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (10504|0);
 }
 __THREW__ = 0;
 invoke_vi(181,(10504|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  ___cxa_guard_abort((15176|0));
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((182|0),(10504|0),(___dso_handle|0))|0);
 ___cxa_guard_release((15176|0));
 STACKTOP = sp;return (10504|0);
}
function __ZN12baseresourceI7textureLi512EE8tmanager3getEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rtn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = $2;
 $6 = (__ZN10stringhashI7textureLi512EE6searchEPKc($4,$5)|0);
 $rtn = $6;
 $7 = $rtn;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $rtn;
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = $2;
  $11 = (__ZN12baseresourceI7textureLi512EE8tmanager9innerloadEPKc($3,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN6refptrI7textureEaSEPKS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  __ZN8countref3refEv($5);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  __ZN8countref5unrefEv($8);
 }
 $9 = $1;
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($2|0);
}
function __ZL13sceneOnLoadedPvS_i($obj,$data,$dataLen) {
 $obj = $obj|0;
 $data = $data|0;
 $dataLen = $dataLen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $d = 0, $str = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $str = sp + 20|0;
 $0 = $obj;
 $1 = $data;
 $2 = $dataLen;
 $5 = $t;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $d = $9;
 __ZN16memoryReadStreamC2Ev($str);
 $10 = $1;
 $11 = ((($str)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($str)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = $2;
 $14 = ((($str)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = $d;
 __THREW__ = 0;
 invoke_vii(183,($15|0),($str|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZN16memoryReadStreamD2Ev($str);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 } else {
  __ZN16memoryReadStreamD2Ev($str);
  STACKTOP = sp;return;
 }
}
function __ZL13sceneOnFailedPv($obj) {
 $obj = $obj|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 STACKTOP = sp;return;
}
function __ZN5aabb24nullEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $2 = sp + 12|0;
 $0 = $this;
 $3 = $0;
 __ZN4vec3C2Ef($1,3.4028234663852886E+38);
 ;HEAP32[$3>>2]=HEAP32[$1>>2]|0;HEAP32[$3+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$1+8>>2]|0;
 $4 = ((($3)) + 12|0);
 __ZN4vec3C2Ef($2,-3.4028234663852886E+38);
 ;HEAP32[$4>>2]=HEAP32[$2>>2]|0;HEAP32[$4+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$2+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6stream5dumptIiEEvRT_($this,$dest) {
 $this = $this|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $dest;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 FUNCTION_TABLE_viii[$5 & 511]($2,$6,4);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 28)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*28)|0)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 28)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -28|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
  $68 = $1;
  __ZN12staticScene212staticObjectD2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(184,($41|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6stream5dumptIN12staticScene216staticObjectBaseEEEvRT_($this,$dest) {
 $this = $this|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $dest;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 FUNCTION_TABLE_viii[$5 & 511]($2,$6,16);
 STACKTOP = sp;return;
}
function __ZN6stream7dumpstlINSt3__16vectorIN12staticScene214staticInstanceENS1_9allocatorIS4_EEEEEEvRT_($this,$c8s) {
 $this = $this|0;
 $c8s = $c8s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 16|0;
 $3 = $this;
 $4 = $c8s;
 $5 = $3;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 64)&-1;
 HEAP32[$k>>2] = $14;
 __ZN6stream5dumptIjEEvRT_($5,$k);
 $15 = $4;
 $16 = HEAP32[$k>>2]|0;
 __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE6resizeEj($15,$16);
 $17 = HEAP32[$k>>2]|0;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$5>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $4;
 $0 = $22;
 $1 = 0;
 $23 = $0;
 $24 = $1;
 $25 = HEAP32[$23>>2]|0;
 $26 = (($25) + ($24<<6)|0);
 $27 = HEAP32[$k>>2]|0;
 $28 = $27<<6;
 FUNCTION_TABLE_viii[$21 & 511]($5,$26,$28);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 16)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<4)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 16)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -16|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
  $68 = $1;
  __ZN12staticScene214staticMaterialD2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(185,($41|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6stream11dumpstlbyteINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRT_($this,$c8s) {
 $this = $this|0;
 $c8s = $c8s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 112|0;
 $26 = $this;
 $27 = $c8s;
 $28 = $26;
 $29 = $27;
 $25 = $29;
 $30 = $25;
 $24 = $30;
 $31 = $24;
 $23 = $31;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $35 & 1;
 $37 = ($36|0)!=(0);
 if ($37) {
  $18 = $30;
  $38 = $18;
  $17 = $38;
  $39 = $17;
  $16 = $39;
  $40 = $16;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $50 = $42;
 } else {
  $21 = $30;
  $43 = $21;
  $20 = $43;
  $44 = $20;
  $19 = $44;
  $45 = $19;
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47 >> 1;
  $50 = $48;
 }
 $49 = $50&255;
 HEAP8[$k>>0] = $49;
 __ZN6stream5dumptIhEEvRT_($28,$k);
 $51 = $27;
 $52 = HEAP8[$k>>0]|0;
 $53 = $52&255;
 $14 = $51;
 $15 = $53;
 $54 = $14;
 $55 = $15;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($54,$55,0);
 $56 = HEAP8[$k>>0]|0;
 $57 = ($56<<24>>24)!=(0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = HEAP32[$28>>2]|0;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $27;
 $12 = $61;
 $13 = 0;
 $62 = $12;
 $11 = $62;
 $63 = $11;
 $10 = $63;
 $64 = $10;
 $9 = $64;
 $65 = $9;
 $8 = $65;
 $66 = $8;
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $68 & 1;
 $70 = ($69|0)!=(0);
 if ($70) {
  $2 = $63;
  $71 = $2;
  $1 = $71;
  $72 = $1;
  $0 = $72;
  $73 = $0;
  $74 = ((($73)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $84 = $75;
 } else {
  $7 = $63;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $5 = $77;
  $78 = $5;
  $79 = ((($78)) + 1|0);
  $4 = $79;
  $80 = $4;
  $3 = $80;
  $81 = $3;
  $84 = $81;
 }
 $82 = $13;
 $83 = (($84) + ($82)|0);
 $85 = HEAP8[$k>>0]|0;
 $86 = $85&255;
 $87 = $86;
 FUNCTION_TABLE_viii[$60 & 511]($28,$83,$87);
 STACKTOP = sp;return;
}
function __ZN6stream7dumpstlINSt3__16vectorIN12staticScene210staticMeshENS1_9allocatorIS4_EEEEEEvRT_($this,$c8s) {
 $this = $this|0;
 $c8s = $c8s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 16|0;
 $3 = $this;
 $4 = $c8s;
 $5 = $3;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 20)&-1;
 HEAP32[$k>>2] = $14;
 __ZN6stream5dumptIjEEvRT_($5,$k);
 $15 = $4;
 $16 = HEAP32[$k>>2]|0;
 __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE6resizeEj($15,$16);
 $17 = HEAP32[$k>>2]|0;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$5>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $4;
 $0 = $22;
 $1 = 0;
 $23 = $0;
 $24 = $1;
 $25 = HEAP32[$23>>2]|0;
 $26 = (($25) + (($24*20)|0)|0);
 $27 = HEAP32[$k>>2]|0;
 $28 = ($27*20)|0;
 FUNCTION_TABLE_viii[$21 & 511]($5,$26,$28);
 STACKTOP = sp;return;
}
function __ZN6stream7dumpstlINSt3__16vectorIN12staticScene26vertexENS1_9allocatorIS4_EEEEEEvRT_($this,$c8s) {
 $this = $this|0;
 $c8s = $c8s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 16|0;
 $3 = $this;
 $4 = $c8s;
 $5 = $3;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 12)&-1;
 HEAP32[$k>>2] = $14;
 __ZN6stream5dumptIjEEvRT_($5,$k);
 $15 = $4;
 $16 = HEAP32[$k>>2]|0;
 __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE6resizeEj($15,$16);
 $17 = HEAP32[$k>>2]|0;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$5>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $4;
 $0 = $22;
 $1 = 0;
 $23 = $0;
 $24 = $1;
 $25 = HEAP32[$23>>2]|0;
 $26 = (($25) + (($24*12)|0)|0);
 $27 = HEAP32[$k>>2]|0;
 $28 = ($27*12)|0;
 FUNCTION_TABLE_viii[$21 & 511]($5,$26,$28);
 STACKTOP = sp;return;
}
function __ZN6stream7dumpstlINSt3__16vectorItNS1_9allocatorItEEEEEEvRT_($this,$c8s) {
 $this = $this|0;
 $c8s = $c8s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 16|0;
 $3 = $this;
 $4 = $c8s;
 $5 = $3;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 2)&-1;
 HEAP32[$k>>2] = $14;
 __ZN6stream5dumptIjEEvRT_($5,$k);
 $15 = $4;
 $16 = HEAP32[$k>>2]|0;
 __ZNSt3__16vectorItNS_9allocatorItEEE6resizeEj($15,$16);
 $17 = HEAP32[$k>>2]|0;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$5>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $4;
 $0 = $22;
 $1 = 0;
 $23 = $0;
 $24 = $1;
 $25 = HEAP32[$23>>2]|0;
 $26 = (($25) + ($24<<1)|0);
 $27 = HEAP32[$k>>2]|0;
 $28 = $27<<1;
 FUNCTION_TABLE_viii[$21 & 511]($5,$26,$28);
 STACKTOP = sp;return;
}
function __ZN12staticScene27vertex2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4vec3C2Ev($1);
 $2 = ((($1)) + 12|0);
 __ZN4vec2C2Ev($2);
 $3 = ((($1)) + 20|0);
 __ZN4vec2C2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 16)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<4)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 16)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -16|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
  $68 = $1;
  __ZN12staticScene29material2D2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(186,($41|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6refptrI7textureEaSERKS1_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK6refptrI7textureEcvPS0_Ev($3)|0);
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = (__ZNK6refptrI7textureEcvPS0_Ev($6)|0);
  __ZN8countref3refEv($7);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$2>>2]|0;
  __ZN8countref5unrefEv($10);
 }
 $11 = $1;
 $12 = (__ZNK6refptrI7textureEcvPS0_Ev($11)|0);
 HEAP32[$2>>2] = $12;
 STACKTOP = sp;return ($2|0);
}
function __ZN5aabb25mergeER4vec3($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 116|0;
 $$byval_copy2 = sp + 104|0;
 $$byval_copy1 = sp + 92|0;
 $$byval_copy = sp + 80|0;
 $2 = sp + 60|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = sp + 48|0;
 $0 = $this;
 $1 = $t;
 $8 = $0;
 $9 = $1;
 ;HEAP32[$3>>2]=HEAP32[$9>>2]|0;HEAP32[$3+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$9+8>>2]|0;
 ;HEAP32[$4>>2]=HEAP32[$8>>2]|0;HEAP32[$4+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$8+8>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$4+8>>2]|0;
 __Z3minI4vec3ET_S1_S1_($2,$$byval_copy,$$byval_copy1);
 ;HEAP32[$8>>2]=HEAP32[$2>>2]|0;HEAP32[$8+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$2+8>>2]|0;
 $10 = ((($8)) + 12|0);
 $11 = $1;
 ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
 $12 = ((($8)) + 12|0);
 ;HEAP32[$7>>2]=HEAP32[$12>>2]|0;HEAP32[$7+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$12+8>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$6+8>>2]|0;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$7+8>>2]|0;
 __Z3maxI4vec3ET_S1_S1_($5,$$byval_copy2,$$byval_copy3);
 ;HEAP32[$10>>2]=HEAP32[$5>>2]|0;HEAP32[$10+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$5+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6bufferC2Eiii($this,$size,$defaulttarget,$usage) {
 $this = $this|0;
 $size = $size|0;
 $defaulttarget = $defaulttarget|0;
 $usage = $usage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $defaulttarget;
 $3 = $usage;
 $6 = $0;
 __ZN8countrefC2Ev($6);
 $7 = 48624;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __THREW__ = 0;
 invoke_viiii(187,($6|0),($9|0),($10|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN8countrefD2Ev($6);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6refptrI6bufferEaSEPKS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  __ZN8countref3refEv($5);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  __ZN8countref5unrefEv($8);
 }
 $9 = $1;
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($2|0);
}
function __ZNK6refptrI6bufferEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorItNS_9allocatorItEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseItNS_9allocatorItEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN12staticScene26vertexENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN12staticScene214staticMaterialENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN12staticScene212staticObjectENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6refptrI7textureEcvPS0_Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNK6refptrI7textureEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN6refptrI6bufferEcvPS0_Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN6device12drawElementsEPKvijj($this,$indices,$count,$mode,$type) {
 $this = $this|0;
 $indices = $indices|0;
 $count = $count|0;
 $mode = $mode|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $indices;
 $2 = $count;
 $3 = $mode;
 $4 = $type;
 $5 = $3;
 $6 = $2;
 $7 = $4;
 $8 = $1;
 _glDrawElements(($5|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10stringhashI12staticScene2Li512EE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $0 = $this;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + -8|0);
 $4 = $2 ? 0 : $3;
 HEAP32[$r>>2] = $4;
 __ZN10stringhashI12staticScene2Li512EE7getnextERPS0_($1,$r);
 $5 = HEAP32[$r>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZN10stringhashI12staticScene2Li512EE3endEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + -8|0);
 $4 = $2 ? 0 : $3;
 STACKTOP = sp;return ($4|0);
}
function __ZN10stringhashI12staticScene2Li512EE7getnextERPS0_($this,$ptr) {
 $this = $this|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ptr;
 $2 = $0;
 while(1) {
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = ((($7)) + -8|0);
  $10 = $8 ? 0 : $9;
  $11 = $1;
  HEAP32[$11>>2] = $10;
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($2|0)==(0|0);
  $15 = ((($2)) + -8|0);
  $16 = $14 ? 0 : $15;
  $17 = ($13>>>0)>=($16>>>0);
  if (!($17)) {
   label = 5;
   break;
  }
  $18 = $1;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 4096|0);
  $21 = ($20|0)==(0|0);
  $22 = ((($20)) + -8|0);
  $23 = $21 ? 0 : $22;
  $24 = ($19>>>0)<($23>>>0);
  if (!($24)) {
   label = 5;
   break;
  }
  $25 = $1;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($2|0)==(0|0);
  $28 = ((($2)) + -8|0);
  $29 = $27 ? 0 : $28;
  $30 = ($26|0)!=($29|0);
  if (!($30)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function ___cxx_global_var_init83() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = 5952;
 while(1) {
  __THREW__ = 0;
  invoke_vi(188,($2|0));
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   break;
  }
  $5 = ((($2)) + 4|0);
  $6 = ($5|0)==((5960)|0);
  if ($6) {
   label = 4;
   break;
  } else {
   $2 = $5;
  }
 }
 if ((label|0) == 4) {
  (___cxa_atexit((189|0),(0|0),(___dso_handle|0))|0);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $0 = $7;
 $1 = $8;
 $9 = (5952|0)==($2|0);
 if ($9) {
  $13 = $0;
  $14 = $1;
  ___resumeException($13|0);
  // unreachable;
 } else {
  $11 = $2;
 }
 while(1) {
  $10 = ((($11)) + -4|0);
  __ZN6refptrI7programED2Ev($10);
  $12 = ($10|0)==(5952|0);
  if ($12) {
   break;
  } else {
   $11 = $10;
  }
 }
 $13 = $0;
 $14 = $1;
 ___resumeException($13|0);
 // unreachable;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $3 = (5960);
 while(1) {
  $2 = ((($3)) + -4|0);
  __ZN6refptrI7programED2Ev($2);
  $4 = ($2|0)==(5952|0);
  if ($4) {
   break;
  } else {
   $3 = $2;
  }
 }
 STACKTOP = sp;return;
}
function __ZN16memoryReadStreamC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6streamC2Ev($1);
 $2 = 15096;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6streamC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8countrefC2Ev($1);
 $2 = 15024;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN6streamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8countrefD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6streamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6streamD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN16memoryReadStreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN16memoryReadStreamD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN16memoryReadStream4dumpEPvj($this,$ptr,$len) {
 $this = $this|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ptr;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($5) + ($6))|0;
 $8 = ((($3)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($3)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($3)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) - ($14))|0;
  $2 = $15;
 }
 $16 = $1;
 $17 = ((($3)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($3)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($18)|0);
 $22 = $2;
 _memcpy(($16|0),($21|0),($22|0))|0;
 $23 = $2;
 $24 = ((($3)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($23))|0;
 HEAP32[$24>>2] = $26;
 STACKTOP = sp;return;
}
function __ZN16memoryReadStream7seekcurEj($this,$offset) {
 $this = $this|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offset;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN16memoryReadStream7seeksetEj($this,$offset) {
 $this = $this|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offset;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN16memoryReadStream7seekendEj($this,$offset) {
 $this = $this|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offset;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 $7 = ((($2)) + 12|0);
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN16memoryReadStream4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN16memoryReadStream4tellEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6stream6isReadEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN6streamcvbEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN16memoryReadStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6streamD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4vec3C2Ef($this,$iv) {
 $this = $this|0;
 $iv = +$iv;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $iv;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 HEAPF32[$4>>2] = $3;
 $5 = ((($2)) + 4|0);
 HEAPF32[$5>>2] = $3;
 HEAPF32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN4vec2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseItNS_9allocatorItEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -2|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 2)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN12staticScene26vertexENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN12staticScene214staticMaterialENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -16|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZN12staticScene214staticMaterialD2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 16)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZN12staticScene214staticMaterialD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEED2Ev($2);
 __ZN6refptrI7textureED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN12staticScene210staticMeshENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN12staticScene210staticMeshENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -20|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 20)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN12staticScene212staticObjectENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -28|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZN12staticScene212staticObjectD2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 28)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZN12staticScene212staticObjectD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN12staticScene214staticInstanceENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN12staticScene214staticInstanceENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -64|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 64)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZN6refptrI7programEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN12baseresourceI7programLi512EE8tmanagerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10stringhashI7programLi512EEC2Ev($2);
 $3 = 14896;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10stringhashI7programLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 4096|0);
 $5 = $3;
 while(1) {
  __THREW__ = 0;
  invoke_vi(83,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 8;
   break;
  }
  $8 = ((($5)) + 8|0);
  $9 = ($8|0)==($4|0);
  if ($9) {
   break;
  } else {
   $5 = $8;
  }
 }
 if ((label|0) == 8) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $1 = $21;
  $2 = $22;
  $23 = ($3|0)==($5|0);
  if ($23) {
   $33 = $1;
   $34 = $2;
   ___resumeException($33|0);
   // unreachable;
  } else {
   $25 = $5;
  }
  while(1) {
   $24 = ((($25)) + -8|0);
   __ZN8duallinkD2Ev($24);
   $26 = ($24|0)==($3|0);
   if ($26) {
    break;
   } else {
    $25 = $24;
   }
  }
  $33 = $1;
  $34 = $2;
  ___resumeException($33|0);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(511);
  if (!($11)) {
   label = 11;
   break;
  }
  $12 = $i;
  $13 = (($3) + ($12<<3)|0);
  $14 = $i;
  $15 = (($14) + 1)|0;
  $16 = (($3) + ($15<<3)|0);
  __THREW__ = 0;
  invoke_vii(84,($13|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $1 = $27;
 $2 = $28;
 $29 = ((($3)) + 4096|0);
 $31 = $29;
 while(1) {
  $30 = ((($31)) + -8|0);
  __ZN8duallinkD2Ev($30);
  $32 = ($30|0)==($3|0);
  if ($32) {
   break;
  } else {
   $31 = $30;
  }
 }
 $33 = $1;
 $34 = $2;
 ___resumeException($33|0);
 // unreachable;
}
function __ZN12baseresourceI7programLi512EE8tmanager4vgetEPc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN12baseresourceI7programLi512EE8tmanager3getEPKc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN12baseresourceI7programLi512EE8tmanagerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10stringhashI7programLi512EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10stringhashI7programLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4096|0);
 $4 = $2;
 while(1) {
  $3 = ((($4)) + -8|0);
  __ZN8duallinkD2Ev($3);
  $5 = ($3|0)==($1|0);
  if ($5) {
   break;
  } else {
   $4 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10stringhashI7programLi512EE6searchEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN10stringhashI7programLi512EE8calchashEPKc($4)|0);
 $hash = $5;
 $6 = $hash;
 $7 = (($3) + ($6<<3)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $d = $9;
 while(1) {
  $10 = $d;
  $11 = ($10>>>0)>=($3>>>0);
  $12 = $d;
  $13 = ((($3)) + 4096|0);
  $14 = ($12>>>0)<($13>>>0);
  $15 = $11 ? $14 : 0;
  $16 = $15 ^ 1;
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $2;
  $18 = $d;
  $19 = ($18|0)==(0|0);
  $20 = ((($18)) + -8|0);
  $21 = $19 ? 0 : $20;
  $22 = ((($21)) + 16|0);
  $23 = (__ZNK5named7getnameEv($22)|0);
  $24 = (_strcmp($17,$23)|0);
  $25 = ($24|0)==(0);
  $26 = $d;
  if ($25) {
   label = 4;
   break;
  }
  $30 = ((($26)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $d = $31;
 }
 if ((label|0) == 4) {
  $27 = ($26|0)==(0|0);
  $28 = ((($26)) + -8|0);
  $29 = $27 ? 0 : $28;
  $0 = $29;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZN10stringhashI7programLi512EE8calchashEPKc($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $hash = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  $4 = $hash;
  if (!($3)) {
   break;
  }
  $5 = $4 << 4;
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($5) + ($8))|0;
  $hash = $9;
  $10 = $hash;
  $11 = $10 & -268435456;
  $g = $11;
  $12 = $g;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $g;
   $15 = $14 >>> 24;
   $16 = $hash;
   $17 = $16 ^ $15;
   $hash = $17;
  }
  $18 = $g;
  $19 = $18 ^ -1;
  $20 = $hash;
  $21 = $20 & $19;
  $hash = $21;
  $22 = $0;
  $23 = ((($22)) + 1|0);
  $0 = $23;
 }
 $24 = $4 & 511;
 STACKTOP = sp;return ($24|0);
}
function __ZN12baseresourceI7programLi512EE8tmanager9innerloadEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rtn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN12baseresourceI7programLi512EE10loadbynameEPNS1_8tmanagerEPKc($2,$3)|0);
 $rtn = $4;
 $5 = $rtn;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $9 = $rtn;
  STACKTOP = sp;return ($9|0);
 }
 $7 = ((($2)) + 4|0);
 $8 = $rtn;
 __ZN10stringhashI7programLi512EE6insertEPS0_($7,$8);
 $9 = $rtn;
 STACKTOP = sp;return ($9|0);
}
function __ZN12baseresourceI7programLi512EE10loadbynameEPNS1_8tmanagerEPKc($mgr,$filename) {
 $mgr = $mgr|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $der = 0, $r = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = $mgr;
 $1 = $filename;
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $r = $5;
 $6 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vi(190,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $2 = $22;
  $3 = $23;
  __ZdlPv($6);
  $24 = $2;
  $25 = $3;
  ___resumeException($24|0);
  // unreachable;
 } else {
  $der = $6;
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf((53048|0),($vararg_buffer|0))|0);
  $10 = $der;
  $11 = ((($10)) + 16|0);
  $12 = $1;
  __ZN5named7setnameEPKc($11,$12);
  $13 = $der;
  $14 = ((($13)) + 16|0);
  $15 = (__ZNK5named7getnameEv($14)|0);
  HEAP32[$vararg_buffer1>>2] = $15;
  (_printf((53048|0),($vararg_buffer1|0))|0);
  $16 = $der;
  $17 = ((($16)) + 16|0);
  __ZN12baseresourceI7programLi512EE8reloaderEv($17);
  $18 = $der;
  $19 = ((($18)) + 16|0);
  $20 = (__ZNK5named7getnameEv($19)|0);
  HEAP32[$vararg_buffer4>>2] = $20;
  (_printf((53048|0),($vararg_buffer4|0))|0);
  $21 = $der;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN7programC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8resourceI7program8countrefLi512EEC2Ev($3);
 $4 = 48680;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(191,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $1 = $12;
  $2 = $13;
  __ZN8resourceI7program8countrefLi512EED2Ev($3);
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
 $8 = ((($3)) + 24|0);
 __THREW__ = 0;
 invoke_vi(191,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = ((($3)) + 28|0);
  HEAP32[$11>>2] = 0;
  STACKTOP = sp;return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $1 = $14;
 $2 = $15;
 __ZN6refptrI6shaderED2Ev($5);
 __ZN8resourceI7program8countrefLi512EED2Ev($3);
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN8resourceI7program8countrefLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8countrefC2Ev($3);
 $4 = ((($3)) + 8|0);
 __THREW__ = 0;
 invoke_vi(83,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZN8countrefD2Ev($3);
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
 $7 = ((($3)) + 16|0);
 __THREW__ = 0;
 invoke_vi(192,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = 14752;
  HEAP32[$3>>2] = $10;
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 $15 = ((($3)) + 8|0);
 __ZN8duallinkD2Ev($15);
 __ZN8countrefD2Ev($3);
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN12baseresourceI7programLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5namedC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8resourceI7program8countrefLi512EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8resourceI7program8countrefLi512EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN6refptrI6shaderEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6refptrI6shaderED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $ptr1 = $4;
 HEAP32[$1>>2] = 0;
 $5 = $ptr1;
 __THREW__ = 0;
 invoke_vi(82,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8resourceI7program8countrefLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZN12baseresourceI7programLi512EED2Ev($2);
 $3 = ((($1)) + 8|0);
 __ZN8duallinkD2Ev($3);
 __ZN8countrefD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI7programLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5namedD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI7programLi512EE8reloaderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -16|0);
 $3 = (__ZNK5named7getnameEv($1)|0);
 __ZN7program6loaderEPKc($2,$3);
 STACKTOP = sp;return;
}
function __ZN10stringhashI7programLi512EE6insertEPS0_($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = (__ZNK5named7getnameEv($4)|0);
 $6 = (__ZN10stringhashI7programLi512EE8calchashEPKc($5)|0);
 $hash = $6;
 $7 = $hash;
 $8 = (($2) + ($7<<3)|0);
 $9 = $1;
 $10 = ($9|0)==(0|0);
 $11 = ((($9)) + 8|0);
 $12 = $10 ? 0 : $11;
 __ZN8duallink10insertbackEPS_($8,$12);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI7textureLi512EE8tmanagerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10stringhashI7textureLi512EEC2Ev($2);
 $3 = 14624;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10stringhashI7textureLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 4096|0);
 $5 = $3;
 while(1) {
  __THREW__ = 0;
  invoke_vi(83,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 8;
   break;
  }
  $8 = ((($5)) + 8|0);
  $9 = ($8|0)==($4|0);
  if ($9) {
   break;
  } else {
   $5 = $8;
  }
 }
 if ((label|0) == 8) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $1 = $21;
  $2 = $22;
  $23 = ($3|0)==($5|0);
  if ($23) {
   $33 = $1;
   $34 = $2;
   ___resumeException($33|0);
   // unreachable;
  } else {
   $25 = $5;
  }
  while(1) {
   $24 = ((($25)) + -8|0);
   __ZN8duallinkD2Ev($24);
   $26 = ($24|0)==($3|0);
   if ($26) {
    break;
   } else {
    $25 = $24;
   }
  }
  $33 = $1;
  $34 = $2;
  ___resumeException($33|0);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(511);
  if (!($11)) {
   label = 11;
   break;
  }
  $12 = $i;
  $13 = (($3) + ($12<<3)|0);
  $14 = $i;
  $15 = (($14) + 1)|0;
  $16 = (($3) + ($15<<3)|0);
  __THREW__ = 0;
  invoke_vii(84,($13|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $1 = $27;
 $2 = $28;
 $29 = ((($3)) + 4096|0);
 $31 = $29;
 while(1) {
  $30 = ((($31)) + -8|0);
  __ZN8duallinkD2Ev($30);
  $32 = ($30|0)==($3|0);
  if ($32) {
   break;
  } else {
   $31 = $30;
  }
 }
 $33 = $1;
 $34 = $2;
 ___resumeException($33|0);
 // unreachable;
}
function __ZN12baseresourceI7textureLi512EE8tmanager4vgetEPc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN12baseresourceI7textureLi512EE8tmanager3getEPKc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN12baseresourceI7textureLi512EE8tmanagerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10stringhashI7textureLi512EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10stringhashI7textureLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4096|0);
 $4 = $2;
 while(1) {
  $3 = ((($4)) + -8|0);
  __ZN8duallinkD2Ev($3);
  $5 = ($3|0)==($1|0);
  if ($5) {
   break;
  } else {
   $4 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10stringhashI7textureLi512EE6searchEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN10stringhashI7textureLi512EE8calchashEPKc($4)|0);
 $hash = $5;
 $6 = $hash;
 $7 = (($3) + ($6<<3)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $d = $9;
 while(1) {
  $10 = $d;
  $11 = ($10>>>0)>=($3>>>0);
  $12 = $d;
  $13 = ((($3)) + 4096|0);
  $14 = ($12>>>0)<($13>>>0);
  $15 = $11 ? $14 : 0;
  $16 = $15 ^ 1;
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $2;
  $18 = $d;
  $19 = ($18|0)==(0|0);
  $20 = ((($18)) + -8|0);
  $21 = $19 ? 0 : $20;
  $22 = ((($21)) + 16|0);
  $23 = (__ZNK5named7getnameEv($22)|0);
  $24 = (_strcmp($17,$23)|0);
  $25 = ($24|0)==(0);
  $26 = $d;
  if ($25) {
   label = 4;
   break;
  }
  $30 = ((($26)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $d = $31;
 }
 if ((label|0) == 4) {
  $27 = ($26|0)==(0|0);
  $28 = ((($26)) + -8|0);
  $29 = $27 ? 0 : $28;
  $0 = $29;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZN10stringhashI7textureLi512EE8calchashEPKc($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $hash = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  $4 = $hash;
  if (!($3)) {
   break;
  }
  $5 = $4 << 4;
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($5) + ($8))|0;
  $hash = $9;
  $10 = $hash;
  $11 = $10 & -268435456;
  $g = $11;
  $12 = $g;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $g;
   $15 = $14 >>> 24;
   $16 = $hash;
   $17 = $16 ^ $15;
   $hash = $17;
  }
  $18 = $g;
  $19 = $18 ^ -1;
  $20 = $hash;
  $21 = $20 & $19;
  $hash = $21;
  $22 = $0;
  $23 = ((($22)) + 1|0);
  $0 = $23;
 }
 $24 = $4 & 511;
 STACKTOP = sp;return ($24|0);
}
function __ZN12baseresourceI7textureLi512EE8tmanager9innerloadEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rtn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN12baseresourceI7textureLi512EE10loadbynameEPNS1_8tmanagerEPKc($2,$3)|0);
 $rtn = $4;
 $5 = $rtn;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $9 = $rtn;
  STACKTOP = sp;return ($9|0);
 }
 $7 = ((($2)) + 4|0);
 $8 = $rtn;
 __ZN10stringhashI7textureLi512EE6insertEPS0_($7,$8);
 $9 = $rtn;
 STACKTOP = sp;return ($9|0);
}
function __ZN12baseresourceI7textureLi512EE10loadbynameEPNS1_8tmanagerEPKc($mgr,$filename) {
 $mgr = $mgr|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $der = 0, $r = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = $mgr;
 $1 = $filename;
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $r = $5;
 $6 = (__Znwj(28)|0);
 __THREW__ = 0;
 invoke_vi(193,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $2 = $22;
  $3 = $23;
  __ZdlPv($6);
  $24 = $2;
  $25 = $3;
  ___resumeException($24|0);
  // unreachable;
 } else {
  $der = $6;
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf((53048|0),($vararg_buffer|0))|0);
  $10 = $der;
  $11 = ((($10)) + 16|0);
  $12 = $1;
  __ZN5named7setnameEPKc($11,$12);
  $13 = $der;
  $14 = ((($13)) + 16|0);
  $15 = (__ZNK5named7getnameEv($14)|0);
  HEAP32[$vararg_buffer1>>2] = $15;
  (_printf((53048|0),($vararg_buffer1|0))|0);
  $16 = $der;
  $17 = ((($16)) + 16|0);
  __ZN12baseresourceI7textureLi512EE8reloaderEv($17);
  $18 = $der;
  $19 = ((($18)) + 16|0);
  $20 = (__ZNK5named7getnameEv($19)|0);
  HEAP32[$vararg_buffer4>>2] = $20;
  (_printf((53048|0),($vararg_buffer4|0))|0);
  $21 = $der;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN12baseresourceI7textureLi512EE8reloaderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -16|0);
 $3 = ((($2)) + 16|0);
 $4 = (__ZNK5named7getnameEv($1)|0);
 __ZN12baseresourceI7textureLi512EE6loaderEPKc($3,$4);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI7textureLi512EE6loaderEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buffer = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 16|0;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = HEAP32[48280>>2]|0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 (_sprintf($buffer,14608,$vararg_buffer)|0);
 $5 = ((($2)) + -16|0);
 __ZN7texture14loadByFullNameEPKc($5,$buffer);
 STACKTOP = sp;return;
}
function __ZN10stringhashI7textureLi512EE6insertEPS0_($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = (__ZNK5named7getnameEv($4)|0);
 $6 = (__ZN10stringhashI7textureLi512EE8calchashEPKc($5)|0);
 $hash = $6;
 $7 = $hash;
 $8 = (($2) + ($7<<3)|0);
 $9 = $1;
 $10 = ($9|0)==(0|0);
 $11 = ((($9)) + 8|0);
 $12 = $10 ? 0 : $11;
 __ZN8duallink10insertbackEPS_($8,$12);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 28|0;
 $__v = sp + 56|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 28)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 28)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 28)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 28)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN12staticScene212staticObjectERNS_9allocatorIS2_EEEC2EjjS5_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(194,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene212staticObjectERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(195,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene212staticObjectERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN12staticScene212staticObjectERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;HEAP32[$27+16>>2]=0|0;HEAP32[$27+20>>2]=0|0;HEAP32[$27+24>>2]=0|0;
  __ZN12staticScene212staticObjectC2Ev($27);
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 28|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN12staticScene212staticObjectC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $6 = sp + 12|0;
 $10 = $this;
 $11 = $10;
 __ZN12staticScene216staticObjectBaseC2Ev($11);
 $12 = ((($11)) + 16|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN12staticScene216staticObjectBaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4vec4C2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 153391689;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN12staticScene212staticObjectERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*28)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*28)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*28)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene212staticObjectERNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;HEAP32[$29+16>>2]=0|0;HEAP32[$29+20>>2]=0|0;HEAP32[$29+24>>2]=0|0;
  __ZN12staticScene212staticObjectC2Ev($29);
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 28|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -28|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -28|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN12staticScene212staticObjectC2EOS0_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -28|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 28)&-1;
 __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 28)&-1;
 $39 = (($26) + (($38*28)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 28)&-1;
 $51 = (($42) + (($50*28)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 28)&-1;
 $67 = (($54) + (($66*28)|0)|0);
 __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN12staticScene212staticObjectC2EOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 92|0;
 $6 = sp;
 $9 = sp + 108|0;
 $10 = sp + 125|0;
 $11 = sp + 8|0;
 $15 = sp + 124|0;
 $31 = $this;
 $32 = $0;
 $33 = $31;
 $34 = $32;
 ;HEAP32[$33>>2]=HEAP32[$34>>2]|0;HEAP32[$33+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$33+12>>2]=HEAP32[$34+12>>2]|0;
 $35 = ((($33)) + 16|0);
 $36 = $32;
 $37 = ((($36)) + 16|0);
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 $28 = $39;
 $40 = $28;
 $41 = ((($40)) + 8|0);
 $27 = $41;
 $42 = $27;
 $26 = $42;
 $43 = $26;
 $25 = $43;
 $44 = $25;
 $13 = $38;
 $14 = $44;
 $45 = $13;
 $12 = $45;
 HEAP32[$45>>2] = 0;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($45)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $47;
 HEAP32[$9>>2] = 0;
 $48 = $8;
 $7 = $9;
 $49 = $7;
 $50 = HEAP32[$49>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $48;
 HEAP32[$5>>2] = $50;
 $51 = $4;
 $3 = $6;
 $2 = $5;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$51>>2] = $53;
 $54 = $30;
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$38>>2] = $55;
 $56 = $30;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($38)) + 4|0);
 HEAP32[$59>>2] = $58;
 $60 = $30;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $21 = $38;
 $66 = $21;
 $67 = ((($66)) + 8|0);
 $20 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 HEAP32[$69>>2] = $65;
 $70 = $30;
 $24 = $70;
 $71 = $24;
 $72 = ((($71)) + 8|0);
 $23 = $72;
 $73 = $23;
 $22 = $73;
 $74 = $22;
 HEAP32[$74>>2] = 0;
 $75 = $30;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = 0;
 $77 = $30;
 HEAP32[$77>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 28)&-1;
 $39 = (($26) + (($38*28)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 28)&-1;
 $55 = (($42) + (($54*28)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*28)|0)|0);
 __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene212staticObjectERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -28|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN12staticScene212staticObjectD2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 28)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 28)&-1;
 $35 = (($22) + (($34*28)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*28)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 28)&-1;
 $52 = (($43) + (($51*28)|0)|0);
 __ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZN6stream5dumptIjEEvRT_($this,$dest) {
 $this = $this|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $dest;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 FUNCTION_TABLE_viii[$5 & 511]($2,$6,4);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 64)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<6)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 64)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -64|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(196,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 28|0;
 $__v = sp + 56|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 64)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 64)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 64)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 64)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN12staticScene214staticInstanceERNS_9allocatorIS2_EEEC2EjjS5_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(197,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene214staticInstanceERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(198,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene214staticInstanceERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN12staticScene214staticInstanceERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  dest=$27; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __ZN12staticScene214staticInstanceC2Ev($27);
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 64|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN12staticScene214staticInstanceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9float4x3aC2Ev($1);
 $2 = ((($1)) + 48|0);
 __ZN4vec4C2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 67108863;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN12staticScene214staticInstanceERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<6;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<6)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<6)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene214staticInstanceERNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  dest=$29; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __ZN12staticScene214staticInstanceC2Ev($29);
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 64|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 12|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 64)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<6)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<6;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 64)&-1;
 __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 64)&-1;
 $39 = (($26) + ($38<<6)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 64)&-1;
 $51 = (($42) + ($50<<6)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 64)&-1;
 $67 = (($54) + ($66<<6)|0);
 __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 64)&-1;
 $39 = (($26) + ($38<<6)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 64)&-1;
 $55 = (($42) + ($54<<6)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<6)|0);
 __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene214staticInstanceERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -64|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 64)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 64)&-1;
 $35 = (($22) + ($34<<6)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<6)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 64)&-1;
 $52 = (($43) + ($51<<6)|0);
 __ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 28|0;
 $__v = sp + 56|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 16)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 16)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 16)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 16)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN12staticScene214staticMaterialERNS_9allocatorIS2_EEEC2EjjS5_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(199,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene214staticMaterialERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(200,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene214staticMaterialERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN12staticScene214staticMaterialERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;
  __ZN12staticScene214staticMaterialC2Ev($27);
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 16|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN12staticScene214staticMaterialC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $6 = sp + 12|0;
 $10 = $this;
 $11 = $10;
 __ZN6refptrI7textureEC2Ev($11);
 $12 = ((($11)) + 4|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 268435455;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN12staticScene214staticMaterialERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<4;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<4)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<4)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene214staticMaterialERNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;
  __ZN12staticScene214staticMaterialC2Ev($29);
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 16|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -16|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -16|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN12staticScene214staticMaterialC2ERKS0_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -16|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 16)&-1;
 __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN12staticScene214staticMaterialC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $5 = $1;
 $6 = $2;
 __ZN6refptrI7textureEC2ERKS1_($5,$6);
 $7 = ((($5)) + 4|0);
 $8 = $2;
 $9 = ((($8)) + 4|0);
 __THREW__ = 0;
 invoke_vii(201,($7|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $3 = $12;
  $4 = $13;
  __ZN6refptrI7textureED2Ev($5);
  $14 = $3;
  $15 = $4;
  ___resumeException($14|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6refptrI7textureEC2ERKS1_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK6refptrI7textureEcvPS0_Ev($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$2>>2]|0;
 __ZN8countref3refEv($7);
 STACKTOP = sp;return;
}
function __ZNK6refptrI7textureEcvPS0_Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 100|0;
 $10 = sp + 108|0;
 $11 = sp;
 $15 = sp + 110|0;
 $17 = sp + 8|0;
 $19 = sp + 111|0;
 $25 = sp + 109|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 20)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(202,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN12staticScene210staticMeshENS_9allocatorIS2_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(203,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN12staticScene210staticMeshENS_9allocatorIS2_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = ($25*20)|0;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = ((($14)) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + (($31*20)|0)|0);
  $2 = $14;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 214748364;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 20)&-1;
 $39 = (($26) + (($38*20)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 20)&-1;
 $55 = (($42) + (($54*20)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*20)|0)|0);
 __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  ;HEAP32[$42>>2]=HEAP32[$44>>2]|0;HEAP32[$42+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$44+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[$44+12>>2]|0;HEAP32[$42+16>>2]=HEAP32[$44+16>>2]|0;
  __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 20|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 20|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene214staticMaterialERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -16|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN12staticScene214staticMaterialD2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 16)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 16)&-1;
 $35 = (($22) + ($34<<4)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<4)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 16)&-1;
 $52 = (($43) + ($51<<4)|0);
 __ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZN6stream5dumptIhEEvRT_($this,$dest) {
 $this = $this|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $dest;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 FUNCTION_TABLE_viii[$5 & 511]($2,$6,1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 20)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*20)|0)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 20)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -20|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(204,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 28|0;
 $__v = sp + 56|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 20)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 20)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 20)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 20)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN12staticScene210staticMeshERNS_9allocatorIS2_EEEC2EjjS5_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(205,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene210staticMeshERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(206,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene210staticMeshERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN12staticScene210staticMeshERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;HEAP32[$27+16>>2]=0|0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 20|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene210staticMeshERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*20)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*20)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*20)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene210staticMeshERNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;HEAP32[$29+16>>2]=0|0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 20|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 12|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 20)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*20)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*20)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 20)&-1;
 __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 20)&-1;
 $39 = (($26) + (($38*20)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 20)&-1;
 $51 = (($42) + (($50*20)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 20)&-1;
 $67 = (($54) + (($66*20)|0)|0);
 __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene210staticMeshERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -20|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 20)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 20)&-1;
 $35 = (($22) + (($34*20)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*20)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 20)&-1;
 $52 = (($43) + (($51*20)|0)|0);
 __ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 12)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*12)|0)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 12)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(207,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 28|0;
 $__v = sp + 56|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 12)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 12)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 12)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 12)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN12staticScene26vertexERNS_9allocatorIS2_EEEC2EjjS5_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(208,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene26vertexERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(209,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene26vertexERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN12staticScene26vertexERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  ;HEAP16[$27>>1]=0|0;HEAP16[$27+2>>1]=0|0;HEAP16[$27+4>>1]=0|0;HEAP16[$27+6>>1]=0|0;HEAP16[$27+8>>1]=0|0;HEAP16[$27+10>>1]=0|0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 12|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN12staticScene26vertexERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene26vertexERNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  ;HEAP16[$29>>1]=0|0;HEAP16[$29+2>>1]=0|0;HEAP16[$29+4>>1]=0|0;HEAP16[$29+6>>1]=0|0;HEAP16[$29+8>>1]=0|0;HEAP16[$29+10>>1]=0|0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 12|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 12|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 12)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*12)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*12)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 12)&-1;
 __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene26vertexERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 12)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 2)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorItNS_9allocatorItEEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<1)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 2)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -2|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(210,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorItNS_9allocatorItEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 28|0;
 $__v = sp + 56|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 2)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorItNS_9allocatorItEEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 2)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorItNS_9allocatorItEEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 2)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 2)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferItRNS_9allocatorItEEEC2EjjS3_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(211,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferItRNS_9allocatorItEEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(212,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferItRNS_9allocatorItEEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferItRNS_9allocatorItEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorItNS_9allocatorItEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  HEAP16[$27>>1] = 0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 2|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorItNS_9allocatorItEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 2147483647;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferItRNS_9allocatorItEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<1;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<1)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<1)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferItRNS_9allocatorItEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  HEAP16[$29>>1] = 0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 2|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEE26__swap_out_circular_bufferERNS_14__split_bufferItRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 12|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorItNS_9allocatorItEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 2)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<1)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<1;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 2)&-1;
 __ZNKSt3__16vectorItNS_9allocatorItEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 2)&-1;
 $39 = (($26) + ($38<<1)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 2)&-1;
 $51 = (($42) + ($50<<1)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 2)&-1;
 $67 = (($54) + ($66<<1)|0);
 __ZNKSt3__16vectorItNS_9allocatorItEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 2)&-1;
 $39 = (($26) + ($38<<1)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 2)&-1;
 $55 = (($42) + ($54<<1)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<1)|0);
 __ZNKSt3__16vectorItNS_9allocatorItEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferItRNS_9allocatorItEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -2|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 2)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 2)&-1;
 $35 = (($22) + ($34<<1)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<1)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 2)&-1;
 $52 = (($43) + ($51<<1)|0);
 __ZNKSt3__16vectorItNS_9allocatorItEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 28|0;
 $__v = sp + 56|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 16)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 16)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 16)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 16)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN12staticScene29material2ERNS_9allocatorIS2_EEEC2EjjS5_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(213,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene29material2ERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(214,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN12staticScene29material2ERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN12staticScene29material2ERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;
  __ZN12staticScene29material2C2Ev($27);
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 16|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZN12staticScene29material2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6refptrI7textureEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 32|0;
 $19 = sp + 36|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 268435455;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN12staticScene29material2ERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 4|0;
 $20 = sp + 24|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<4;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<4)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<4)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene29material2ERNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;
  __ZN12staticScene29material2C2Ev($29);
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 16|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -16|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -16|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN12staticScene29material2C2ERKS0_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -16|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 16)&-1;
 __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN12staticScene29material2C2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN6refptrI7textureEC2ERKS1_($3,$4);
 $5 = ((($3)) + 4|0);
 $6 = $2;
 $7 = ((($6)) + 4|0);
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN12staticScene29material2ERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -16|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN12staticScene29material2D2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 16)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 16)&-1;
 $35 = (($22) + ($34<<4)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<4)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 16)&-1;
 $52 = (($43) + ($51<<4)|0);
 __ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZN9peaceText10appendTextEssPcii($this,$x,$y,$buffer,$scalex,$scaley) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $buffer = $buffer|0;
 $scalex = $scalex|0;
 $scaley = $scaley|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $it = 0, $key = 0, $ox = 0, $vert = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $120 = sp + 204|0;
 $122 = sp + 212|0;
 $124 = sp + 220|0;
 $127 = sp + 232|0;
 $130 = sp + 244|0;
 $key = sp + 568|0;
 $it = sp + 272|0;
 $137 = sp + 276|0;
 $131 = $this;
 $132 = $x;
 $133 = $y;
 $134 = $buffer;
 $135 = $scalex;
 $136 = $scaley;
 $138 = $131;
 $139 = $132;
 $140 = $139 << 16 >> 16;
 $141 = $140<<4;
 $142 = $141&65535;
 $132 = $142;
 $143 = $133;
 $144 = $143 << 16 >> 16;
 $145 = $144<<4;
 $146 = $145&65535;
 $133 = $146;
 $147 = $132;
 $148 = $147 << 16 >> 16;
 $ox = $148;
 $i = 0;
 while(1) {
  $149 = $i;
  $150 = $134;
  $151 = (($150) + ($149)|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = ($152<<24>>24)!=(0);
  if (!($153)) {
   break;
  }
  $154 = $i;
  $155 = $134;
  $156 = (($155) + ($154)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = $157 << 24 >> 24;
  $159 = HEAPU8[$key>>0]|(HEAPU8[$key+1>>0]<<8)|(HEAPU8[$key+2>>0]<<16)|(HEAPU8[$key+3>>0]<<24);
  $160 = $158 & 65535;
  $161 = $159 & -65536;
  $162 = $161 | $160;
  HEAP8[$key>>0]=$162&255;HEAP8[$key+1>>0]=($162>>8)&255;HEAP8[$key+2>>0]=($162>>16)&255;HEAP8[$key+3>>0]=$162>>24;
  $128 = $138;
  $129 = $key;
  $163 = $128;
  $164 = $129;
  $165 = (__ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE4findIS1_EENS_15__hash_iteratorIPNS_11__hash_nodeIS1_PvEEEERKT_($163,$164)|0);
  HEAP32[$130>>2] = $165;
  $125 = $127;
  $126 = $130;
  $166 = $125;
  $167 = $126;
  $168 = HEAP32[$167>>2]|0;
  HEAP32[$166>>2] = $168;
  $169 = HEAP32[$127>>2]|0;
  HEAP32[$it>>2] = $169;
  $123 = $138;
  $170 = $123;
  $121 = $170;
  $118 = $120;
  $119 = 0;
  $171 = $118;
  $172 = $119;
  HEAP32[$171>>2] = $172;
  $173 = HEAP32[$120>>2]|0;
  HEAP32[$124>>2] = $173;
  $116 = $122;
  $117 = $124;
  $174 = $116;
  $175 = $117;
  $176 = HEAP32[$175>>2]|0;
  HEAP32[$174>>2] = $176;
  $177 = HEAP32[$122>>2]|0;
  HEAP32[$137>>2] = $177;
  $0 = $it;
  $1 = $137;
  $178 = $0;
  $179 = HEAP32[$178>>2]|0;
  $180 = $1;
  $181 = HEAP32[$180>>2]|0;
  $182 = ($179|0)==($181|0);
  if (!($182)) {
   $183 = ((($138)) + 44|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $184<<2;
   $186 = (15192 + ($185<<3)|0);
   $vert = $186;
   $187 = $132;
   $188 = $187 << 16 >> 16;
   $4 = $it;
   $189 = $4;
   $190 = HEAP32[$189>>2]|0;
   $191 = ((($190)) + 8|0);
   $3 = $191;
   $192 = $3;
   $2 = $192;
   $193 = $2;
   $194 = HEAPU8[$193>>0]|(HEAPU8[$193+1>>0]<<8)|(HEAPU8[$193+2>>0]<<16)|(HEAPU8[$193+3>>0]<<24);
   $195 = $194 >>> 16;
   $196 = $195 & 31;
   $197 = $135;
   $198 = Math_imul($196, $197)|0;
   $199 = (($188) + ($198))|0;
   $200 = $199&65535;
   $201 = $vert;
   HEAP16[$201>>1] = $200;
   $202 = $133;
   $203 = $202 << 16 >> 16;
   $7 = $it;
   $204 = $7;
   $205 = HEAP32[$204>>2]|0;
   $206 = ((($205)) + 8|0);
   $6 = $206;
   $207 = $6;
   $5 = $207;
   $208 = $5;
   $209 = HEAPU8[$208>>0]|(HEAPU8[$208+1>>0]<<8)|(HEAPU8[$208+2>>0]<<16)|(HEAPU8[$208+3>>0]<<24);
   $210 = $209 >>> 21;
   $211 = $210 & 31;
   $212 = $136;
   $213 = Math_imul($211, $212)|0;
   $214 = (($203) + ($213))|0;
   $215 = $214&65535;
   $216 = $vert;
   $217 = ((($216)) + 2|0);
   HEAP16[$217>>1] = $215;
   $10 = $it;
   $218 = $10;
   $219 = HEAP32[$218>>2]|0;
   $220 = ((($219)) + 8|0);
   $9 = $220;
   $221 = $9;
   $8 = $221;
   $222 = $8;
   $223 = ((($222)) + 4|0);
   $224 = HEAPU8[$223>>0]|(HEAPU8[$223+1>>0]<<8)|(HEAPU8[$223+2>>0]<<16)|(HEAPU8[$223+3>>0]<<24);
   $225 = $224 & 4095;
   $226 = $225&65535;
   $227 = $vert;
   $228 = ((($227)) + 4|0);
   HEAP16[$228>>1] = $226;
   $13 = $it;
   $229 = $13;
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($230)) + 8|0);
   $12 = $231;
   $232 = $12;
   $11 = $232;
   $233 = $11;
   $234 = ((($233)) + 4|0);
   $235 = HEAPU8[$234>>0]|(HEAPU8[$234+1>>0]<<8)|(HEAPU8[$234+2>>0]<<16)|(HEAPU8[$234+3>>0]<<24);
   $236 = $235 >>> 12;
   $237 = $236 & 1023;
   $238 = $237&65535;
   $239 = $vert;
   $240 = ((($239)) + 6|0);
   HEAP16[$240>>1] = $238;
   $241 = $vert;
   $242 = ((($241)) + 8|0);
   $vert = $242;
   $243 = $132;
   $244 = $243 << 16 >> 16;
   $16 = $it;
   $245 = $16;
   $246 = HEAP32[$245>>2]|0;
   $247 = ((($246)) + 8|0);
   $15 = $247;
   $248 = $15;
   $14 = $248;
   $249 = $14;
   $250 = HEAPU8[$249>>0]|(HEAPU8[$249+1>>0]<<8)|(HEAPU8[$249+2>>0]<<16)|(HEAPU8[$249+3>>0]<<24);
   $251 = $250 >>> 16;
   $252 = $251 & 31;
   $19 = $it;
   $253 = $19;
   $254 = HEAP32[$253>>2]|0;
   $255 = ((($254)) + 8|0);
   $18 = $255;
   $256 = $18;
   $17 = $256;
   $257 = $17;
   $258 = ((($257)) + 4|0);
   $259 = HEAPU8[$258>>0]|(HEAPU8[$258+1>>0]<<8)|(HEAPU8[$258+2>>0]<<16)|(HEAPU8[$258+3>>0]<<24);
   $260 = $259 >>> 22;
   $261 = $260 & 31;
   $262 = (($252) + ($261))|0;
   $263 = $135;
   $264 = Math_imul($262, $263)|0;
   $265 = (($244) + ($264))|0;
   $266 = $265&65535;
   $267 = $vert;
   HEAP16[$267>>1] = $266;
   $268 = $133;
   $269 = $268 << 16 >> 16;
   $22 = $it;
   $270 = $22;
   $271 = HEAP32[$270>>2]|0;
   $272 = ((($271)) + 8|0);
   $21 = $272;
   $273 = $21;
   $20 = $273;
   $274 = $20;
   $275 = HEAPU8[$274>>0]|(HEAPU8[$274+1>>0]<<8)|(HEAPU8[$274+2>>0]<<16)|(HEAPU8[$274+3>>0]<<24);
   $276 = $275 >>> 21;
   $277 = $276 & 31;
   $278 = $136;
   $279 = Math_imul($277, $278)|0;
   $280 = (($269) + ($279))|0;
   $281 = $280&65535;
   $282 = $vert;
   $283 = ((($282)) + 2|0);
   HEAP16[$283>>1] = $281;
   $25 = $it;
   $284 = $25;
   $285 = HEAP32[$284>>2]|0;
   $286 = ((($285)) + 8|0);
   $24 = $286;
   $287 = $24;
   $23 = $287;
   $288 = $23;
   $289 = HEAPU8[$288>>0]|(HEAPU8[$288+1>>0]<<8)|(HEAPU8[$288+2>>0]<<16)|(HEAPU8[$288+3>>0]<<24);
   $290 = $289 >>> 31;
   $291 = ($290|0)!=(0);
   if ($291) {
    $37 = $it;
    $325 = $37;
    $326 = HEAP32[$325>>2]|0;
    $327 = ((($326)) + 8|0);
    $36 = $327;
    $328 = $36;
    $35 = $328;
    $329 = $35;
    $330 = ((($329)) + 4|0);
    $331 = HEAPU8[$330>>0]|(HEAPU8[$330+1>>0]<<8)|(HEAPU8[$330+2>>0]<<16)|(HEAPU8[$330+3>>0]<<24);
    $332 = $331 & 4095;
    $333 = $332&65535;
    $334 = $vert;
    $335 = ((($334)) + 4|0);
    HEAP16[$335>>1] = $333;
    $40 = $it;
    $336 = $40;
    $337 = HEAP32[$336>>2]|0;
    $338 = ((($337)) + 8|0);
    $39 = $338;
    $339 = $39;
    $38 = $339;
    $340 = $38;
    $341 = ((($340)) + 4|0);
    $342 = HEAPU8[$341>>0]|(HEAPU8[$341+1>>0]<<8)|(HEAPU8[$341+2>>0]<<16)|(HEAPU8[$341+3>>0]<<24);
    $343 = $342 >>> 12;
    $344 = $343 & 1023;
    $43 = $it;
    $345 = $43;
    $346 = HEAP32[$345>>2]|0;
    $347 = ((($346)) + 8|0);
    $42 = $347;
    $348 = $42;
    $41 = $348;
    $349 = $41;
    $350 = ((($349)) + 4|0);
    $351 = HEAPU8[$350>>0]|(HEAPU8[$350+1>>0]<<8)|(HEAPU8[$350+2>>0]<<16)|(HEAPU8[$350+3>>0]<<24);
    $352 = $351 >>> 22;
    $353 = $352 & 31;
    $354 = (($344) + ($353))|0;
    $355 = $354&65535;
    $356 = $vert;
    $357 = ((($356)) + 6|0);
    HEAP16[$357>>1] = $355;
   } else {
    $28 = $it;
    $292 = $28;
    $293 = HEAP32[$292>>2]|0;
    $294 = ((($293)) + 8|0);
    $27 = $294;
    $295 = $27;
    $26 = $295;
    $296 = $26;
    $297 = ((($296)) + 4|0);
    $298 = HEAPU8[$297>>0]|(HEAPU8[$297+1>>0]<<8)|(HEAPU8[$297+2>>0]<<16)|(HEAPU8[$297+3>>0]<<24);
    $299 = $298 & 4095;
    $31 = $it;
    $300 = $31;
    $301 = HEAP32[$300>>2]|0;
    $302 = ((($301)) + 8|0);
    $30 = $302;
    $303 = $30;
    $29 = $303;
    $304 = $29;
    $305 = ((($304)) + 4|0);
    $306 = HEAPU8[$305>>0]|(HEAPU8[$305+1>>0]<<8)|(HEAPU8[$305+2>>0]<<16)|(HEAPU8[$305+3>>0]<<24);
    $307 = $306 >>> 22;
    $308 = $307 & 31;
    $309 = (($299) + ($308))|0;
    $310 = $309&65535;
    $311 = $vert;
    $312 = ((($311)) + 4|0);
    HEAP16[$312>>1] = $310;
    $34 = $it;
    $313 = $34;
    $314 = HEAP32[$313>>2]|0;
    $315 = ((($314)) + 8|0);
    $33 = $315;
    $316 = $33;
    $32 = $316;
    $317 = $32;
    $318 = ((($317)) + 4|0);
    $319 = HEAPU8[$318>>0]|(HEAPU8[$318+1>>0]<<8)|(HEAPU8[$318+2>>0]<<16)|(HEAPU8[$318+3>>0]<<24);
    $320 = $319 >>> 12;
    $321 = $320 & 1023;
    $322 = $321&65535;
    $323 = $vert;
    $324 = ((($323)) + 6|0);
    HEAP16[$324>>1] = $322;
   }
   $358 = $vert;
   $359 = ((($358)) + 8|0);
   $vert = $359;
   $360 = $132;
   $361 = $360 << 16 >> 16;
   $46 = $it;
   $362 = $46;
   $363 = HEAP32[$362>>2]|0;
   $364 = ((($363)) + 8|0);
   $45 = $364;
   $365 = $45;
   $44 = $365;
   $366 = $44;
   $367 = HEAPU8[$366>>0]|(HEAPU8[$366+1>>0]<<8)|(HEAPU8[$366+2>>0]<<16)|(HEAPU8[$366+3>>0]<<24);
   $368 = $367 >>> 16;
   $369 = $368 & 31;
   $370 = $135;
   $371 = Math_imul($369, $370)|0;
   $372 = (($361) + ($371))|0;
   $373 = $372&65535;
   $374 = $vert;
   HEAP16[$374>>1] = $373;
   $375 = $133;
   $376 = $375 << 16 >> 16;
   $49 = $it;
   $377 = $49;
   $378 = HEAP32[$377>>2]|0;
   $379 = ((($378)) + 8|0);
   $48 = $379;
   $380 = $48;
   $47 = $380;
   $381 = $47;
   $382 = HEAPU8[$381>>0]|(HEAPU8[$381+1>>0]<<8)|(HEAPU8[$381+2>>0]<<16)|(HEAPU8[$381+3>>0]<<24);
   $383 = $382 >>> 21;
   $384 = $383 & 31;
   $52 = $it;
   $385 = $52;
   $386 = HEAP32[$385>>2]|0;
   $387 = ((($386)) + 8|0);
   $51 = $387;
   $388 = $51;
   $50 = $388;
   $389 = $50;
   $390 = ((($389)) + 4|0);
   $391 = HEAPU8[$390>>0]|(HEAPU8[$390+1>>0]<<8)|(HEAPU8[$390+2>>0]<<16)|(HEAPU8[$390+3>>0]<<24);
   $392 = $391 >>> 27;
   $393 = (($384) + ($392))|0;
   $394 = $136;
   $395 = Math_imul($393, $394)|0;
   $396 = (($376) + ($395))|0;
   $397 = $396&65535;
   $398 = $vert;
   $399 = ((($398)) + 2|0);
   HEAP16[$399>>1] = $397;
   $55 = $it;
   $400 = $55;
   $401 = HEAP32[$400>>2]|0;
   $402 = ((($401)) + 8|0);
   $54 = $402;
   $403 = $54;
   $53 = $403;
   $404 = $53;
   $405 = HEAPU8[$404>>0]|(HEAPU8[$404+1>>0]<<8)|(HEAPU8[$404+2>>0]<<16)|(HEAPU8[$404+3>>0]<<24);
   $406 = $405 >>> 31;
   $407 = ($406|0)!=(0);
   if ($407) {
    $67 = $it;
    $440 = $67;
    $441 = HEAP32[$440>>2]|0;
    $442 = ((($441)) + 8|0);
    $66 = $442;
    $443 = $66;
    $65 = $443;
    $444 = $65;
    $445 = ((($444)) + 4|0);
    $446 = HEAPU8[$445>>0]|(HEAPU8[$445+1>>0]<<8)|(HEAPU8[$445+2>>0]<<16)|(HEAPU8[$445+3>>0]<<24);
    $447 = $446 & 4095;
    $70 = $it;
    $448 = $70;
    $449 = HEAP32[$448>>2]|0;
    $450 = ((($449)) + 8|0);
    $69 = $450;
    $451 = $69;
    $68 = $451;
    $452 = $68;
    $453 = ((($452)) + 4|0);
    $454 = HEAPU8[$453>>0]|(HEAPU8[$453+1>>0]<<8)|(HEAPU8[$453+2>>0]<<16)|(HEAPU8[$453+3>>0]<<24);
    $455 = $454 >>> 27;
    $456 = (($447) + ($455))|0;
    $457 = $456&65535;
    $458 = $vert;
    $459 = ((($458)) + 4|0);
    HEAP16[$459>>1] = $457;
    $73 = $it;
    $460 = $73;
    $461 = HEAP32[$460>>2]|0;
    $462 = ((($461)) + 8|0);
    $72 = $462;
    $463 = $72;
    $71 = $463;
    $464 = $71;
    $465 = ((($464)) + 4|0);
    $466 = HEAPU8[$465>>0]|(HEAPU8[$465+1>>0]<<8)|(HEAPU8[$465+2>>0]<<16)|(HEAPU8[$465+3>>0]<<24);
    $467 = $466 >>> 12;
    $468 = $467 & 1023;
    $469 = $468&65535;
    $470 = $vert;
    $471 = ((($470)) + 6|0);
    HEAP16[$471>>1] = $469;
   } else {
    $58 = $it;
    $408 = $58;
    $409 = HEAP32[$408>>2]|0;
    $410 = ((($409)) + 8|0);
    $57 = $410;
    $411 = $57;
    $56 = $411;
    $412 = $56;
    $413 = ((($412)) + 4|0);
    $414 = HEAPU8[$413>>0]|(HEAPU8[$413+1>>0]<<8)|(HEAPU8[$413+2>>0]<<16)|(HEAPU8[$413+3>>0]<<24);
    $415 = $414 & 4095;
    $416 = $415&65535;
    $417 = $vert;
    $418 = ((($417)) + 4|0);
    HEAP16[$418>>1] = $416;
    $61 = $it;
    $419 = $61;
    $420 = HEAP32[$419>>2]|0;
    $421 = ((($420)) + 8|0);
    $60 = $421;
    $422 = $60;
    $59 = $422;
    $423 = $59;
    $424 = ((($423)) + 4|0);
    $425 = HEAPU8[$424>>0]|(HEAPU8[$424+1>>0]<<8)|(HEAPU8[$424+2>>0]<<16)|(HEAPU8[$424+3>>0]<<24);
    $426 = $425 >>> 12;
    $427 = $426 & 1023;
    $64 = $it;
    $428 = $64;
    $429 = HEAP32[$428>>2]|0;
    $430 = ((($429)) + 8|0);
    $63 = $430;
    $431 = $63;
    $62 = $431;
    $432 = $62;
    $433 = ((($432)) + 4|0);
    $434 = HEAPU8[$433>>0]|(HEAPU8[$433+1>>0]<<8)|(HEAPU8[$433+2>>0]<<16)|(HEAPU8[$433+3>>0]<<24);
    $435 = $434 >>> 27;
    $436 = (($427) + ($435))|0;
    $437 = $436&65535;
    $438 = $vert;
    $439 = ((($438)) + 6|0);
    HEAP16[$439>>1] = $437;
   }
   $472 = $vert;
   $473 = ((($472)) + 8|0);
   $vert = $473;
   $474 = $132;
   $475 = $474 << 16 >> 16;
   $76 = $it;
   $476 = $76;
   $477 = HEAP32[$476>>2]|0;
   $478 = ((($477)) + 8|0);
   $75 = $478;
   $479 = $75;
   $74 = $479;
   $480 = $74;
   $481 = HEAPU8[$480>>0]|(HEAPU8[$480+1>>0]<<8)|(HEAPU8[$480+2>>0]<<16)|(HEAPU8[$480+3>>0]<<24);
   $482 = $481 >>> 16;
   $483 = $482 & 31;
   $79 = $it;
   $484 = $79;
   $485 = HEAP32[$484>>2]|0;
   $486 = ((($485)) + 8|0);
   $78 = $486;
   $487 = $78;
   $77 = $487;
   $488 = $77;
   $489 = ((($488)) + 4|0);
   $490 = HEAPU8[$489>>0]|(HEAPU8[$489+1>>0]<<8)|(HEAPU8[$489+2>>0]<<16)|(HEAPU8[$489+3>>0]<<24);
   $491 = $490 >>> 22;
   $492 = $491 & 31;
   $493 = (($483) + ($492))|0;
   $494 = $135;
   $495 = Math_imul($493, $494)|0;
   $496 = (($475) + ($495))|0;
   $497 = $496&65535;
   $498 = $vert;
   HEAP16[$498>>1] = $497;
   $499 = $133;
   $500 = $499 << 16 >> 16;
   $82 = $it;
   $501 = $82;
   $502 = HEAP32[$501>>2]|0;
   $503 = ((($502)) + 8|0);
   $81 = $503;
   $504 = $81;
   $80 = $504;
   $505 = $80;
   $506 = HEAPU8[$505>>0]|(HEAPU8[$505+1>>0]<<8)|(HEAPU8[$505+2>>0]<<16)|(HEAPU8[$505+3>>0]<<24);
   $507 = $506 >>> 21;
   $508 = $507 & 31;
   $85 = $it;
   $509 = $85;
   $510 = HEAP32[$509>>2]|0;
   $511 = ((($510)) + 8|0);
   $84 = $511;
   $512 = $84;
   $83 = $512;
   $513 = $83;
   $514 = ((($513)) + 4|0);
   $515 = HEAPU8[$514>>0]|(HEAPU8[$514+1>>0]<<8)|(HEAPU8[$514+2>>0]<<16)|(HEAPU8[$514+3>>0]<<24);
   $516 = $515 >>> 27;
   $517 = (($508) + ($516))|0;
   $518 = $136;
   $519 = Math_imul($517, $518)|0;
   $520 = (($500) + ($519))|0;
   $521 = $520&65535;
   $522 = $vert;
   $523 = ((($522)) + 2|0);
   HEAP16[$523>>1] = $521;
   $88 = $it;
   $524 = $88;
   $525 = HEAP32[$524>>2]|0;
   $526 = ((($525)) + 8|0);
   $87 = $526;
   $527 = $87;
   $86 = $527;
   $528 = $86;
   $529 = HEAPU8[$528>>0]|(HEAPU8[$528+1>>0]<<8)|(HEAPU8[$528+2>>0]<<16)|(HEAPU8[$528+3>>0]<<24);
   $530 = $529 >>> 31;
   $531 = ($530|0)!=(0);
   if ($531) {
    $103 = $it;
    $574 = $103;
    $575 = HEAP32[$574>>2]|0;
    $576 = ((($575)) + 8|0);
    $102 = $576;
    $577 = $102;
    $101 = $577;
    $578 = $101;
    $579 = ((($578)) + 4|0);
    $580 = HEAPU8[$579>>0]|(HEAPU8[$579+1>>0]<<8)|(HEAPU8[$579+2>>0]<<16)|(HEAPU8[$579+3>>0]<<24);
    $581 = $580 & 4095;
    $106 = $it;
    $582 = $106;
    $583 = HEAP32[$582>>2]|0;
    $584 = ((($583)) + 8|0);
    $105 = $584;
    $585 = $105;
    $104 = $585;
    $586 = $104;
    $587 = ((($586)) + 4|0);
    $588 = HEAPU8[$587>>0]|(HEAPU8[$587+1>>0]<<8)|(HEAPU8[$587+2>>0]<<16)|(HEAPU8[$587+3>>0]<<24);
    $589 = $588 >>> 27;
    $590 = (($581) + ($589))|0;
    $591 = $590&65535;
    $592 = $vert;
    $593 = ((($592)) + 4|0);
    HEAP16[$593>>1] = $591;
    $109 = $it;
    $594 = $109;
    $595 = HEAP32[$594>>2]|0;
    $596 = ((($595)) + 8|0);
    $108 = $596;
    $597 = $108;
    $107 = $597;
    $598 = $107;
    $599 = ((($598)) + 4|0);
    $600 = HEAPU8[$599>>0]|(HEAPU8[$599+1>>0]<<8)|(HEAPU8[$599+2>>0]<<16)|(HEAPU8[$599+3>>0]<<24);
    $601 = $600 >>> 12;
    $602 = $601 & 1023;
    $112 = $it;
    $603 = $112;
    $604 = HEAP32[$603>>2]|0;
    $605 = ((($604)) + 8|0);
    $111 = $605;
    $606 = $111;
    $110 = $606;
    $607 = $110;
    $608 = ((($607)) + 4|0);
    $609 = HEAPU8[$608>>0]|(HEAPU8[$608+1>>0]<<8)|(HEAPU8[$608+2>>0]<<16)|(HEAPU8[$608+3>>0]<<24);
    $610 = $609 >>> 22;
    $611 = $610 & 31;
    $612 = (($602) + ($611))|0;
    $613 = $612&65535;
    $614 = $vert;
    $615 = ((($614)) + 6|0);
    HEAP16[$615>>1] = $613;
   } else {
    $91 = $it;
    $532 = $91;
    $533 = HEAP32[$532>>2]|0;
    $534 = ((($533)) + 8|0);
    $90 = $534;
    $535 = $90;
    $89 = $535;
    $536 = $89;
    $537 = ((($536)) + 4|0);
    $538 = HEAPU8[$537>>0]|(HEAPU8[$537+1>>0]<<8)|(HEAPU8[$537+2>>0]<<16)|(HEAPU8[$537+3>>0]<<24);
    $539 = $538 & 4095;
    $94 = $it;
    $540 = $94;
    $541 = HEAP32[$540>>2]|0;
    $542 = ((($541)) + 8|0);
    $93 = $542;
    $543 = $93;
    $92 = $543;
    $544 = $92;
    $545 = ((($544)) + 4|0);
    $546 = HEAPU8[$545>>0]|(HEAPU8[$545+1>>0]<<8)|(HEAPU8[$545+2>>0]<<16)|(HEAPU8[$545+3>>0]<<24);
    $547 = $546 >>> 22;
    $548 = $547 & 31;
    $549 = (($539) + ($548))|0;
    $550 = $549&65535;
    $551 = $vert;
    $552 = ((($551)) + 4|0);
    HEAP16[$552>>1] = $550;
    $97 = $it;
    $553 = $97;
    $554 = HEAP32[$553>>2]|0;
    $555 = ((($554)) + 8|0);
    $96 = $555;
    $556 = $96;
    $95 = $556;
    $557 = $95;
    $558 = ((($557)) + 4|0);
    $559 = HEAPU8[$558>>0]|(HEAPU8[$558+1>>0]<<8)|(HEAPU8[$558+2>>0]<<16)|(HEAPU8[$558+3>>0]<<24);
    $560 = $559 >>> 12;
    $561 = $560 & 1023;
    $100 = $it;
    $562 = $100;
    $563 = HEAP32[$562>>2]|0;
    $564 = ((($563)) + 8|0);
    $99 = $564;
    $565 = $99;
    $98 = $565;
    $566 = $98;
    $567 = ((($566)) + 4|0);
    $568 = HEAPU8[$567>>0]|(HEAPU8[$567+1>>0]<<8)|(HEAPU8[$567+2>>0]<<16)|(HEAPU8[$567+3>>0]<<24);
    $569 = $568 >>> 27;
    $570 = (($561) + ($569))|0;
    $571 = $570&65535;
    $572 = $vert;
    $573 = ((($572)) + 6|0);
    HEAP16[$573>>1] = $571;
   }
   $616 = $vert;
   $617 = ((($616)) + 8|0);
   $vert = $617;
   $618 = ((($138)) + 44|0);
   $619 = HEAP32[$618>>2]|0;
   $620 = (($619) + 1)|0;
   HEAP32[$618>>2] = $620;
   $115 = $it;
   $621 = $115;
   $622 = HEAP32[$621>>2]|0;
   $623 = ((($622)) + 8|0);
   $114 = $623;
   $624 = $114;
   $113 = $624;
   $625 = $113;
   $626 = HEAPU8[$625>>0]|(HEAPU8[$625+1>>0]<<8)|(HEAPU8[$625+2>>0]<<16)|(HEAPU8[$625+3>>0]<<24);
   $627 = $626 >>> 26;
   $628 = $627 & 31;
   $629 = $135;
   $630 = Math_imul($628, $629)|0;
   $631 = $132;
   $632 = $631 << 16 >> 16;
   $633 = (($632) + ($630))|0;
   $634 = $633&65535;
   $132 = $634;
  }
  $635 = $i;
  $636 = (($635) + 1)|0;
  $i = $636;
 }
 $637 = ((($138)) + 48|0);
 HEAP8[$637>>0] = 1;
 $638 = $132;
 $639 = $638 << 16 >> 16;
 $640 = $ox;
 $641 = (($639) - ($640))|0;
 $642 = $641 >> 4;
 STACKTOP = sp;return ($642|0);
}
function __ZN9peaceTextC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $d = 0, $i = 0, $i1 = 0, $in = 0, $indexArray = 0, $s_samp = 0, $t = 0, $texscale = 0, $u_texscale = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $9 = sp + 280|0;
 $12 = sp + 224|0;
 $15 = sp + 212|0;
 $18 = sp + 200|0;
 $21 = sp + 188|0;
 $29 = sp + 60|0;
 $32 = sp + 44|0;
 $36 = sp + 56|0;
 $39 = sp + 12|0;
 $in = sp + 72|0;
 $count = sp + 96|0;
 $d = sp + 12576|0;
 $46 = sp + 104|0;
 $s_samp = sp + 112|0;
 $u_texscale = sp + 116|0;
 $47 = sp + 120|0;
 $48 = sp + 124|0;
 $49 = sp + 128|0;
 $50 = sp + 132|0;
 $51 = sp + 136|0;
 $texscale = sp + 144|0;
 $t = sp + 152|0;
 $indexArray = sp + 288|0;
 $43 = $this;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $41 = $53;
 $54 = $41;
 $40 = $54;
 $55 = $40;
 $38 = $55;
 HEAP32[$39>>2] = 0;
 $56 = $38;
 $37 = $39;
 $57 = $37;
 $58 = HEAP32[$57>>2]|0;
 $35 = $56;
 HEAP32[$36>>2] = $58;
 $59 = $35;
 $34 = $36;
 $60 = $34;
 $61 = HEAP32[$60>>2]|0;
 HEAP32[$59>>2] = $61;
 $62 = ((($59)) + 4|0);
 $33 = $62;
 $63 = $33;
 $31 = $63;
 HEAP32[$32>>2] = 0;
 $64 = $31;
 $30 = $32;
 $65 = $30;
 $66 = HEAP32[$65>>2]|0;
 $28 = $64;
 HEAP32[$29>>2] = $66;
 $67 = $28;
 $27 = $67;
 $26 = $29;
 $68 = $26;
 $69 = HEAP32[$68>>2]|0;
 HEAP32[$67>>2] = $69;
 $70 = ((($54)) + 8|0);
 $25 = $70;
 $71 = $25;
 $24 = $71;
 $72 = $24;
 $23 = $72;
 $22 = $72;
 $73 = $22;
 HEAP32[$73>>2] = 0;
 $74 = ((($54)) + 12|0);
 $20 = $74;
 HEAP32[$21>>2] = 0;
 $75 = $20;
 $19 = $21;
 $76 = $19;
 $77 = HEAP32[$76>>2]|0;
 $17 = $75;
 HEAP32[$18>>2] = $77;
 $78 = $17;
 $16 = $18;
 $79 = $16;
 $80 = HEAP32[$79>>2]|0;
 HEAP32[$78>>2] = $80;
 $81 = ((($54)) + 16|0);
 $14 = $81;
 HEAPF32[$15>>2] = 1.0;
 $82 = $14;
 $13 = $15;
 $83 = $13;
 $84 = +HEAPF32[$83>>2];
 $11 = $82;
 HEAPF32[$12>>2] = $84;
 $85 = $11;
 $10 = $12;
 $86 = $10;
 $87 = +HEAPF32[$86>>2];
 HEAPF32[$85>>2] = $87;
 $88 = ((($52)) + 20|0);
 __THREW__ = 0;
 invoke_vi(88,($88|0));
 $89 = __THREW__; __THREW__ = 0;
 $90 = $89&1;
 if ($90) {
  $139 = ___cxa_find_matching_catch()|0;
  $140 = tempRet0;
  $44 = $139;
  $45 = $140;
  __ZNSt3__113unordered_setI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEED2Ev($52);
  $305 = $44;
  $306 = $45;
  ___resumeException($305|0);
  // unreachable;
 }
 $91 = ((($52)) + 24|0);
 __THREW__ = 0;
 invoke_vi(188,($91|0));
 $92 = __THREW__; __THREW__ = 0;
 $93 = $92&1;
 if ($93) {
  $141 = ___cxa_find_matching_catch()|0;
  $142 = tempRet0;
  $44 = $141;
  $45 = $142;
 } else {
  $94 = ((($52)) + 52|0);
  __THREW__ = 0;
  invoke_vi(89,($94|0));
  $95 = __THREW__; __THREW__ = 0;
  $96 = $95&1;
  if ($96) {
   $143 = ___cxa_find_matching_catch()|0;
   $144 = tempRet0;
   $44 = $143;
   $45 = $144;
  } else {
   $97 = ((($52)) + 56|0);
   __THREW__ = 0;
   invoke_vi(89,($97|0));
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   if ($99) {
    $145 = ___cxa_find_matching_catch()|0;
    $146 = tempRet0;
    $44 = $145;
    $45 = $146;
   } else {
    $100 = ((($52)) + 44|0);
    HEAP32[$100>>2] = 0;
    $101 = ((($52)) + 48|0);
    HEAP8[$101>>0] = 1;
    __THREW__ = 0;
    invoke_vii(215,($in|0),(47960|0));
    $102 = __THREW__; __THREW__ = 0;
    $103 = $102&1;
    L11: do {
     if ($103) {
      label = 19;
     } else {
      $104 = HEAP32[$in>>2]|0;
      $105 = ((($104)) + 36|0);
      $106 = HEAP32[$105>>2]|0;
      __THREW__ = 0;
      $107 = (invoke_ii($106|0,($in|0))|0);
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      L13: do {
       if (!($109)) {
        if ($107) {
         $110 = ((($52)) + 40|0);
         __THREW__ = 0;
         invoke_vii(145,($in|0),($110|0));
         $111 = __THREW__; __THREW__ = 0;
         $112 = $111&1;
         if ($112) {
          break;
         }
         __THREW__ = 0;
         invoke_vii(145,($in|0),($count|0));
         $113 = __THREW__; __THREW__ = 0;
         $114 = $113&1;
         if ($114) {
          break;
         }
         $i = 0;
         while(1) {
          $115 = $i;
          $116 = HEAP32[$count>>2]|0;
          $117 = ($115|0)<($116|0);
          if (!($117)) {
           break;
          }
          __THREW__ = 0;
          invoke_vii(216,($in|0),($d|0));
          $118 = __THREW__; __THREW__ = 0;
          $119 = $118&1;
          if ($119) {
           break L13;
          }
          $7 = $52;
          $8 = $d;
          $120 = $7;
          $121 = $8;
          __THREW__ = 0;
          invoke_viii(217,($9|0),($120|0),($121|0));
          $122 = __THREW__; __THREW__ = 0;
          $123 = $122&1;
          if ($123) {
           break L13;
          }
          $4 = $46;
          $5 = $9;
          $6 = 0;
          $124 = $4;
          $125 = $5;
          $3 = $125;
          $126 = $3;
          $0 = $124;
          $1 = $126;
          $127 = $0;
          $128 = $1;
          $129 = HEAP32[$128>>2]|0;
          HEAP32[$127>>2] = $129;
          $130 = ((($124)) + 4|0);
          $131 = $5;
          $132 = ((($131)) + 4|0);
          $2 = $132;
          $133 = $2;
          $134 = HEAP8[$133>>0]|0;
          $135 = $134&1;
          $136 = $135&1;
          HEAP8[$130>>0] = $136;
          $137 = $i;
          $138 = (($137) + 1)|0;
          $i = $138;
         }
         $151 = ((($52)) + 20|0);
         __THREW__ = 0;
         $152 = (invoke_i(151)|0);
         $153 = __THREW__; __THREW__ = 0;
         $154 = $153&1;
         if ($154) {
          break;
         }
         __THREW__ = 0;
         $155 = (invoke_iii(152,($152|0),(47976|0))|0);
         $156 = __THREW__; __THREW__ = 0;
         $157 = $156&1;
         if ($157) {
          break;
         }
         __THREW__ = 0;
         (invoke_iii(153,($151|0),($155|0))|0);
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          break;
         }
         $160 = ((($52)) + 20|0);
         __THREW__ = 0;
         $161 = (invoke_ii(172,($160|0))|0);
         $162 = __THREW__; __THREW__ = 0;
         $163 = $162&1;
         if ($163) {
          break;
         }
         __THREW__ = 0;
         invoke_vii(218,($161|0),2);
         $164 = __THREW__; __THREW__ = 0;
         $165 = $164&1;
         if ($165) {
          break;
         }
         $166 = ((($52)) + 24|0);
         __THREW__ = 0;
         $167 = (invoke_i(219)|0);
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          break;
         }
         __THREW__ = 0;
         $170 = (invoke_iii(220,($167|0),(47984|0))|0);
         $171 = __THREW__; __THREW__ = 0;
         $172 = $171&1;
         if ($172) {
          break;
         }
         __THREW__ = 0;
         (invoke_iii(221,($166|0),($170|0))|0);
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          break;
         }
         $175 = ((($52)) + 24|0);
         __THREW__ = 0;
         $176 = (invoke_ii(222,($175|0))|0);
         $177 = __THREW__; __THREW__ = 0;
         $178 = $177&1;
         if ($178) {
          break;
         }
         __THREW__ = 0;
         $179 = (invoke_iii(223,($176|0),(48008|0))|0);
         $180 = __THREW__; __THREW__ = 0;
         $181 = $180&1;
         if ($181) {
          break;
         }
         HEAP32[$47>>2] = $179;
         ;HEAP32[$s_samp>>2]=HEAP32[$47>>2]|0;
         $182 = ((($52)) + 36|0);
         $183 = ((($52)) + 24|0);
         __THREW__ = 0;
         $184 = (invoke_ii(222,($183|0))|0);
         $185 = __THREW__; __THREW__ = 0;
         $186 = $185&1;
         if ($186) {
          break;
         }
         __THREW__ = 0;
         $187 = (invoke_iii(223,($184|0),(48016|0))|0);
         $188 = __THREW__; __THREW__ = 0;
         $189 = $188&1;
         if ($189) {
          break;
         }
         HEAP32[$48>>2] = $187;
         ;HEAP32[$182>>2]=HEAP32[$48>>2]|0;
         $190 = ((($52)) + 28|0);
         $191 = ((($52)) + 24|0);
         __THREW__ = 0;
         $192 = (invoke_ii(222,($191|0))|0);
         $193 = __THREW__; __THREW__ = 0;
         $194 = $193&1;
         if ($194) {
          break;
         }
         __THREW__ = 0;
         $195 = (invoke_iii(224,($192|0),(48024|0))|0);
         $196 = __THREW__; __THREW__ = 0;
         $197 = $196&1;
         if ($197) {
          break;
         }
         HEAP32[$49>>2] = $195;
         ;HEAP32[$190>>2]=HEAP32[$49>>2]|0;
         $198 = ((($52)) + 32|0);
         $199 = ((($52)) + 24|0);
         __THREW__ = 0;
         $200 = (invoke_ii(222,($199|0))|0);
         $201 = __THREW__; __THREW__ = 0;
         $202 = $201&1;
         if ($202) {
          break;
         }
         __THREW__ = 0;
         $203 = (invoke_iii(224,($200|0),(48040|0))|0);
         $204 = __THREW__; __THREW__ = 0;
         $205 = $204&1;
         if ($205) {
          break;
         }
         HEAP32[$50>>2] = $203;
         ;HEAP32[$198>>2]=HEAP32[$50>>2]|0;
         $206 = ((($52)) + 24|0);
         __THREW__ = 0;
         $207 = (invoke_ii(222,($206|0))|0);
         $208 = __THREW__; __THREW__ = 0;
         $209 = $208&1;
         if ($209) {
          break;
         }
         __THREW__ = 0;
         $210 = (invoke_iii(223,($207|0),(48048|0))|0);
         $211 = __THREW__; __THREW__ = 0;
         $212 = $211&1;
         if ($212) {
          break;
         }
         HEAP32[$51>>2] = $210;
         ;HEAP32[$u_texscale>>2]=HEAP32[$51>>2]|0;
         __THREW__ = 0;
         invoke_vi(225,($texscale|0));
         $213 = __THREW__; __THREW__ = 0;
         $214 = $213&1;
         if ($214) {
          break;
         }
         __THREW__ = 0;
         $215 = (invoke_ii(226,(48288|0))|0);
         $216 = __THREW__; __THREW__ = 0;
         $217 = $216&1;
         if ($217) {
          break;
         }
         $218 = (+($215>>>0));
         $219 = 1.0 / $218;
         HEAPF32[$texscale>>2] = $219;
         __THREW__ = 0;
         $220 = (invoke_ii(227,(48288|0))|0);
         $221 = __THREW__; __THREW__ = 0;
         $222 = $221&1;
         if ($222) {
          break;
         }
         $223 = (+($220>>>0));
         $224 = 1.0 / $223;
         $225 = ((($texscale)) + 4|0);
         HEAPF32[$225>>2] = $224;
         HEAP32[$t>>2] = 0;
         __THREW__ = 0;
         $226 = (invoke_ii(176,($s_samp|0))|0);
         $227 = __THREW__; __THREW__ = 0;
         $228 = $227&1;
         if ($228) {
          break;
         }
         __THREW__ = 0;
         invoke_viiii(177,($226|0),($t|0),35678,1);
         $229 = __THREW__; __THREW__ = 0;
         $230 = $229&1;
         if ($230) {
          break;
         }
         __THREW__ = 0;
         $231 = (invoke_ii(176,($u_texscale|0))|0);
         $232 = __THREW__; __THREW__ = 0;
         $233 = $232&1;
         if ($233) {
          break;
         }
         __THREW__ = 0;
         invoke_viiii(177,($231|0),($texscale|0),35664,1);
         $234 = __THREW__; __THREW__ = 0;
         $235 = $234&1;
         if ($235) {
          break;
         }
        } else {
         __THREW__ = 0;
         invoke_vii(228,(48064|0),($vararg_buffer|0));
         $236 = __THREW__; __THREW__ = 0;
         $237 = $236&1;
         if ($237) {
          break;
         }
        }
        __ZN14readfilestreamD2Ev($in);
        $i1 = 0;
        while(1) {
         $238 = $i1;
         $239 = ($238|0)<(1024);
         if (!($239)) {
          break;
         }
         $240 = $i1;
         $241 = $240<<2;
         $242 = (($241) + 0)|0;
         $243 = $242&65535;
         $244 = $i1;
         $245 = ($244*6)|0;
         $246 = (($indexArray) + ($245<<1)|0);
         HEAP16[$246>>1] = $243;
         $247 = $i1;
         $248 = $247<<2;
         $249 = (($248) + 1)|0;
         $250 = $249&65535;
         $251 = $i1;
         $252 = ($251*6)|0;
         $253 = (($252) + 1)|0;
         $254 = (($indexArray) + ($253<<1)|0);
         HEAP16[$254>>1] = $250;
         $255 = $i1;
         $256 = $255<<2;
         $257 = (($256) + 2)|0;
         $258 = $257&65535;
         $259 = $i1;
         $260 = ($259*6)|0;
         $261 = (($260) + 2)|0;
         $262 = (($indexArray) + ($261<<1)|0);
         HEAP16[$262>>1] = $258;
         $263 = $i1;
         $264 = $263<<2;
         $265 = (($264) + 2)|0;
         $266 = $265&65535;
         $267 = $i1;
         $268 = ($267*6)|0;
         $269 = (($268) + 3)|0;
         $270 = (($indexArray) + ($269<<1)|0);
         HEAP16[$270>>1] = $266;
         $271 = $i1;
         $272 = $271<<2;
         $273 = (($272) + 1)|0;
         $274 = $273&65535;
         $275 = $i1;
         $276 = ($275*6)|0;
         $277 = (($276) + 4)|0;
         $278 = (($indexArray) + ($277<<1)|0);
         HEAP16[$278>>1] = $274;
         $279 = $i1;
         $280 = $279<<2;
         $281 = (($280) + 3)|0;
         $282 = $281&65535;
         $283 = $i1;
         $284 = ($283*6)|0;
         $285 = (($284) + 5)|0;
         $286 = (($indexArray) + ($285<<1)|0);
         HEAP16[$286>>1] = $282;
         $287 = $i1;
         $288 = (($287) + 1)|0;
         $i1 = $288;
        }
        $289 = ((($52)) + 56|0);
        __THREW__ = 0;
        $290 = (invoke_ii(105,16)|0);
        $291 = __THREW__; __THREW__ = 0;
        $292 = $291&1;
        if ($292) {
         label = 19;
         break L11;
        }
        __THREW__ = 0;
        invoke_viiii(165,($290|0),12288,34963,35044);
        $293 = __THREW__; __THREW__ = 0;
        $294 = $293&1;
        if ($294) {
         $303 = ___cxa_find_matching_catch()|0;
         $304 = tempRet0;
         $44 = $303;
         $45 = $304;
         __ZdlPv($290);
         break L11;
        }
        __THREW__ = 0;
        (invoke_iii(166,($289|0),($290|0))|0);
        $295 = __THREW__; __THREW__ = 0;
        $296 = $295&1;
        if ($296) {
         label = 19;
         break L11;
        }
        $297 = ((($52)) + 56|0);
        __THREW__ = 0;
        $298 = (invoke_ii(167,($297|0))|0);
        $299 = __THREW__; __THREW__ = 0;
        $300 = $299&1;
        if ($300) {
         label = 19;
         break L11;
        }
        __THREW__ = 0;
        invoke_viiii(168,($298|0),($indexArray|0),12288,0);
        $301 = __THREW__; __THREW__ = 0;
        $302 = $301&1;
        if ($302) {
         label = 19;
         break L11;
        }
        STACKTOP = sp;return;
       }
      } while(0);
      $149 = ___cxa_find_matching_catch()|0;
      $150 = tempRet0;
      $44 = $149;
      $45 = $150;
      __ZN14readfilestreamD2Ev($in);
     }
    } while(0);
    if ((label|0) == 19) {
     $147 = ___cxa_find_matching_catch()|0;
     $148 = tempRet0;
     $44 = $147;
     $45 = $148;
    }
    __ZN6refptrI6bufferED2Ev($97);
   }
   __ZN6refptrI6bufferED2Ev($94);
  }
  __ZN6refptrI7programED2Ev($91);
 }
 __ZN6refptrI7textureED2Ev($88);
 __ZNSt3__113unordered_setI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEED2Ev($52);
 $305 = $44;
 $306 = $45;
 ___resumeException($305|0);
 // unreachable;
}
function __ZN9peaceText6renderEPf($this,$icolor) {
 $this = $this|0;
 $icolor = $icolor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $r1 = 0, $s = 0, $s1 = 0, $sa1 = 0, $sa2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 40|0;
 $s1 = sp + 36|0;
 $c = sp + 8|0;
 $sa1 = sp + 4|0;
 $sa2 = sp;
 $r1 = sp + 24|0;
 $0 = $this;
 $1 = $icolor;
 $4 = $0;
 $5 = ((($4)) + 56|0);
 $6 = (__ZN6refptrI6bufferEcvPS0_Ev($5)|0);
 __ZN6buffer5setupC2EPS_($s,$6);
 $7 = ((($4)) + 52|0);
 __THREW__ = 0;
 $8 = (invoke_ii(169,($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  invoke_vii(170,($s1|0),($8|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $13 = ((($4)) + 24|0);
   __THREW__ = 0;
   $14 = (invoke_ii(222,($13|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     label = 9;
    } else {
     __THREW__ = 0;
     invoke_vi(229,($14|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      label = 9;
     } else {
      $19 = $1;
      $20 = ($19|0)!=(0|0);
      if ($20) {
       $21 = ((($4)) + 36|0);
       __THREW__ = 0;
       $22 = (invoke_ii(176,($21|0))|0);
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if ($24) {
        label = 9;
        break;
       }
       $25 = $1;
       __THREW__ = 0;
       invoke_viiii(177,($22|0),($25|0),35666,1);
       $26 = __THREW__; __THREW__ = 0;
       $27 = $26&1;
       if ($27) {
        label = 9;
        break;
       }
      } else {
       ;HEAP32[$c>>2]=HEAP32[48088>>2]|0;HEAP32[$c+4>>2]=HEAP32[48088+4>>2]|0;HEAP32[$c+8>>2]=HEAP32[48088+8>>2]|0;HEAP32[$c+12>>2]=HEAP32[48088+12>>2]|0;
       $32 = ((($4)) + 36|0);
       __THREW__ = 0;
       $33 = (invoke_ii(176,($32|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 9;
        break;
       }
       __THREW__ = 0;
       invoke_viiii(177,($33|0),($c|0),35666,1);
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if ($37) {
        label = 9;
        break;
       }
      }
      $38 = ((($4)) + 20|0);
      __THREW__ = 0;
      $39 = (invoke_ii(172,($38|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 9;
      } else {
       __THREW__ = 0;
       invoke_vii(173,($39|0),0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        label = 9;
       } else {
        $44 = ((($4)) + 28|0);
        __THREW__ = 0;
        invoke_viiiiiii(175,($sa1|0),($44|0),2,5122,0,8,(0|0));
        $45 = __THREW__; __THREW__ = 0;
        $46 = $45&1;
        if ($46) {
         label = 9;
        } else {
         $47 = ((($4)) + 32|0);
         __THREW__ = 0;
         invoke_viiiiiii(175,($sa2|0),($47|0),2,5122,0,8,((((0) + 4|0))|0));
         $48 = __THREW__; __THREW__ = 0;
         $49 = $48&1;
         if ($49) {
          $64 = ___cxa_find_matching_catch()|0;
          $65 = tempRet0;
          $2 = $64;
          $3 = $65;
         } else {
          $50 = HEAP32[5264>>2]|0;
          $51 = ((($4)) + 44|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = ($52*6)|0;
          __THREW__ = 0;
          invoke_viiiii(178,($50|0),(0|0),($53|0),4,5123);
          $54 = __THREW__; __THREW__ = 0;
          $55 = $54&1;
          if (!($55)) {
           __THREW__ = 0;
           invoke_vi(230,($r1|0));
           $56 = __THREW__; __THREW__ = 0;
           $57 = $56&1;
           if (!($57)) {
            $58 = HEAP32[$r1>>2]|0;
            $59 = $58 & -229377;
            $60 = $59 | 32768;
            HEAP32[$r1>>2] = $60;
            $61 = HEAP32[$r1>>2]|0;
            $62 = $61 & -786433;
            $63 = $62 | 524288;
            HEAP32[$r1>>2] = $63;
            __ZN9attribute5setupD2Ev($sa2);
            __ZN9attribute5setupD2Ev($sa1);
            __ZN6buffer5setupD2Ev($s1);
            __ZN6buffer5setupD2Ev($s);
            STACKTOP = sp;return;
           }
          }
          $66 = ___cxa_find_matching_catch()|0;
          $67 = tempRet0;
          $2 = $66;
          $3 = $67;
          __ZN9attribute5setupD2Ev($sa2);
         }
         __ZN9attribute5setupD2Ev($sa1);
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 9) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $2 = $30;
    $3 = $31;
   }
   __ZN6buffer5setupD2Ev($s1);
   __ZN6buffer5setupD2Ev($s);
   $68 = $2;
   $69 = $3;
   ___resumeException($68|0);
   // unreachable;
  }
 }
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $2 = $28;
 $3 = $29;
 __ZN6buffer5setupD2Ev($s);
 $68 = $2;
 $69 = $3;
 ___resumeException($68|0);
 // unreachable;
}
function __ZN9peaceText3endEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5<<3;
 $size = $6;
 $7 = ((($3)) + 52|0);
 $8 = (__Znwj(16)|0);
 $9 = $size;
 __THREW__ = 0;
 invoke_viiii(165,($8|0),($9|0),34962,35044);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $1 = $15;
  $2 = $16;
  __ZdlPv($8);
  $17 = $1;
  $18 = $2;
  ___resumeException($17|0);
  // unreachable;
 } else {
  (__ZN6refptrI6bufferEaSEPKS0_($7,$8)|0);
  $12 = ((($3)) + 52|0);
  $13 = (__ZNK6refptrI6bufferEptEv($12)|0);
  $14 = $size;
  __ZN6buffer7setdataEPvii($13,15192,$14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE4findIS1_EENS_15__hash_iteratorIPNS_11__hash_nodeIS1_PvEEEERKT_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = sp + 20|0;
 $30 = sp + 44|0;
 $31 = $this;
 $32 = $__k;
 $33 = $31;
 $29 = $33;
 $34 = $29;
 $35 = ((($34)) + 12|0);
 $28 = $35;
 $36 = $28;
 $27 = $36;
 $37 = $27;
 $38 = $32;
 $39 = (__ZNSt3__14hashI8charDataEclERKS1_($37,$38)|0);
 $__hash = $39;
 $17 = $33;
 $40 = $17;
 $16 = $40;
 $41 = $16;
 $15 = $41;
 $42 = $15;
 $14 = $42;
 $43 = $14;
 $44 = ((($43)) + 4|0);
 $13 = $44;
 $45 = $13;
 $12 = $45;
 $46 = $12;
 $11 = $46;
 $47 = $11;
 $48 = HEAP32[$47>>2]|0;
 $__bc = $48;
 $49 = $__bc;
 $50 = ($49|0)!=(0);
 L1: do {
  if ($50) {
   $51 = $__hash;
   $52 = $__bc;
   $0 = $51;
   $1 = $52;
   $53 = $1;
   $54 = $1;
   $55 = (($54) - 1)|0;
   $56 = $53 & $55;
   $57 = ($56|0)!=(0);
   $58 = $0;
   $59 = $1;
   if ($57) {
    $62 = (($58>>>0) % ($59>>>0))&-1;
    $63 = $62;
   } else {
    $60 = (($59) - 1)|0;
    $61 = $58 & $60;
    $63 = $61;
   }
   $__chash = $63;
   $64 = $__chash;
   $4 = $33;
   $5 = $64;
   $65 = $4;
   $66 = $5;
   $3 = $65;
   $67 = $3;
   $2 = $67;
   $68 = $2;
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + ($66<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $__nd = $71;
   $72 = $__nd;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    $74 = $__nd;
    $75 = HEAP32[$74>>2]|0;
    $__nd = $75;
    while(1) {
     $76 = $__nd;
     $77 = ($76|0)!=(0|0);
     if (!($77)) {
      break L1;
     }
     $78 = $__nd;
     $79 = ((($78)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $__bc;
     $6 = $80;
     $7 = $81;
     $82 = $7;
     $83 = $7;
     $84 = (($83) - 1)|0;
     $85 = $82 & $84;
     $86 = ($85|0)!=(0);
     $87 = $6;
     $88 = $7;
     if ($86) {
      $91 = (($87>>>0) % ($88>>>0))&-1;
      $93 = $91;
     } else {
      $89 = (($88) - 1)|0;
      $90 = $87 & $89;
      $93 = $90;
     }
     $92 = $__chash;
     $94 = ($93|0)==($92|0);
     if (!($94)) {
      break L1;
     }
     $10 = $33;
     $95 = $10;
     $96 = ((($95)) + 16|0);
     $9 = $96;
     $97 = $9;
     $8 = $97;
     $98 = $8;
     $99 = $__nd;
     $100 = ((($99)) + 8|0);
     $101 = $32;
     $18 = $98;
     $19 = $100;
     $20 = $101;
     $102 = $19;
     $103 = $20;
     $104 = (__ZNK8charDataeqERKS_($102,$103)|0);
     $105 = $__nd;
     if ($104) {
      break;
     }
     $108 = HEAP32[$105>>2]|0;
     $__nd = $108;
    }
    $21 = $30;
    $22 = $105;
    $106 = $21;
    $107 = $22;
    HEAP32[$106>>2] = $107;
    $112 = HEAP32[$30>>2]|0;
    STACKTOP = sp;return ($112|0);
   }
  }
 } while(0);
 $26 = $33;
 $23 = $25;
 $24 = 0;
 $109 = $23;
 $110 = $24;
 HEAP32[$109>>2] = $110;
 $111 = HEAP32[$25>>2]|0;
 HEAP32[$30>>2] = $111;
 $112 = HEAP32[$30>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZN14readfilestreamC2EPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $filename;
 $6 = $2;
 __ZN10filestreamC2Ev($6);
 $7 = 48192;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 12|0);
 $9 = $3;
 $0 = $8;
 $1 = $9;
 $10 = $0;
 $11 = $1;
 __THREW__ = 0;
 (invoke_iii(231,($10|0),($11|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = $3;
  __THREW__ = 0;
  $15 = (invoke_iii(232,($14|0),(48232|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = ((($6)) + 8|0);
   HEAP32[$18>>2] = $15;
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $4 = $19;
 $5 = $20;
 __ZN10filestreamD2Ev($6);
 $21 = $4;
 $22 = $5;
 ___resumeException($21|0);
 // unreachable;
}
function __ZN6stream5dumptI8charDataEEvRT_($this,$dest) {
 $this = $this|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $dest;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 FUNCTION_TABLE_viii[$5 & 511]($2,$6,8);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE15__insert_uniqueERKS1_($agg$result,$this,$__x) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__h = 0, $__hash = 0, $__inserted = 0, $__nd = 0, $__pn = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $27 = sp + 8|0;
 $30 = sp + 710|0;
 $59 = sp;
 $62 = sp + 708|0;
 $138 = sp + 16|0;
 $141 = sp + 711|0;
 $__inserted = sp + 709|0;
 $__h = sp + 332|0;
 $162 = sp + 344|0;
 $165 = sp + 356|0;
 $166 = sp + 364|0;
 $160 = $this;
 $161 = $__x;
 $167 = $160;
 $159 = $167;
 $168 = $159;
 $169 = ((($168)) + 12|0);
 $158 = $169;
 $170 = $158;
 $157 = $170;
 $171 = $157;
 $172 = $161;
 $173 = (__ZNSt3__14hashI8charDataEclERKS1_($171,$172)|0);
 $__hash = $173;
 $124 = $167;
 $174 = $124;
 $123 = $174;
 $175 = $123;
 $122 = $175;
 $176 = $122;
 $121 = $176;
 $177 = $121;
 $178 = ((($177)) + 4|0);
 $120 = $178;
 $179 = $120;
 $119 = $179;
 $180 = $119;
 $118 = $180;
 $181 = $118;
 $182 = HEAP32[$181>>2]|0;
 $__bc = $182;
 HEAP8[$__inserted>>0] = 0;
 $183 = $__bc;
 $184 = ($183|0)!=(0);
 L1: do {
  if ($184) {
   $185 = $__hash;
   $186 = $__bc;
   $44 = $185;
   $45 = $186;
   $187 = $45;
   $188 = $45;
   $189 = (($188) - 1)|0;
   $190 = $187 & $189;
   $191 = ($190|0)!=(0);
   $192 = $44;
   $193 = $45;
   if ($191) {
    $196 = (($192>>>0) % ($193>>>0))&-1;
    $197 = $196;
   } else {
    $194 = (($193) - 1)|0;
    $195 = $192 & $194;
    $197 = $195;
   }
   $__chash = $197;
   $198 = $__chash;
   $33 = $167;
   $34 = $198;
   $199 = $33;
   $200 = $34;
   $32 = $199;
   $201 = $32;
   $31 = $201;
   $202 = $31;
   $203 = HEAP32[$202>>2]|0;
   $204 = (($203) + ($200<<2)|0);
   $205 = HEAP32[$204>>2]|0;
   $__nd = $205;
   $206 = $__nd;
   $207 = ($206|0)!=(0|0);
   if ($207) {
    $208 = $__nd;
    $209 = HEAP32[$208>>2]|0;
    $__nd = $209;
    while(1) {
     $210 = $__nd;
     $211 = ($210|0)!=(0|0);
     if (!($211)) {
      break L1;
     }
     $212 = $__nd;
     $213 = ((($212)) + 4|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = $__bc;
     $19 = $214;
     $20 = $215;
     $216 = $20;
     $217 = $20;
     $218 = (($217) - 1)|0;
     $219 = $216 & $218;
     $220 = ($219|0)!=(0);
     $221 = $19;
     $222 = $20;
     if ($220) {
      $225 = (($221>>>0) % ($222>>>0))&-1;
      $227 = $225;
     } else {
      $223 = (($222) - 1)|0;
      $224 = $221 & $223;
      $227 = $224;
     }
     $226 = $__chash;
     $228 = ($227|0)==($226|0);
     if (!($228)) {
      break L1;
     }
     $5 = $167;
     $229 = $5;
     $230 = ((($229)) + 16|0);
     $4 = $230;
     $231 = $4;
     $3 = $231;
     $232 = $3;
     $233 = $__nd;
     $234 = ((($233)) + 8|0);
     $235 = $161;
     $0 = $232;
     $1 = $234;
     $2 = $235;
     $236 = $1;
     $237 = $2;
     $238 = (__ZNK8charDataeqERKS_($236,$237)|0);
     if ($238) {
      break;
     }
     $239 = $__nd;
     $240 = HEAP32[$239>>2]|0;
     $__nd = $240;
    }
    $490 = $__nd;
    $150 = $166;
    $151 = $490;
    $491 = $150;
    $492 = $151;
    HEAP32[$491>>2] = $492;
    $154 = $agg$result;
    $155 = $166;
    $156 = $__inserted;
    $493 = $154;
    $494 = $155;
    $153 = $494;
    $495 = $153;
    ;HEAP32[$493>>2]=HEAP32[$495>>2]|0;
    $496 = ((($493)) + 4|0);
    $497 = $156;
    $152 = $497;
    $498 = $152;
    $499 = HEAP8[$498>>0]|0;
    $500 = $499&1;
    $501 = $500&1;
    HEAP8[$496>>0] = $501;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $241 = $161;
 $242 = $__hash;
 __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE16__construct_nodeERKS1_j($__h,$167,$241,$242);
 $8 = $167;
 $243 = $8;
 $244 = ((($243)) + 12|0);
 $7 = $244;
 $245 = $7;
 $6 = $245;
 $246 = $6;
 $247 = HEAP32[$246>>2]|0;
 $248 = (($247) + 1)|0;
 $249 = (+($248>>>0));
 $250 = $__bc;
 $251 = (+($250>>>0));
 $11 = $167;
 $252 = $11;
 $253 = ((($252)) + 16|0);
 $10 = $253;
 $254 = $10;
 $9 = $254;
 $255 = $9;
 $256 = +HEAPF32[$255>>2];
 $257 = $251 * $256;
 $258 = $249 > $257;
 $259 = $__bc;
 $260 = ($259|0)==(0);
 $or$cond = $258 | $260;
 do {
  if ($or$cond) {
   $261 = $__bc;
   $262 = $261<<1;
   $263 = $__bc;
   $12 = $263;
   $264 = $12;
   $265 = ($264>>>0)>(2);
   if ($265) {
    $266 = $12;
    $267 = $12;
    $268 = (($267) - 1)|0;
    $269 = $266 & $268;
    $270 = ($269|0)!=(0);
    $271 = $270 ^ 1;
    $273 = $271;
   } else {
    $273 = 0;
   }
   $272 = $273 ^ 1;
   $274 = $272&1;
   $275 = (($262) + ($274))|0;
   HEAP32[$162>>2] = $275;
   $15 = $167;
   $276 = $15;
   $277 = ((($276)) + 12|0);
   $14 = $277;
   $278 = $14;
   $13 = $278;
   $279 = $13;
   $280 = HEAP32[$279>>2]|0;
   $281 = (($280) + 1)|0;
   $282 = (+($281>>>0));
   $18 = $167;
   $283 = $18;
   $284 = ((($283)) + 16|0);
   $17 = $284;
   $285 = $17;
   $16 = $285;
   $286 = $16;
   $287 = +HEAPF32[$286>>2];
   $288 = $282 / $287;
   $21 = $288;
   $289 = $21;
   $290 = (+Math_ceil((+$289)));
   $291 = (~~(($290))>>>0);
   HEAP32[$165>>2] = $291;
   $28 = $162;
   $29 = $165;
   $292 = $28;
   $293 = $29;
   ;HEAP8[$27>>0]=HEAP8[$30>>0]|0;
   $25 = $292;
   $26 = $293;
   $294 = $25;
   $295 = $26;
   $22 = $27;
   $23 = $294;
   $24 = $295;
   $296 = $23;
   $297 = HEAP32[$296>>2]|0;
   $298 = $24;
   $299 = HEAP32[$298>>2]|0;
   $300 = ($297>>>0)<($299>>>0);
   $301 = $26;
   $302 = $25;
   $303 = $300 ? $301 : $302;
   $304 = HEAP32[$303>>2]|0;
   __THREW__ = 0;
   invoke_vii(233,($167|0),($304|0));
   $305 = __THREW__; __THREW__ = 0;
   $306 = $305&1;
   if (!($306)) {
    $41 = $167;
    $307 = $41;
    $40 = $307;
    $308 = $40;
    $39 = $308;
    $309 = $39;
    $38 = $309;
    $310 = $38;
    $311 = ((($310)) + 4|0);
    $37 = $311;
    $312 = $37;
    $36 = $312;
    $313 = $36;
    $35 = $313;
    $314 = $35;
    $315 = HEAP32[$314>>2]|0;
    $__bc = $315;
    $316 = $__hash;
    $317 = $__bc;
    $42 = $316;
    $43 = $317;
    $318 = $43;
    $319 = $43;
    $320 = (($319) - 1)|0;
    $321 = $318 & $320;
    $322 = ($321|0)!=(0);
    $323 = $42;
    $324 = $43;
    if ($322) {
     $327 = (($323>>>0) % ($324>>>0))&-1;
     $328 = $327;
    } else {
     $325 = (($324) - 1)|0;
     $326 = $323 & $325;
     $328 = $326;
    }
    $__chash = $328;
    break;
   }
   $329 = ___cxa_find_matching_catch()|0;
   $330 = tempRet0;
   $163 = $329;
   $164 = $330;
   $70 = $__h;
   $331 = $70;
   $68 = $331;
   $69 = 0;
   $332 = $68;
   $67 = $332;
   $333 = $67;
   $66 = $333;
   $334 = $66;
   $335 = HEAP32[$334>>2]|0;
   $__tmp$i$i1 = $335;
   $336 = $69;
   $49 = $332;
   $337 = $49;
   $48 = $337;
   $338 = $48;
   HEAP32[$338>>2] = $336;
   $339 = $__tmp$i$i1;
   $340 = ($339|0)!=(0|0);
   if (!($340)) {
    $502 = $163;
    $503 = $164;
    ___resumeException($502|0);
    // unreachable;
   }
   $47 = $332;
   $341 = $47;
   $46 = $341;
   $342 = $46;
   $343 = ((($342)) + 4|0);
   $344 = $__tmp$i$i1;
   $64 = $343;
   $65 = $344;
   $345 = $64;
   $346 = ((($345)) + 4|0);
   $347 = HEAP8[$346>>0]|0;
   $348 = $347&1;
   if ($348) {
    $349 = HEAP32[$345>>2]|0;
    $350 = $65;
    $351 = ((($350)) + 8|0);
    $63 = $351;
    $352 = $63;
    $60 = $349;
    $61 = $352;
    $353 = $60;
    $354 = $61;
    ;HEAP8[$59>>0]=HEAP8[$62>>0]|0;
    $57 = $353;
    $58 = $354;
   }
   $355 = $65;
   $356 = ($355|0)!=(0|0);
   if (!($356)) {
    $502 = $163;
    $503 = $164;
    ___resumeException($502|0);
    // unreachable;
   }
   $357 = HEAP32[$345>>2]|0;
   $358 = $65;
   $54 = $357;
   $55 = $358;
   $56 = 1;
   $359 = $54;
   $360 = $55;
   $361 = $56;
   $51 = $359;
   $52 = $360;
   $53 = $361;
   $362 = $52;
   $50 = $362;
   $363 = $50;
   __ZdlPv($363);
   $502 = $163;
   $503 = $164;
   ___resumeException($502|0);
   // unreachable;
  }
 } while(0);
 $364 = $__chash;
 $73 = $167;
 $74 = $364;
 $365 = $73;
 $366 = $74;
 $72 = $365;
 $367 = $72;
 $71 = $367;
 $368 = $71;
 $369 = HEAP32[$368>>2]|0;
 $370 = (($369) + ($366<<2)|0);
 $371 = HEAP32[$370>>2]|0;
 $__pn = $371;
 $372 = $__pn;
 $373 = ($372|0)==(0|0);
 if ($373) {
  $374 = ((($167)) + 8|0);
  $76 = $374;
  $375 = $76;
  $75 = $375;
  $376 = $75;
  $78 = $376;
  $377 = $78;
  $77 = $377;
  $378 = $77;
  $__pn = $378;
  $379 = $__pn;
  $380 = HEAP32[$379>>2]|0;
  $81 = $__h;
  $381 = $81;
  $80 = $381;
  $382 = $80;
  $79 = $382;
  $383 = $79;
  $384 = HEAP32[$383>>2]|0;
  HEAP32[$384>>2] = $380;
  $84 = $__h;
  $385 = $84;
  $83 = $385;
  $386 = $83;
  $82 = $386;
  $387 = $82;
  $388 = HEAP32[$387>>2]|0;
  $389 = $__pn;
  HEAP32[$389>>2] = $388;
  $390 = $__pn;
  $391 = $__chash;
  $87 = $167;
  $88 = $391;
  $392 = $87;
  $393 = $88;
  $86 = $392;
  $394 = $86;
  $85 = $394;
  $395 = $85;
  $396 = HEAP32[$395>>2]|0;
  $397 = (($396) + ($393<<2)|0);
  HEAP32[$397>>2] = $390;
  $91 = $__h;
  $398 = $91;
  $90 = $398;
  $399 = $90;
  $89 = $399;
  $400 = $89;
  $401 = HEAP32[$400>>2]|0;
  $402 = HEAP32[$401>>2]|0;
  $403 = ($402|0)!=(0|0);
  if ($403) {
   $94 = $__h;
   $404 = $94;
   $93 = $404;
   $405 = $93;
   $92 = $405;
   $406 = $92;
   $407 = HEAP32[$406>>2]|0;
   $97 = $__h;
   $408 = $97;
   $96 = $408;
   $409 = $96;
   $95 = $409;
   $410 = $95;
   $411 = HEAP32[$410>>2]|0;
   $412 = HEAP32[$411>>2]|0;
   $413 = ((($412)) + 4|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = $__bc;
   $98 = $414;
   $99 = $415;
   $416 = $99;
   $417 = $99;
   $418 = (($417) - 1)|0;
   $419 = $416 & $418;
   $420 = ($419|0)!=(0);
   $421 = $98;
   $422 = $99;
   if ($420) {
    $425 = (($421>>>0) % ($422>>>0))&-1;
    $426 = $425;
   } else {
    $423 = (($422) - 1)|0;
    $424 = $421 & $423;
    $426 = $424;
   }
   $102 = $167;
   $103 = $426;
   $427 = $102;
   $428 = $103;
   $101 = $427;
   $429 = $101;
   $100 = $429;
   $430 = $100;
   $431 = HEAP32[$430>>2]|0;
   $432 = (($431) + ($428<<2)|0);
   HEAP32[$432>>2] = $407;
  }
 } else {
  $433 = $__pn;
  $434 = HEAP32[$433>>2]|0;
  $106 = $__h;
  $435 = $106;
  $105 = $435;
  $436 = $105;
  $104 = $436;
  $437 = $104;
  $438 = HEAP32[$437>>2]|0;
  HEAP32[$438>>2] = $434;
  $109 = $__h;
  $439 = $109;
  $108 = $439;
  $440 = $108;
  $107 = $440;
  $441 = $107;
  $442 = HEAP32[$441>>2]|0;
  $443 = $__pn;
  HEAP32[$443>>2] = $442;
 }
 $114 = $__h;
 $444 = $114;
 $113 = $444;
 $445 = $113;
 $112 = $445;
 $446 = $112;
 $447 = HEAP32[$446>>2]|0;
 $__t$i = $447;
 $111 = $444;
 $448 = $111;
 $110 = $448;
 $449 = $110;
 HEAP32[$449>>2] = 0;
 $450 = $__t$i;
 $__nd = $450;
 $117 = $167;
 $451 = $117;
 $452 = ((($451)) + 12|0);
 $116 = $452;
 $453 = $116;
 $115 = $453;
 $454 = $115;
 $455 = HEAP32[$454>>2]|0;
 $456 = (($455) + 1)|0;
 HEAP32[$454>>2] = $456;
 HEAP8[$__inserted>>0] = 1;
 $149 = $__h;
 $457 = $149;
 $147 = $457;
 $148 = 0;
 $458 = $147;
 $146 = $458;
 $459 = $146;
 $145 = $459;
 $460 = $145;
 $461 = HEAP32[$460>>2]|0;
 $__tmp$i$i = $461;
 $462 = $148;
 $128 = $458;
 $463 = $128;
 $127 = $463;
 $464 = $127;
 HEAP32[$464>>2] = $462;
 $465 = $__tmp$i$i;
 $466 = ($465|0)!=(0|0);
 if (!($466)) {
  $490 = $__nd;
  $150 = $166;
  $151 = $490;
  $491 = $150;
  $492 = $151;
  HEAP32[$491>>2] = $492;
  $154 = $agg$result;
  $155 = $166;
  $156 = $__inserted;
  $493 = $154;
  $494 = $155;
  $153 = $494;
  $495 = $153;
  ;HEAP32[$493>>2]=HEAP32[$495>>2]|0;
  $496 = ((($493)) + 4|0);
  $497 = $156;
  $152 = $497;
  $498 = $152;
  $499 = HEAP8[$498>>0]|0;
  $500 = $499&1;
  $501 = $500&1;
  HEAP8[$496>>0] = $501;
  STACKTOP = sp;return;
 }
 $126 = $458;
 $467 = $126;
 $125 = $467;
 $468 = $125;
 $469 = ((($468)) + 4|0);
 $470 = $__tmp$i$i;
 $143 = $469;
 $144 = $470;
 $471 = $143;
 $472 = ((($471)) + 4|0);
 $473 = HEAP8[$472>>0]|0;
 $474 = $473&1;
 if ($474) {
  $475 = HEAP32[$471>>2]|0;
  $476 = $144;
  $477 = ((($476)) + 8|0);
  $142 = $477;
  $478 = $142;
  $139 = $475;
  $140 = $478;
  $479 = $139;
  $480 = $140;
  ;HEAP8[$138>>0]=HEAP8[$141>>0]|0;
  $136 = $479;
  $137 = $480;
 }
 $481 = $144;
 $482 = ($481|0)!=(0|0);
 if (!($482)) {
  $490 = $__nd;
  $150 = $166;
  $151 = $490;
  $491 = $150;
  $492 = $151;
  HEAP32[$491>>2] = $492;
  $154 = $agg$result;
  $155 = $166;
  $156 = $__inserted;
  $493 = $154;
  $494 = $155;
  $153 = $494;
  $495 = $153;
  ;HEAP32[$493>>2]=HEAP32[$495>>2]|0;
  $496 = ((($493)) + 4|0);
  $497 = $156;
  $152 = $497;
  $498 = $152;
  $499 = HEAP8[$498>>0]|0;
  $500 = $499&1;
  $501 = $500&1;
  HEAP8[$496>>0] = $501;
  STACKTOP = sp;return;
 }
 $483 = HEAP32[$471>>2]|0;
 $484 = $144;
 $133 = $483;
 $134 = $484;
 $135 = 1;
 $485 = $133;
 $486 = $134;
 $487 = $135;
 $130 = $485;
 $131 = $486;
 $132 = $487;
 $488 = $131;
 $129 = $488;
 $489 = $129;
 __ZdlPv($489);
 $490 = $__nd;
 $150 = $166;
 $151 = $490;
 $491 = $150;
 $492 = $151;
 HEAP32[$491>>2] = $492;
 $154 = $agg$result;
 $155 = $166;
 $156 = $__inserted;
 $493 = $154;
 $494 = $155;
 $153 = $494;
 $495 = $153;
 ;HEAP32[$493>>2]=HEAP32[$495>>2]|0;
 $496 = ((($493)) + 4|0);
 $497 = $156;
 $152 = $497;
 $498 = $152;
 $499 = HEAP8[$498>>0]|0;
 $500 = $499&1;
 $501 = $500&1;
 HEAP8[$496>>0] = $501;
 STACKTOP = sp;return;
}
function __ZN14readfilestreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN10filestreamD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN27peaceSimpleTexture_portable9get_widthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 1;
 $4 = $3 & 8191;
 STACKTOP = sp;return ($4|0);
}
function __ZN27peaceSimpleTexture_portable10get_heightEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 14;
 $4 = $3 & 8191;
 STACKTOP = sp;return ($4|0);
}
function __ZN10filestreamC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = $this;
 $8 = $7;
 __ZN6streamC2Ev($8);
 $9 = 48112;
 HEAP32[$8>>2] = $9;
 $10 = ((($8)) + 12|0);
 $6 = $10;
 $11 = $6;
 $5 = $11;
 $12 = $5;
 $4 = $12;
 $13 = $4;
 $3 = $13;
 $2 = $11;
 $14 = $2;
 $1 = $14;
 $15 = $1;
 $0 = $15;
 $16 = $0;
 $__a$i$i = $16;
 $__i$i$i = 0;
 while(1) {
  $17 = $__i$i$i;
  $18 = ($17>>>0)<(3);
  if (!($18)) {
   break;
  }
  $19 = $__i$i$i;
  $20 = $__a$i$i;
  $21 = (($20) + ($19<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = $__i$i$i;
  $23 = (($22) + 1)|0;
  $__i$i$i = $23;
 }
 $24 = ((($8)) + 8|0);
 HEAP32[$24>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN10filestreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN10filestreamD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10filestreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 48112;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = ((($3)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_ii(234,($9|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   $1 = $12;
   $2 = $13;
   $14 = ((($3)) + 12|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
   __ZN6streamD2Ev($3);
   $15 = $1;
   ___clang_call_terminate($15);
   // unreachable;
  }
 }
 $16 = ((($3)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($16);
 __ZN6streamD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN14readfilestreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN14readfilestreamD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN14readfilestream4dumpEPvj($this,$ptr,$len) {
 $this = $this|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ptr;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 (_fread(($7|0),1,($8|0),($10|0))|0);
 STACKTOP = sp;return;
}
function __ZN10filestream7seekcurEj($this,$offset) {
 $this = $this|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offset;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 (_fseek(($4|0),($5|0),1)|0);
 STACKTOP = sp;return;
}
function __ZN10filestream7seeksetEj($this,$offset) {
 $this = $this|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offset;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 (_fseek(($4|0),($5|0),0)|0);
 STACKTOP = sp;return;
}
function __ZN10filestream7seekendEj($this,$offset) {
 $this = $this|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offset;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 (_fseek(($4|0),($5|0),2)|0);
 STACKTOP = sp;return;
}
function __ZN10filestream4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $rtn = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 511]($1)|0);
 $cur = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 511]($1,0);
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 511]($1)|0);
 $rtn = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $cur;
 FUNCTION_TABLE_vii[$15 & 511]($1,$16);
 $17 = $rtn;
 STACKTOP = sp;return ($17|0);
}
function __ZN10filestream4tellEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_ftell(($3|0))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN14readfilestream6isReadEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN10filestreamcvbEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__14hashI8charDataEclERKS1_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 65535;
 $5 = (___muldi3(($4|0),0,-1640531535,0)|0);
 $6 = tempRet0;
 STACKTOP = sp;return ($5|0);
}
function __ZNK8charDataeqERKS_($this,$r) {
 $this = $this|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $r;
 $2 = $0;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 65535;
 $5 = $1;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $7 = $6 & 65535;
 $8 = ($4|0)==($7|0);
 STACKTOP = sp;return ($8|0);
}
function __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE16__construct_nodeERKS1_j($agg$result,$this,$__v,$__hash) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__hash = $__hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp + 24|0;
 $17 = sp + 501|0;
 $33 = sp + 372|0;
 $34 = sp;
 $37 = sp + 360|0;
 $38 = sp + 352|0;
 $39 = sp + 8|0;
 $50 = sp + 296|0;
 $55 = sp + 68|0;
 $56 = sp + 16|0;
 $59 = sp + 108|0;
 $60 = sp + 136|0;
 $61 = sp + 32|0;
 $66 = sp + 112|0;
 $80 = sp + 40|0;
 $83 = sp + 500|0;
 $__h = sp + 248|0;
 $107 = sp + 264|0;
 $104 = $this;
 $105 = $__v;
 $106 = $__hash;
 $109 = $104;
 $103 = $109;
 $110 = $103;
 $111 = ((($110)) + 8|0);
 $102 = $111;
 $112 = $102;
 $101 = $112;
 $113 = $101;
 $__na = $113;
 $114 = $__na;
 $99 = $114;
 $100 = 1;
 $115 = $99;
 $116 = $100;
 $96 = $115;
 $97 = $116;
 $98 = 0;
 $117 = $97;
 $118 = $117<<4;
 $95 = $118;
 $119 = $95;
 $120 = (__Znwj($119)|0);
 $121 = $__na;
 $92 = $107;
 $93 = $121;
 $94 = 0;
 $122 = $92;
 $123 = $93;
 HEAP32[$122>>2] = $123;
 $124 = ((($122)) + 4|0);
 $125 = $94;
 $126 = $125&1;
 $127 = $126&1;
 HEAP8[$124>>0] = $127;
 $63 = $__h;
 $64 = $120;
 $65 = $107;
 $128 = $63;
 $129 = $64;
 $130 = $65;
 $62 = $130;
 $131 = $62;
 ;HEAP32[$66>>2]=HEAP32[$131>>2]|0;HEAP32[$66+4>>2]=HEAP32[$131+4>>2]|0;
 ;HEAP8[$61>>0]=HEAP8[$66>>0]|0;HEAP8[$61+1>>0]=HEAP8[$66+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$66+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$66+3>>0]|0;HEAP8[$61+4>>0]=HEAP8[$66+4>>0]|0;HEAP8[$61+5>>0]=HEAP8[$66+5>>0]|0;HEAP8[$61+6>>0]=HEAP8[$66+6>>0]|0;HEAP8[$61+7>>0]=HEAP8[$66+7>>0]|0;
 $58 = $128;
 HEAP32[$59>>2] = $129;
 $132 = $58;
 $57 = $59;
 $133 = $57;
 $134 = HEAP32[$133>>2]|0;
 $51 = $61;
 $135 = $51;
 ;HEAP32[$60>>2]=HEAP32[$135>>2]|0;HEAP32[$60+4>>2]=HEAP32[$135+4>>2]|0;
 ;HEAP8[$56>>0]=HEAP8[$60>>0]|0;HEAP8[$56+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$56+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$56+3>>0]=HEAP8[$60+3>>0]|0;HEAP8[$56+4>>0]=HEAP8[$60+4>>0]|0;HEAP8[$56+5>>0]=HEAP8[$60+5>>0]|0;HEAP8[$56+6>>0]=HEAP8[$60+6>>0]|0;HEAP8[$56+7>>0]=HEAP8[$60+7>>0]|0;
 $54 = $132;
 HEAP32[$55>>2] = $134;
 $136 = $54;
 $53 = $55;
 $137 = $53;
 $138 = HEAP32[$137>>2]|0;
 HEAP32[$136>>2] = $138;
 $139 = ((($136)) + 4|0);
 $52 = $56;
 $140 = $52;
 ;HEAP32[$139>>2]=HEAP32[$140>>2]|0;HEAP32[$139+4>>2]=HEAP32[$140+4>>2]|0;
 $141 = $__na;
 $2 = $__h;
 $142 = $2;
 $1 = $142;
 $143 = $1;
 $0 = $143;
 $144 = $0;
 $145 = HEAP32[$144>>2]|0;
 $146 = ((($145)) + 8|0);
 $3 = $146;
 $147 = $3;
 $148 = $105;
 $14 = $141;
 $15 = $147;
 $16 = $148;
 $149 = $14;
 $150 = $15;
 $151 = $16;
 $13 = $151;
 $152 = $13;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 $9 = $149;
 $10 = $150;
 $11 = $152;
 $153 = $9;
 $154 = $10;
 $155 = $11;
 $8 = $155;
 $156 = $8;
 $5 = $153;
 $6 = $154;
 $7 = $156;
 $157 = $6;
 $158 = $7;
 $4 = $158;
 $159 = $4;
 ;HEAP8[$157>>0]=HEAP8[$159>>0]|0;HEAP8[$157+1>>0]=HEAP8[$159+1>>0]|0;HEAP8[$157+2>>0]=HEAP8[$159+2>>0]|0;HEAP8[$157+3>>0]=HEAP8[$159+3>>0]|0;HEAP8[$157+4>>0]=HEAP8[$159+4>>0]|0;HEAP8[$157+5>>0]=HEAP8[$159+5>>0]|0;HEAP8[$157+6>>0]=HEAP8[$159+6>>0]|0;HEAP8[$157+7>>0]=HEAP8[$159+7>>0]|0;
 $20 = $__h;
 $160 = $20;
 $19 = $160;
 $161 = $19;
 $18 = $161;
 $162 = $18;
 $163 = ((($162)) + 4|0);
 $164 = ((($163)) + 4|0);
 HEAP8[$164>>0] = 1;
 $165 = $106;
 $23 = $__h;
 $166 = $23;
 $22 = $166;
 $167 = $22;
 $21 = $167;
 $168 = $21;
 $169 = HEAP32[$168>>2]|0;
 $170 = ((($169)) + 4|0);
 HEAP32[$170>>2] = $165;
 $26 = $__h;
 $171 = $26;
 $25 = $171;
 $172 = $25;
 $24 = $172;
 $173 = $24;
 $174 = HEAP32[$173>>2]|0;
 HEAP32[$174>>2] = 0;
 $27 = $__h;
 $175 = $27;
 $48 = $agg$result;
 $49 = $175;
 $176 = $48;
 $177 = $49;
 $47 = $177;
 $178 = $47;
 $46 = $178;
 $179 = $46;
 $45 = $179;
 $180 = $45;
 $181 = HEAP32[$180>>2]|0;
 $__t$i$i = $181;
 $44 = $178;
 $182 = $44;
 $43 = $182;
 $183 = $43;
 HEAP32[$183>>2] = 0;
 $184 = $__t$i$i;
 $185 = $49;
 $42 = $185;
 $186 = $42;
 $41 = $186;
 $187 = $41;
 $40 = $187;
 $188 = $40;
 $189 = ((($188)) + 4|0);
 $28 = $189;
 $190 = $28;
 ;HEAP32[$50>>2]=HEAP32[$190>>2]|0;HEAP32[$50+4>>2]=HEAP32[$190+4>>2]|0;
 ;HEAP8[$39>>0]=HEAP8[$50>>0]|0;HEAP8[$39+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$50+3>>0]|0;HEAP8[$39+4>>0]=HEAP8[$50+4>>0]|0;HEAP8[$39+5>>0]=HEAP8[$50+5>>0]|0;HEAP8[$39+6>>0]=HEAP8[$50+6>>0]|0;HEAP8[$39+7>>0]=HEAP8[$50+7>>0]|0;
 $36 = $176;
 HEAP32[$37>>2] = $184;
 $191 = $36;
 $35 = $37;
 $192 = $35;
 $193 = HEAP32[$192>>2]|0;
 $29 = $39;
 $194 = $29;
 ;HEAP32[$38>>2]=HEAP32[$194>>2]|0;HEAP32[$38+4>>2]=HEAP32[$194+4>>2]|0;
 ;HEAP8[$34>>0]=HEAP8[$38>>0]|0;HEAP8[$34+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$34+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$34+3>>0]=HEAP8[$38+3>>0]|0;HEAP8[$34+4>>0]=HEAP8[$38+4>>0]|0;HEAP8[$34+5>>0]=HEAP8[$38+5>>0]|0;HEAP8[$34+6>>0]=HEAP8[$38+6>>0]|0;HEAP8[$34+7>>0]=HEAP8[$38+7>>0]|0;
 $32 = $191;
 HEAP32[$33>>2] = $193;
 $195 = $32;
 $31 = $33;
 $196 = $31;
 $197 = HEAP32[$196>>2]|0;
 HEAP32[$195>>2] = $197;
 $198 = ((($195)) + 4|0);
 $30 = $34;
 $199 = $30;
 ;HEAP32[$198>>2]=HEAP32[$199>>2]|0;HEAP32[$198+4>>2]=HEAP32[$199+4>>2]|0;
 $108 = 1;
 $91 = $__h;
 $200 = $91;
 $89 = $200;
 $90 = 0;
 $201 = $89;
 $88 = $201;
 $202 = $88;
 $87 = $202;
 $203 = $87;
 $204 = HEAP32[$203>>2]|0;
 $__tmp$i$i1 = $204;
 $205 = $90;
 $70 = $201;
 $206 = $70;
 $69 = $206;
 $207 = $69;
 HEAP32[$207>>2] = $205;
 $208 = $__tmp$i$i1;
 $209 = ($208|0)!=(0|0);
 if (!($209)) {
  STACKTOP = sp;return;
 }
 $68 = $201;
 $210 = $68;
 $67 = $210;
 $211 = $67;
 $212 = ((($211)) + 4|0);
 $213 = $__tmp$i$i1;
 $85 = $212;
 $86 = $213;
 $214 = $85;
 $215 = ((($214)) + 4|0);
 $216 = HEAP8[$215>>0]|0;
 $217 = $216&1;
 if ($217) {
  $218 = HEAP32[$214>>2]|0;
  $219 = $86;
  $220 = ((($219)) + 8|0);
  $84 = $220;
  $221 = $84;
  $81 = $218;
  $82 = $221;
  $222 = $81;
  $223 = $82;
  ;HEAP8[$80>>0]=HEAP8[$83>>0]|0;
  $78 = $222;
  $79 = $223;
 }
 $224 = $86;
 $225 = ($224|0)!=(0|0);
 if (!($225)) {
  STACKTOP = sp;return;
 }
 $226 = HEAP32[$214>>2]|0;
 $227 = $86;
 $75 = $226;
 $76 = $227;
 $77 = 1;
 $228 = $75;
 $229 = $76;
 $230 = $77;
 $72 = $228;
 $73 = $229;
 $74 = $230;
 $231 = $73;
 $71 = $231;
 $232 = $71;
 __ZdlPv($232);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 56|0;
 $35 = sp + 64|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $79 = $this;
 $80 = $__nbc;
 $81 = $79;
 $78 = $81;
 $82 = $78;
 $77 = $82;
 $83 = $77;
 $76 = $83;
 $84 = $76;
 $85 = ((($84)) + 4|0);
 $64 = $85;
 $86 = $64;
 $63 = $86;
 $87 = $63;
 $62 = $87;
 $88 = $62;
 $__npa = $88;
 $89 = $80;
 $90 = ($89>>>0)>(0);
 if ($90) {
  $91 = $__npa;
  $92 = $80;
  $4 = $91;
  $5 = $92;
  $93 = $4;
  $94 = $5;
  $1 = $93;
  $2 = $94;
  $3 = 0;
  $95 = $2;
  $96 = $95<<2;
  $0 = $96;
  $97 = $0;
  $98 = (__Znwj($97)|0);
  $99 = $98;
 } else {
  $99 = 0;
 }
 $27 = $81;
 $28 = $99;
 $100 = $27;
 $26 = $100;
 $101 = $26;
 $25 = $101;
 $102 = $25;
 $103 = HEAP32[$102>>2]|0;
 $__tmp$i = $103;
 $104 = $28;
 $9 = $100;
 $105 = $9;
 $8 = $105;
 $106 = $8;
 HEAP32[$106>>2] = $104;
 $107 = $__tmp$i;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $7 = $100;
  $109 = $7;
  $6 = $109;
  $110 = $6;
  $111 = ((($110)) + 4|0);
  $112 = $__tmp$i;
  $23 = $111;
  $24 = $112;
  $113 = $23;
  $22 = $113;
  $114 = $22;
  $21 = $114;
  $115 = $21;
  $20 = $115;
  $116 = $20;
  $117 = $24;
  $12 = $113;
  $118 = $12;
  $11 = $118;
  $119 = $11;
  $10 = $119;
  $120 = $10;
  $121 = HEAP32[$120>>2]|0;
  $17 = $116;
  $18 = $117;
  $19 = $121;
  $122 = $17;
  $123 = $18;
  $124 = $19;
  $14 = $122;
  $15 = $123;
  $16 = $124;
  $125 = $15;
  $13 = $125;
  $126 = $13;
  __ZdlPv($126);
 }
 $127 = $80;
 $31 = $81;
 $128 = $31;
 $30 = $128;
 $129 = $30;
 $29 = $129;
 $130 = $29;
 $131 = ((($130)) + 4|0);
 $34 = $131;
 $132 = $34;
 $33 = $132;
 $133 = $33;
 $32 = $133;
 $134 = $32;
 HEAP32[$134>>2] = $127;
 $135 = $80;
 $136 = ($135>>>0)>(0);
 if (!($136)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $137 = $__i;
  $138 = $80;
  $139 = ($137>>>0)<($138>>>0);
  if (!($139)) {
   break;
  }
  $140 = $__i;
  $37 = $81;
  $38 = $140;
  $141 = $37;
  $142 = $38;
  $36 = $141;
  $143 = $36;
  $35 = $143;
  $144 = $35;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + ($142<<2)|0);
  HEAP32[$146>>2] = 0;
  $147 = $__i;
  $148 = (($147) + 1)|0;
  $__i = $148;
 }
 $149 = ((($81)) + 8|0);
 $40 = $149;
 $150 = $40;
 $39 = $150;
 $151 = $39;
 $42 = $151;
 $152 = $42;
 $41 = $152;
 $153 = $41;
 $__pp = $153;
 $154 = $__pp;
 $155 = HEAP32[$154>>2]|0;
 $__cp = $155;
 $156 = $__cp;
 $157 = ($156|0)!=(0|0);
 if (!($157)) {
  STACKTOP = sp;return;
 }
 $158 = $__cp;
 $159 = ((($158)) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $80;
 $43 = $160;
 $44 = $161;
 $162 = $44;
 $163 = $44;
 $164 = (($163) - 1)|0;
 $165 = $162 & $164;
 $166 = ($165|0)!=(0);
 $167 = $43;
 $168 = $44;
 if ($166) {
  $171 = (($167>>>0) % ($168>>>0))&-1;
  $172 = $171;
 } else {
  $169 = (($168) - 1)|0;
  $170 = $167 & $169;
  $172 = $170;
 }
 $__chash = $172;
 $173 = $__pp;
 $174 = $__chash;
 $47 = $81;
 $48 = $174;
 $175 = $47;
 $176 = $48;
 $46 = $175;
 $177 = $46;
 $45 = $177;
 $178 = $45;
 $179 = HEAP32[$178>>2]|0;
 $180 = (($179) + ($176<<2)|0);
 HEAP32[$180>>2] = $173;
 $181 = $__chash;
 $__phash = $181;
 $182 = $__cp;
 $__pp = $182;
 $183 = $__cp;
 $184 = HEAP32[$183>>2]|0;
 $__cp = $184;
 while(1) {
  $185 = $__cp;
  $186 = ($185|0)!=(0|0);
  if (!($186)) {
   break;
  }
  $187 = $__cp;
  $188 = ((($187)) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $80;
  $49 = $189;
  $50 = $190;
  $191 = $50;
  $192 = $50;
  $193 = (($192) - 1)|0;
  $194 = $191 & $193;
  $195 = ($194|0)!=(0);
  $196 = $49;
  $197 = $50;
  if ($195) {
   $200 = (($196>>>0) % ($197>>>0))&-1;
   $201 = $200;
  } else {
   $198 = (($197) - 1)|0;
   $199 = $196 & $198;
   $201 = $199;
  }
  $__chash = $201;
  $202 = $__chash;
  $203 = $__phash;
  $204 = ($202|0)==($203|0);
  do {
   if ($204) {
    $205 = $__cp;
    $__pp = $205;
   } else {
    $206 = $__chash;
    $53 = $81;
    $54 = $206;
    $207 = $53;
    $208 = $54;
    $52 = $207;
    $209 = $52;
    $51 = $209;
    $210 = $51;
    $211 = HEAP32[$210>>2]|0;
    $212 = (($211) + ($208<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($213|0)==(0|0);
    if ($214) {
     $215 = $__pp;
     $216 = $__chash;
     $57 = $81;
     $58 = $216;
     $217 = $57;
     $218 = $58;
     $56 = $217;
     $219 = $56;
     $55 = $219;
     $220 = $55;
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + ($218<<2)|0);
     HEAP32[$222>>2] = $215;
     $223 = $__cp;
     $__pp = $223;
     $224 = $__chash;
     $__phash = $224;
     break;
    }
    $225 = $__cp;
    $__np = $225;
    while(1) {
     $226 = $__np;
     $227 = HEAP32[$226>>2]|0;
     $228 = ($227|0)!=(0|0);
     if (!($228)) {
      break;
     }
     $61 = $81;
     $229 = $61;
     $230 = ((($229)) + 16|0);
     $60 = $230;
     $231 = $60;
     $59 = $231;
     $232 = $59;
     $233 = $__cp;
     $234 = ((($233)) + 8|0);
     $235 = $__np;
     $236 = HEAP32[$235>>2]|0;
     $237 = ((($236)) + 8|0);
     $65 = $232;
     $66 = $234;
     $67 = $237;
     $238 = $66;
     $239 = $67;
     $240 = (__ZNK8charDataeqERKS_($238,$239)|0);
     if (!($240)) {
      break;
     }
     $241 = $__np;
     $242 = HEAP32[$241>>2]|0;
     $__np = $242;
    }
    $243 = $__np;
    $244 = HEAP32[$243>>2]|0;
    $245 = $__pp;
    HEAP32[$245>>2] = $244;
    $246 = $__chash;
    $70 = $81;
    $71 = $246;
    $247 = $70;
    $248 = $71;
    $69 = $247;
    $249 = $69;
    $68 = $249;
    $250 = $68;
    $251 = HEAP32[$250>>2]|0;
    $252 = (($251) + ($248<<2)|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = HEAP32[$253>>2]|0;
    $255 = $__np;
    HEAP32[$255>>2] = $254;
    $256 = $__cp;
    $257 = $__chash;
    $74 = $81;
    $75 = $257;
    $258 = $74;
    $259 = $75;
    $73 = $258;
    $260 = $73;
    $72 = $260;
    $261 = $72;
    $262 = HEAP32[$261>>2]|0;
    $263 = (($262) + ($259<<2)|0);
    $264 = HEAP32[$263>>2]|0;
    HEAP32[$264>>2] = $256;
   }
  } while(0);
  $265 = $__pp;
  $266 = HEAP32[$265>>2]|0;
  $__cp = $266;
 }
 STACKTOP = sp;return;
}
function __ZN7texture14loadByFullNameEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buffer = 0, $ext = 0, $i = 0, $t = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 288|0;
 $tmp = sp + 24|0;
 $t = sp;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 _memset(($buffer|0),0,260)|0;
 HEAP8[$buffer>>0] = 46;
 $3 = ((($buffer)) + 1|0);
 HEAP8[$3>>0] = 47;
 $4 = $1;
 (_strcat(($buffer|0),($4|0))|0);
 (__Z8strposixPc($buffer)|0);
 $5 = $1;
 $6 = (__Z6getextPKc($5)|0);
 $ext = $6;
 $7 = $ext;
 $8 = ((($7)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)==(80);
 if ($11) {
  label = 3;
 } else {
  $12 = $ext;
  $13 = ((($12)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(112);
  if ($16) {
   label = 3;
  } else {
   $18 = ((($2)) + 20|0);
   HEAP8[$18>>0] = 0;
  }
 }
 if ((label|0) == 3) {
  $17 = ((($2)) + 20|0);
  HEAP8[$17>>0] = 1;
 }
 $19 = $2;
 $20 = $t;
 $21 = $20;
 HEAP32[$21>>2] = $19;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24>>>0)<(8);
  $26 = $i;
  if (!($25)) {
   break;
  }
  $27 = (($t) + ($26)|0);
  $28 = HEAP8[$27>>0]|0;
  $b = $28;
  $29 = $b;
  $30 = $29&255;
  $31 = $30 & 15;
  $32 = (($31) + 97)|0;
  $33 = $32&255;
  $34 = $i;
  $35 = $34<<1;
  $36 = (($tmp) + ($35)|0);
  HEAP8[$36>>0] = $33;
  $37 = $b;
  $38 = $37&255;
  $39 = $38 >> 4;
  $40 = (($39) + 97)|0;
  $41 = $40&255;
  $42 = $i;
  $43 = $42<<1;
  $44 = (($43) + 1)|0;
  $45 = (($tmp) + ($44)|0);
  HEAP8[$45>>0] = $41;
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 $48 = $26<<1;
 $49 = (($tmp) + ($48)|0);
 HEAP8[$49>>0] = 0;
 $50 = $ext;
 (__Z6strextPcPKc($tmp,$50)|0);
 _emscripten_async_wget(($buffer|0),($tmp|0),(235|0),(236|0));
 STACKTOP = sp;return;
}
function __ZN7texture8onLoadedEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $$arith = 0, $$arith4 = 0, $$arith8 = 0, $$overflow = 0, $$overflow5 = 0, $$overflow9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c114 = 0, $c2 = 0;
 var $c215 = 0, $c3 = 0, $c316 = 0, $c4 = 0, $c417 = 0, $colorArray = 0, $dx = 0, $dx10 = 0, $dy = 0, $dy11 = 0, $end = 0, $end3 = 0, $h = 0, $h1 = 0, $h16 = 0, $iSurf = 0, $mip = 0, $mip4 = 0, $newColor = 0, $newColor7 = 0;
 var $srcBytes = 0, $srcStart = 0, $srcStart8 = 0, $start = 0, $start1 = 0, $start2 = 0, $start9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $w = 0, $w1 = 0, $w15 = 0, $x = 0, $x13 = 0, $y = 0, $y12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (_IMG_Load(($3|0))|0);
 $iSurf = $4;
 _glActiveTexture(33984);
 $5 = ((($2)) + 24|0);
 _glGenTextures(1,($5|0));
 $6 = ((($2)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 _glBindTexture(3553,($7|0));
 $8 = $iSurf;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $iSurf;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($10, $13)|0;
 $$arith8 = $14<<1;
 $$overflow9 = ($14>>>0)>(2147483647);
 $15 = $$overflow9 ? -1 : $$arith8;
 $16 = (__Znaj($15)|0);
 $colorArray = $16;
 $17 = $iSurf;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $srcBytes = $19;
 $20 = $iSurf;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $w = $22;
 $23 = $iSurf;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $h = $25;
 $26 = ((($2)) + 16|0);
 $27 = (__ZNK5named7getnameEv($26)|0);
 $28 = $w;
 $29 = $h;
 HEAP32[$vararg_buffer>>2] = $27;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $28;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $29;
 (_printf((48352|0),($vararg_buffer|0))|0);
 $30 = ((($2)) + 20|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)!=(0);
 $33 = $colorArray;
 if ($32) {
  $start = $33;
  $34 = $colorArray;
  $35 = $iSurf;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $iSurf;
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = Math_imul($37, $40)|0;
  $42 = (($34) + ($41<<1)|0);
  $end = $42;
  while(1) {
   $43 = $start;
   $44 = $end;
   $45 = ($43|0)!=($44|0);
   if (!($45)) {
    break;
   }
   $46 = $srcBytes;
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = $48 >> 4;
   $50 = $49 << 12;
   $51 = $srcBytes;
   $52 = ((($51)) + 1|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $54 >> 4;
   $56 = $55 << 8;
   $57 = $50 | $56;
   $58 = $srcBytes;
   $59 = ((($58)) + 2|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $61 >> 4;
   $63 = $62 << 4;
   $64 = $57 | $63;
   $65 = $srcBytes;
   $66 = ((($65)) + 3|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $68 >> 4;
   $70 = $64 | $69;
   $71 = $70&65535;
   $72 = $start;
   HEAP16[$72>>1] = $71;
   $73 = $start;
   $74 = ((($73)) + 2|0);
   $start = $74;
   $75 = $srcBytes;
   $76 = ((($75)) + 4|0);
   $srcBytes = $76;
  }
  $77 = $iSurf;
  _SDL_FreeSurface(($77|0));
  $78 = $w;
  $79 = $h;
  $80 = $colorArray;
  _glTexImage2D(3553,0,6408,($78|0),($79|0),0,6408,32819,($80|0));
  $mip = 0;
  while(1) {
   $81 = $w;
   $82 = ($81|0)>(1);
   $83 = $h;
   $84 = ($83|0)>(1);
   $85 = $82 ? 1 : $84;
   if (!($85)) {
    break;
   }
   $86 = $w;
   $87 = $86 >> 1;
   $88 = ($87|0)!=(0);
   $89 = $w;
   $90 = $89 >> 1;
   $91 = $88 ? $90 : 1;
   $w1 = $91;
   $92 = $h;
   $93 = $92 >> 1;
   $94 = ($93|0)!=(0);
   $95 = $h;
   $96 = $95 >> 1;
   $97 = $94 ? $96 : 1;
   $h1 = $97;
   $98 = $w1;
   $99 = $h1;
   $100 = Math_imul($98, $99)|0;
   $$arith4 = $100<<1;
   $$overflow5 = ($100>>>0)>(2147483647);
   $101 = $$overflow5 ? -1 : $$arith4;
   $102 = (__Znaj($101)|0);
   $newColor = $102;
   $103 = $colorArray;
   $srcStart = $103;
   $104 = $newColor;
   $start1 = $104;
   $105 = $w;
   $106 = ($105|0)>(1);
   $107 = $106&1;
   $dx = $107;
   $108 = $h;
   $109 = ($108|0)>(1);
   $110 = $w;
   $111 = $109 ? $110 : 0;
   $dy = $111;
   $y = 0;
   while(1) {
    $112 = $y;
    $113 = $h1;
    $114 = ($112|0)<($113|0);
    if (!($114)) {
     break;
    }
    $x = 0;
    while(1) {
     $115 = $x;
     $116 = $w1;
     $117 = ($115|0)<($116|0);
     if (!($117)) {
      break;
     }
     $118 = $srcStart;
     $119 = HEAP16[$118>>1]|0;
     $c1 = $119;
     $120 = $srcStart;
     $121 = $dy;
     $122 = (($120) + ($121<<1)|0);
     $123 = HEAP16[$122>>1]|0;
     $c2 = $123;
     $124 = $dx;
     $125 = $srcStart;
     $126 = (($125) + ($124<<1)|0);
     $srcStart = $126;
     $127 = $srcStart;
     $128 = HEAP16[$127>>1]|0;
     $c3 = $128;
     $129 = $srcStart;
     $130 = $dy;
     $131 = (($129) + ($130<<1)|0);
     $132 = HEAP16[$131>>1]|0;
     $c4 = $132;
     $133 = $c1;
     $134 = $133&65535;
     $135 = $134 >> 12;
     $136 = $c2;
     $137 = $136&65535;
     $138 = $137 >> 12;
     $139 = (($135) + ($138))|0;
     $140 = $c3;
     $141 = $140&65535;
     $142 = $141 >> 12;
     $143 = (($139) + ($142))|0;
     $144 = $c4;
     $145 = $144&65535;
     $146 = $145 >> 12;
     $147 = (($143) + ($146))|0;
     $148 = $147 >> 2;
     $149 = $148 << 12;
     $150 = $c1;
     $151 = $150&65535;
     $152 = $151 >> 8;
     $153 = $152 & 15;
     $154 = $c2;
     $155 = $154&65535;
     $156 = $155 >> 8;
     $157 = $156 & 15;
     $158 = (($153) + ($157))|0;
     $159 = $c3;
     $160 = $159&65535;
     $161 = $160 >> 8;
     $162 = $161 & 15;
     $163 = (($158) + ($162))|0;
     $164 = $c4;
     $165 = $164&65535;
     $166 = $165 >> 8;
     $167 = $166 & 15;
     $168 = (($163) + ($167))|0;
     $169 = $168 >> 2;
     $170 = $169 << 8;
     $171 = $149 | $170;
     $172 = $c1;
     $173 = $172&65535;
     $174 = $173 >> 4;
     $175 = $174 & 15;
     $176 = $c2;
     $177 = $176&65535;
     $178 = $177 >> 4;
     $179 = $178 & 15;
     $180 = (($175) + ($179))|0;
     $181 = $c3;
     $182 = $181&65535;
     $183 = $182 >> 4;
     $184 = $183 & 15;
     $185 = (($180) + ($184))|0;
     $186 = $c4;
     $187 = $186&65535;
     $188 = $187 >> 4;
     $189 = $188 & 15;
     $190 = (($185) + ($189))|0;
     $191 = $190 >> 2;
     $192 = $191 << 4;
     $193 = $171 | $192;
     $194 = $c1;
     $195 = $194&65535;
     $196 = $195 & 15;
     $197 = $c2;
     $198 = $197&65535;
     $199 = $198 & 15;
     $200 = (($196) + ($199))|0;
     $201 = $c3;
     $202 = $201&65535;
     $203 = $202 & 15;
     $204 = (($200) + ($203))|0;
     $205 = $c4;
     $206 = $205&65535;
     $207 = $206 & 15;
     $208 = (($204) + ($207))|0;
     $209 = $208 >> 2;
     $210 = $193 | $209;
     $211 = $210&65535;
     $212 = $start1;
     HEAP16[$212>>1] = $211;
     $213 = $x;
     $214 = (($213) + 1)|0;
     $x = $214;
     $215 = $start1;
     $216 = ((($215)) + 2|0);
     $start1 = $216;
     $217 = $dx;
     $218 = $srcStart;
     $219 = (($218) + ($217<<1)|0);
     $srcStart = $219;
    }
    $220 = $y;
    $221 = (($220) + 1)|0;
    $y = $221;
    $222 = $dy;
    $223 = $srcStart;
    $224 = (($223) + ($222<<1)|0);
    $srcStart = $224;
   }
   $225 = $mip;
   $226 = (($225) + 1)|0;
   $mip = $226;
   $227 = $w1;
   $228 = $h1;
   $229 = $newColor;
   _glTexImage2D(3553,($226|0),6408,($227|0),($228|0),0,6408,32819,($229|0));
   $230 = $w1;
   $w = $230;
   $231 = $h1;
   $h = $231;
   $232 = $colorArray;
   $233 = ($232|0)==(0|0);
   if (!($233)) {
    __ZdaPv($232);
   }
   $234 = $newColor;
   $colorArray = $234;
  }
  $235 = $colorArray;
  $236 = ($235|0)==(0|0);
  if ($236) {
   _glTexParameteri(3553,10242,10497);
   _glTexParameteri(3553,10243,10497);
   _glTexParameteri(3553,10241,9987);
   STACKTOP = sp;return;
  }
  __ZdaPv($235);
  _glTexParameteri(3553,10242,10497);
  _glTexParameteri(3553,10243,10497);
  _glTexParameteri(3553,10241,9987);
  STACKTOP = sp;return;
 } else {
  $start2 = $33;
  $237 = $colorArray;
  $238 = $iSurf;
  $239 = ((($238)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $iSurf;
  $242 = ((($241)) + 12|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = Math_imul($240, $243)|0;
  $245 = (($237) + ($244<<1)|0);
  $end3 = $245;
  while(1) {
   $246 = $start2;
   $247 = $end3;
   $248 = ($246|0)!=($247|0);
   if (!($248)) {
    break;
   }
   $249 = $srcBytes;
   $250 = HEAP8[$249>>0]|0;
   $251 = $250&255;
   $252 = $251 >> 3;
   $253 = $252 << 11;
   $254 = $srcBytes;
   $255 = ((($254)) + 1|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256&255;
   $258 = $257 >> 2;
   $259 = $258 << 5;
   $260 = $253 | $259;
   $261 = $srcBytes;
   $262 = ((($261)) + 2|0);
   $263 = HEAP8[$262>>0]|0;
   $264 = $263&255;
   $265 = $264 >> 3;
   $266 = $260 | $265;
   $267 = $266&65535;
   $268 = $start2;
   HEAP16[$268>>1] = $267;
   $269 = $start2;
   $270 = ((($269)) + 2|0);
   $start2 = $270;
   $271 = $srcBytes;
   $272 = ((($271)) + 4|0);
   $srcBytes = $272;
  }
  $273 = $iSurf;
  _SDL_FreeSurface(($273|0));
  $274 = $w;
  $275 = $h;
  $276 = $colorArray;
  _glTexImage2D(3553,0,6407,($274|0),($275|0),0,6407,33635,($276|0));
  $mip4 = 0;
  while(1) {
   $277 = $w;
   $278 = ($277|0)>(1);
   $279 = $h;
   $280 = ($279|0)>(1);
   $281 = $278 ? 1 : $280;
   if (!($281)) {
    break;
   }
   $282 = $w;
   $283 = $282 >> 1;
   $284 = ($283|0)!=(0);
   $285 = $w;
   $286 = $285 >> 1;
   $287 = $284 ? $286 : 1;
   $w15 = $287;
   $288 = $h;
   $289 = $288 >> 1;
   $290 = ($289|0)!=(0);
   $291 = $h;
   $292 = $291 >> 1;
   $293 = $290 ? $292 : 1;
   $h16 = $293;
   $294 = $w15;
   $295 = $h16;
   $296 = Math_imul($294, $295)|0;
   $$arith = $296<<1;
   $$overflow = ($296>>>0)>(2147483647);
   $297 = $$overflow ? -1 : $$arith;
   $298 = (__Znaj($297)|0);
   $newColor7 = $298;
   $299 = $colorArray;
   $srcStart8 = $299;
   $300 = $newColor7;
   $start9 = $300;
   $301 = $w;
   $302 = ($301|0)>(1);
   $303 = $302&1;
   $dx10 = $303;
   $304 = $h;
   $305 = ($304|0)>(1);
   $306 = $w;
   $307 = $305 ? $306 : 0;
   $dy11 = $307;
   $y12 = 0;
   while(1) {
    $308 = $y12;
    $309 = $h16;
    $310 = ($308|0)<($309|0);
    if (!($310)) {
     break;
    }
    $x13 = 0;
    while(1) {
     $311 = $x13;
     $312 = $w15;
     $313 = ($311|0)<($312|0);
     if (!($313)) {
      break;
     }
     $314 = $srcStart8;
     $315 = HEAP16[$314>>1]|0;
     $c114 = $315;
     $316 = $srcStart8;
     $317 = $dy11;
     $318 = (($316) + ($317<<1)|0);
     $319 = HEAP16[$318>>1]|0;
     $c215 = $319;
     $320 = $dx10;
     $321 = $srcStart8;
     $322 = (($321) + ($320<<1)|0);
     $srcStart8 = $322;
     $323 = $srcStart8;
     $324 = HEAP16[$323>>1]|0;
     $c316 = $324;
     $325 = $srcStart8;
     $326 = $dy11;
     $327 = (($325) + ($326<<1)|0);
     $328 = HEAP16[$327>>1]|0;
     $c417 = $328;
     $329 = $c114;
     $330 = $329&65535;
     $331 = $330 >> 11;
     $332 = $c215;
     $333 = $332&65535;
     $334 = $333 >> 11;
     $335 = (($331) + ($334))|0;
     $336 = $c316;
     $337 = $336&65535;
     $338 = $337 >> 11;
     $339 = (($335) + ($338))|0;
     $340 = $c417;
     $341 = $340&65535;
     $342 = $341 >> 11;
     $343 = (($339) + ($342))|0;
     $344 = $343 >> 2;
     $345 = $344 << 11;
     $346 = $c114;
     $347 = $346&65535;
     $348 = $347 >> 5;
     $349 = $348 & 63;
     $350 = $c215;
     $351 = $350&65535;
     $352 = $351 >> 5;
     $353 = $352 & 63;
     $354 = (($349) + ($353))|0;
     $355 = $c316;
     $356 = $355&65535;
     $357 = $356 >> 5;
     $358 = $357 & 63;
     $359 = (($354) + ($358))|0;
     $360 = $c417;
     $361 = $360&65535;
     $362 = $361 >> 5;
     $363 = $362 & 63;
     $364 = (($359) + ($363))|0;
     $365 = $364 >> 2;
     $366 = $365 << 5;
     $367 = $345 | $366;
     $368 = $c114;
     $369 = $368&65535;
     $370 = $369 & 31;
     $371 = $c215;
     $372 = $371&65535;
     $373 = $372 & 31;
     $374 = (($370) + ($373))|0;
     $375 = $c316;
     $376 = $375&65535;
     $377 = $376 & 31;
     $378 = (($374) + ($377))|0;
     $379 = $c417;
     $380 = $379&65535;
     $381 = $380 & 31;
     $382 = (($378) + ($381))|0;
     $383 = $382 >> 2;
     $384 = $367 | $383;
     $385 = $384&65535;
     $386 = $start9;
     HEAP16[$386>>1] = $385;
     $387 = $x13;
     $388 = (($387) + 1)|0;
     $x13 = $388;
     $389 = $start9;
     $390 = ((($389)) + 2|0);
     $start9 = $390;
     $391 = $dx10;
     $392 = $srcStart8;
     $393 = (($392) + ($391<<1)|0);
     $srcStart8 = $393;
    }
    $394 = $y12;
    $395 = (($394) + 1)|0;
    $y12 = $395;
    $396 = $dy11;
    $397 = $srcStart8;
    $398 = (($397) + ($396<<1)|0);
    $srcStart8 = $398;
   }
   $399 = $mip4;
   $400 = (($399) + 1)|0;
   $mip4 = $400;
   $401 = $w15;
   $402 = $h16;
   $403 = $newColor7;
   _glTexImage2D(3553,($400|0),6407,($401|0),($402|0),0,6407,33635,($403|0));
   $404 = $w15;
   $w = $404;
   $405 = $h16;
   $h = $405;
   $406 = $colorArray;
   $407 = ($406|0)==(0|0);
   if (!($407)) {
    __ZdaPv($406);
   }
   $408 = $newColor7;
   $colorArray = $408;
  }
  $409 = $colorArray;
  $410 = ($409|0)==(0|0);
  if ($410) {
   _glTexParameteri(3553,10242,10497);
   _glTexParameteri(3553,10243,10497);
   _glTexParameteri(3553,10241,9987);
   STACKTOP = sp;return;
  }
  __ZdaPv($409);
  _glTexParameteri(3553,10242,10497);
  _glTexParameteri(3553,10243,10497);
  _glTexParameteri(3553,10241,9987);
  STACKTOP = sp;return;
 }
}
function __ZN7textureD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 48312;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  __ZN8resourceI7texture8countrefLi512EED2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ((($3)) + 24|0);
 __THREW__ = 0;
 invoke_vii(237,1,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZN8resourceI7texture8countrefLi512EED2Ev($3);
  $13 = $1;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  __ZN8resourceI7texture8countrefLi512EED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN7textureD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7textureD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN7texture3useEi($this,$unit) {
 $this = $this|0;
 $unit = $unit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $unit;
 $2 = $0;
 $3 = $1;
 $4 = (33984 + ($3))|0;
 _glActiveTexture(($4|0));
 $5 = ((($2)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 _glBindTexture(3553,($6|0));
 STACKTOP = sp;return;
}
function __ZN7texture9setfilterEi($this,$filter) {
 $this = $this|0;
 $filter = $filter|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $filter;
 $2 = $0;
 __ZN7texture3useEi($2,0);
 $3 = $1;
 switch ($3|0) {
 case 0:  {
  _glTexParameteri(3553,10240,9728);
  _glTexParameteri(3553,10241,9728);
  break;
 }
 case 4:  {
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10241,9987);
  break;
 }
 case 1:  {
  _glTexParameteri(3553,10240,9728);
  _glTexParameteri(3553,10241,9984);
  break;
 }
 case 2:  {
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10241,9729);
  break;
 }
 case 3:  {
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10241,9985);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZN7texture4initEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 8|0;
 _glActiveTexture(33984);
 _glGenTextures(1,(48296|0));
 $0 = HEAP32[48296>>2]|0;
 _glBindTexture(3553,($0|0));
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(16);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = (($t) + ($3<<1)|0);
  HEAP16[$4>>1] = -17473;
  $5 = $i;
  $6 = (($5) + 1)|0;
  $i = $6;
 }
 _glTexImage2D(3553,0,6408,4,4,0,6408,32819,($t|0));
 _glTexParameteri(3553,10241,9729);
 STACKTOP = sp;return;
}
function __ZN7textureC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8resourceI7texture8countrefLi512EEC2Ev($1);
 $2 = 48312;
 HEAP32[$1>>2] = $2;
 $3 = HEAP32[48296>>2]|0;
 $4 = ((($1)) + 24|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN7texture8useWhiteEi($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $slot;
 $1 = $0;
 $2 = (33984 + ($1))|0;
 _glActiveTexture(($2|0));
 $3 = HEAP32[48296>>2]|0;
 _glBindTexture(3553,($3|0));
 STACKTOP = sp;return;
}
function __ZL15textureOnLoadedPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0;
 var $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = $name;
 $1 = $t;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5>>>0)<(8);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $7<<1;
  $9 = $0;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (($12) - 97)|0;
  $14 = $i;
  $15 = $14<<1;
  $16 = (($15) + 1)|0;
  $17 = $0;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = (($20) - 97)|0;
  $22 = $21 << 4;
  $23 = (($13) + ($22))|0;
  $24 = $23&255;
  $25 = $i;
  $26 = (($t) + ($25)|0);
  HEAP8[$26>>0] = $24;
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $29 = $t;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $31;
 $d = $35;
 $36 = $d;
 $37 = $0;
 __ZN7texture8onLoadedEPKc($36,$37);
 $38 = $0;
 (_remove(($38|0))|0);
 STACKTOP = sp;return;
}
function __ZL15textureOnFailedPKc($name) {
 $name = $name|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 STACKTOP = sp;return;
}
function __ZN8resourceI7texture8countrefLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZN12baseresourceI7textureLi512EED2Ev($2);
 $3 = ((($1)) + 8|0);
 __ZN8duallinkD2Ev($3);
 __ZN8countrefD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8resourceI7texture8countrefLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8countrefC2Ev($3);
 $4 = ((($3)) + 8|0);
 __THREW__ = 0;
 invoke_vi(83,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZN8countrefD2Ev($3);
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
 $7 = ((($3)) + 16|0);
 __THREW__ = 0;
 invoke_vi(238,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = 48528;
  HEAP32[$3>>2] = $10;
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 $15 = ((($3)) + 8|0);
 __ZN8duallinkD2Ev($15);
 __ZN8countrefD2Ev($3);
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN12baseresourceI7textureLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5namedD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI7textureLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5namedC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8resourceI7texture8countrefLi512EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8resourceI7texture8countrefLi512EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __Z11touchHandleiPK20EmscriptenTouchEventPv($eventType,$touchEvent,$0) {
 $eventType = $eventType|0;
 $touchEvent = $touchEvent|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $height = 0, $isFullScreen = 0, $or$cond = 0, $or$cond3 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width = sp + 8|0;
 $height = sp + 12|0;
 $isFullScreen = sp + 16|0;
 $1 = $eventType;
 $2 = $touchEvent;
 $3 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  _emscripten_get_canvas_size(($width|0),($height|0),($isFullScreen|0));
  $7 = $2;
  $8 = ((($7)) + 20|0);
  $9 = ((($8)) + 44|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($10|0));
  $12 = HEAP32[$width>>2]|0;
  $13 = (+($12|0));
  $14 = $11 / $13;
  HEAPF32[(48540)>>2] = $14;
  $15 = $2;
  $16 = ((($15)) + 20|0);
  $17 = ((($16)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (+($18|0));
  $20 = HEAP32[$height>>2]|0;
  $21 = (+($20|0));
  $22 = $19 / $21;
  HEAPF32[(48544)>>2] = $22;
 }
 $23 = $2;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(1);
 $26 = $1;
 $27 = ($26|0)==(22);
 $or$cond = $25 & $27;
 if ($or$cond) {
  HEAP32[48536>>2] = 1;
 }
 $28 = $1;
 $29 = ($28|0)==(23);
 $30 = $1;
 $31 = ($30|0)==(25);
 $or$cond3 = $29 | $31;
 if (!($or$cond3)) {
  STACKTOP = sp;return 1;
 }
 HEAP32[48536>>2] = 0;
 STACKTOP = sp;return 1;
}
function __Z11mouseHandleiPK20EmscriptenMouseEventPv($eventType,$mouseEvent,$0) {
 $eventType = $eventType|0;
 $mouseEvent = $mouseEvent|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $height = 0, $isFullScreen = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width = sp + 8|0;
 $height = sp + 12|0;
 $isFullScreen = sp + 16|0;
 $1 = $eventType;
 $2 = $mouseEvent;
 $3 = $0;
 _emscripten_get_canvas_size(($width|0),($height|0),($isFullScreen|0));
 $4 = $2;
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (+($6|0));
 $8 = HEAP32[$width>>2]|0;
 $9 = (+($8|0));
 $10 = $7 / $9;
 HEAPF32[(48540)>>2] = $10;
 $11 = $2;
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = HEAP32[$height>>2]|0;
 $16 = (+($15|0));
 $17 = $14 / $16;
 HEAPF32[(48544)>>2] = $17;
 $18 = $1;
 $19 = ($18|0)==(5);
 if ($19) {
  $20 = $2;
  $21 = ((($20)) + 40|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = ($23|0)==(0);
  if ($24) {
   HEAP32[48536>>2] = 1;
  }
 }
 $25 = $1;
 $26 = ($25|0)==(6);
 if (!($26)) {
  STACKTOP = sp;return 1;
 }
 $27 = $2;
 $28 = ((($27)) + 40|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = ($30|0)==(0);
 if (!($31)) {
  STACKTOP = sp;return 1;
 }
 HEAP32[48536>>2] = 0;
 STACKTOP = sp;return 1;
}
function __Z4swapv() {
 var $0 = 0, $1 = 0, $height = 0, $isFullScreen = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width = sp + 8|0;
 $height = sp;
 $isFullScreen = sp + 4|0;
 _emscripten_get_canvas_size(($width|0),($height|0),($isFullScreen|0));
 $0 = HEAP32[$width>>2]|0;
 $1 = HEAP32[$height>>2]|0;
 _glutReshapeWindow(($0|0),($1|0));
 _glutSwapBuffers();
 STACKTOP = sp;return;
}
function __Z9initTouchPFvvE($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $c;
 $n = 1;
 _glutInitWindowSize(800,600);
 _glutInitDisplayMode(18);
 (_glutCreateWindow((48552|0))|0);
 $1 = $0;
 _glutDisplayFunc(($1|0));
 _glutReshapeFunc((239|0));
 ;HEAP32[48536>>2]=0|0;HEAP32[48536+4>>2]=0|0;HEAP32[48536+8>>2]=0|0;
 (_emscripten_set_touchstart_callback((48568|0),(0|0),1,(240|0))|0);
 (_emscripten_set_touchend_callback((48568|0),(0|0),1,(240|0))|0);
 (_emscripten_set_touchmove_callback((48568|0),(0|0),1,(240|0))|0);
 (_emscripten_set_touchcancel_callback((48568|0),(0|0),1,(240|0))|0);
 (_emscripten_set_mousedown_callback((48568|0),(0|0),1,(241|0))|0);
 (_emscripten_set_mouseup_callback((48568|0),(0|0),1,(241|0))|0);
 (_emscripten_set_mousemove_callback((48568|0),(0|0),1,(241|0))|0);
 (_emscripten_set_mouseleave_callback((48568|0),(0|0),1,(241|0))|0);
 (_emscripten_set_mouseenter_callback((48568|0),(0|0),1,(241|0))|0);
 $2 = (_emscripten_lock_orientation(12)|0);
 $3 = ($2|0)==(-1);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (_printf((48576|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function __Z7touchgov() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glutMainLoop();
 return;
}
function __Z5errorPKcz($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $arg = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $arg = sp;
 $buf = sp + 24|0;
 $0 = $format;
 HEAP32[$arg>>2] = $varargs;
 $1 = $0;
 (_vsnprintf($buf,1024,$1,$arg)|0);
 (_puts(($buf|0))|0);
 STACKTOP = sp;return;
}
function __ZN6buffer5allocEiii($this,$size,$_defaulttarget,$usage) {
 $this = $this|0;
 $size = $size|0;
 $_defaulttarget = $_defaulttarget|0;
 $usage = $usage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 12|0;
 $0 = $this;
 $1 = $size;
 $2 = $_defaulttarget;
 $3 = $usage;
 $6 = $0;
 $7 = $2;
 $8 = ((($6)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($6)) + 12|0);
 _glGenBuffers(1,($9|0));
 $10 = ((($6)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 __ZN6buffer5setupC2EPS_i($s,$6,$11);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = $3;
 __THREW__ = 0;
 invoke_viiii(242,($13|0),($14|0),(0|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $4 = $18;
  $5 = $19;
  __ZN6buffer5setupD2Ev($s);
  $20 = $4;
  $21 = $5;
  ___resumeException($20|0);
  // unreachable;
 } else {
  __ZN6buffer5setupD2Ev($s);
  STACKTOP = sp;return;
 }
}
function __ZN6bufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 48624;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  __ZN8countrefD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ((($3)) + 12|0);
 __THREW__ = 0;
 invoke_vii(243,1,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZN8countrefD2Ev($3);
  $13 = $1;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  __ZN8countrefD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN6bufferD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6bufferD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN6buffer7setdataEPvii($this,$data,$size,$offset) {
 $this = $this|0;
 $data = $data|0;
 $size = $size|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 12|0;
 $0 = $this;
 $1 = $data;
 $2 = $size;
 $3 = $offset;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 __ZN6buffer5setupC2EPS_i($s,$6,$8);
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = $2;
 $13 = $1;
 __THREW__ = 0;
 invoke_viiii(244,($10|0),($11|0),($12|0),($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $4 = $16;
  $5 = $17;
  __ZN6buffer5setupD2Ev($s);
  $18 = $4;
  $19 = $5;
  ___resumeException($18|0);
  // unreachable;
 } else {
  __ZN6buffer5setupD2Ev($s);
  STACKTOP = sp;return;
 }
}
function __ZN6buffer5setupC2EPS_($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _glBindBuffer(($6|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN6buffer5setupC2EPS_i($this,$b,$target) {
 $this = $this|0;
 $b = $b|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $target;
 $3 = $0;
 $4 = $2;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 _glBindBuffer(($5|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN6buffer5setupD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vii(245,($2|0),0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6shader6loaderEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0;
 var $__a$i$i$i = 0, $__a$i$i$i17 = 0, $__a$i$i$i22 = 0, $__a$i$i$i9 = 0, $__a$i$i2 = 0, $__i$i$i = 0, $__i$i$i$i = 0, $__i$i$i$i10 = 0, $__i$i$i$i18 = 0, $__i$i$i$i23 = 0, $__i$i$i3 = 0, $bCompile = 0, $buffer = 0, $charArray = 0, $count = 0, $err = 0, $len = 0, $length = 0, $macro = 0, $name1 = 0;
 var $next = 0, $str = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $61 = sp + 24|0;
 $64 = sp + 1634|0;
 $91 = sp + 1638|0;
 $92 = sp + 1637|0;
 $95 = sp;
 $98 = sp + 1636|0;
 $126 = sp + 8|0;
 $129 = sp + 1627|0;
 $156 = sp + 1626|0;
 $157 = sp + 1625|0;
 $160 = sp + 64|0;
 $163 = sp + 1624|0;
 $181 = sp + 32|0;
 $184 = sp + 1628|0;
 $211 = sp + 1630|0;
 $212 = sp + 1633|0;
 $215 = sp + 40|0;
 $218 = sp + 1635|0;
 $236 = sp + 48|0;
 $239 = sp + 1639|0;
 $266 = sp + 1632|0;
 $267 = sp + 1631|0;
 $270 = sp + 56|0;
 $273 = sp + 1629|0;
 $name1 = sp + 644|0;
 $macro = sp + 656|0;
 $303 = sp + 672|0;
 $304 = sp + 684|0;
 $305 = sp + 696|0;
 $306 = sp + 708|0;
 $str = sp + 720|0;
 $buffer = sp + 744|0;
 $len = sp + 748|0;
 $charArray = sp + 752|0;
 $length = sp + 760|0;
 $bCompile = sp + 768|0;
 $err = sp + 1364|0;
 $count = sp + 772|0;
 $299 = $this;
 $300 = $name;
 $307 = $299;
 $308 = HEAP8[48744>>0]|0;
 $309 = ($308<<24>>24)==(0);
 do {
  if ($309) {
   $310 = (___cxa_guard_acquire((48744|0))|0);
   $311 = ($310|0)!=(0);
   if ($311) {
    $297 = 48752;
    $298 = 48768;
    $312 = $297;
    $296 = $312;
    $313 = $296;
    $295 = $313;
    $314 = $295;
    $294 = $314;
    $315 = $298;
    $316 = $298;
    __THREW__ = 0;
    $317 = (invoke_ii(246,($316|0))|0);
    $318 = __THREW__; __THREW__ = 0;
    $319 = $318&1;
    if (!($319)) {
     __THREW__ = 0;
     invoke_viii(247,($312|0),($315|0),($317|0));
     $320 = __THREW__; __THREW__ = 0;
     $321 = $320&1;
     if (!($321)) {
      (___cxa_atexit((248|0),(48752|0),(___dso_handle|0))|0);
      ___cxa_guard_release((48744|0));
      break;
     }
    }
    $506 = ___cxa_find_matching_catch()|0;
    $507 = tempRet0;
    $301 = $506;
    $302 = $507;
    ___cxa_guard_abort((48744|0));
    $817 = $301;
    $818 = $302;
    ___resumeException($817|0);
    // unreachable;
   }
  }
 } while(0);
 $293 = $name1;
 $322 = $293;
 $292 = $322;
 $323 = $292;
 $291 = $323;
 $324 = $291;
 $290 = $324;
 $289 = $322;
 $325 = $289;
 $288 = $325;
 $326 = $288;
 $287 = $326;
 $327 = $287;
 $__a$i$i = $327;
 $__i$i$i = 0;
 while(1) {
  $328 = $__i$i$i;
  $329 = ($328>>>0)<(3);
  if (!($329)) {
   break;
  }
  $330 = $__i$i$i;
  $331 = $__a$i$i;
  $332 = (($331) + ($330<<2)|0);
  HEAP32[$332>>2] = 0;
  $333 = $__i$i$i;
  $334 = (($333) + 1)|0;
  $__i$i$i = $334;
 }
 $286 = $macro;
 $335 = $286;
 $285 = $335;
 $336 = $285;
 $284 = $336;
 $337 = $284;
 $283 = $337;
 $282 = $335;
 $338 = $282;
 $281 = $338;
 $339 = $281;
 $280 = $339;
 $340 = $280;
 $__a$i$i2 = $340;
 $__i$i$i3 = 0;
 while(1) {
  $341 = $__i$i$i3;
  $342 = ($341>>>0)<(3);
  if (!($342)) {
   break;
  }
  $343 = $__i$i$i3;
  $344 = $__a$i$i2;
  $345 = (($344) + ($343<<2)|0);
  HEAP32[$345>>2] = 0;
  $346 = $__i$i$i3;
  $347 = (($346) + 1)|0;
  $__i$i$i3 = $347;
 }
 $348 = $300;
 __THREW__ = 0;
 $349 = (invoke_iii(249,($348|0),35)|0);
 $350 = __THREW__; __THREW__ = 0;
 $351 = $350&1;
 do {
  if ($351) {
   label = 35;
  } else {
   $next = $349;
   $352 = $next;
   $353 = ($352|0)!=(0|0);
   $354 = $300;
   if ($353) {
    $355 = $next;
    $356 = $300;
    $357 = $355;
    $358 = $356;
    $359 = (($357) - ($358))|0;
    $277 = $303;
    $278 = $354;
    $279 = $359;
    $360 = $277;
    $276 = $360;
    $361 = $276;
    $275 = $361;
    $362 = $275;
    $274 = $362;
    $363 = $278;
    $364 = $279;
    __THREW__ = 0;
    invoke_viii(247,($360|0),($363|0),($364|0));
    $365 = __THREW__; __THREW__ = 0;
    $366 = $365&1;
    if ($366) {
     label = 35;
     break;
    }
    $271 = $name1;
    $272 = $303;
    $367 = $271;
    $368 = $272;
    ;HEAP8[$270>>0]=HEAP8[$273>>0]|0;
    $268 = $367;
    $269 = $368;
    $369 = $268;
    $265 = $369;
    $370 = $265;
    $264 = $370;
    $263 = $370;
    $371 = $263;
    $262 = $371;
    $372 = $262;
    $261 = $372;
    $373 = $261;
    $374 = HEAP8[$373>>0]|0;
    $375 = $374&255;
    $376 = $375 & 1;
    $377 = ($376|0)!=(0);
    if ($377) {
     $256 = $370;
     $378 = $256;
     $255 = $378;
     $379 = $255;
     $254 = $379;
     $380 = $254;
     $381 = ((($380)) + 8|0);
     $382 = HEAP32[$381>>2]|0;
     HEAP8[$266>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($382,$266);
     $247 = $370;
     $248 = 0;
     $383 = $247;
     $384 = $248;
     $246 = $383;
     $385 = $246;
     $245 = $385;
     $386 = $245;
     $387 = ((($386)) + 4|0);
     HEAP32[$387>>2] = $384;
    } else {
     $253 = $370;
     $388 = $253;
     $252 = $388;
     $389 = $252;
     $251 = $389;
     $390 = $251;
     $391 = ((($390)) + 1|0);
     $250 = $391;
     $392 = $250;
     $249 = $392;
     $393 = $249;
     HEAP8[$267>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($393,$267);
     $259 = $370;
     $260 = 0;
     $394 = $259;
     $395 = $260;
     $396 = $395 << 1;
     $397 = $396&255;
     $258 = $394;
     $398 = $258;
     $257 = $398;
     $399 = $257;
     HEAP8[$399>>0] = $397;
    }
    $244 = $369;
    $400 = $244;
    __THREW__ = 0;
    invoke_vii(250,($400|0),0);
    $401 = __THREW__; __THREW__ = 0;
    $402 = $401&1;
    if ($402) {
     $403 = ___cxa_find_matching_catch(0|0)|0;
     $404 = tempRet0;
     ___clang_call_terminate($403);
     // unreachable;
    }
    $243 = $369;
    $405 = $243;
    $242 = $405;
    $406 = $242;
    $407 = $269;
    $241 = $407;
    $408 = $241;
    $240 = $408;
    $409 = $240;
    ;HEAP32[$406>>2]=HEAP32[$409>>2]|0;HEAP32[$406+4>>2]=HEAP32[$409+4>>2]|0;HEAP32[$406+8>>2]=HEAP32[$409+8>>2]|0;
    $410 = $269;
    $237 = $369;
    $238 = $410;
    $411 = $237;
    $412 = $238;
    ;HEAP8[$236>>0]=HEAP8[$239>>0]|0;
    $234 = $411;
    $235 = $412;
    $413 = $234;
    $233 = $413;
    $414 = $233;
    $232 = $414;
    $415 = $232;
    $231 = $415;
    $416 = $235;
    $229 = $416;
    $417 = $229;
    $228 = $417;
    $418 = $228;
    $227 = $418;
    $419 = $227;
    $230 = $419;
    $420 = $269;
    $226 = $420;
    $421 = $226;
    $225 = $421;
    $422 = $225;
    $224 = $422;
    $423 = $224;
    $__a$i$i$i = $423;
    $__i$i$i$i = 0;
    while(1) {
     $424 = $__i$i$i$i;
     $425 = ($424>>>0)<(3);
     if (!($425)) {
      break;
     }
     $426 = $__i$i$i$i;
     $427 = $__a$i$i$i;
     $428 = (($427) + ($426<<2)|0);
     HEAP32[$428>>2] = 0;
     $429 = $__i$i$i$i;
     $430 = (($429) + 1)|0;
     $__i$i$i$i = $430;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($303);
    $431 = $next;
    $222 = $304;
    $223 = $431;
    $432 = $222;
    $221 = $432;
    $433 = $221;
    $220 = $433;
    $434 = $220;
    $219 = $434;
    $435 = $223;
    $436 = $223;
    __THREW__ = 0;
    $437 = (invoke_ii(246,($436|0))|0);
    $438 = __THREW__; __THREW__ = 0;
    $439 = $438&1;
    if ($439) {
     label = 35;
     break;
    }
    __THREW__ = 0;
    invoke_viii(247,($432|0),($435|0),($437|0));
    $440 = __THREW__; __THREW__ = 0;
    $441 = $440&1;
    if ($441) {
     label = 35;
     break;
    }
    $216 = $macro;
    $217 = $304;
    $442 = $216;
    $443 = $217;
    ;HEAP8[$215>>0]=HEAP8[$218>>0]|0;
    $213 = $442;
    $214 = $443;
    $444 = $213;
    $210 = $444;
    $445 = $210;
    $209 = $445;
    $208 = $445;
    $446 = $208;
    $207 = $446;
    $447 = $207;
    $206 = $447;
    $448 = $206;
    $449 = HEAP8[$448>>0]|0;
    $450 = $449&255;
    $451 = $450 & 1;
    $452 = ($451|0)!=(0);
    if ($452) {
     $201 = $445;
     $453 = $201;
     $200 = $453;
     $454 = $200;
     $199 = $454;
     $455 = $199;
     $456 = ((($455)) + 8|0);
     $457 = HEAP32[$456>>2]|0;
     HEAP8[$211>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($457,$211);
     $192 = $445;
     $193 = 0;
     $458 = $192;
     $459 = $193;
     $191 = $458;
     $460 = $191;
     $190 = $460;
     $461 = $190;
     $462 = ((($461)) + 4|0);
     HEAP32[$462>>2] = $459;
    } else {
     $198 = $445;
     $463 = $198;
     $197 = $463;
     $464 = $197;
     $196 = $464;
     $465 = $196;
     $466 = ((($465)) + 1|0);
     $195 = $466;
     $467 = $195;
     $194 = $467;
     $468 = $194;
     HEAP8[$212>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($468,$212);
     $204 = $445;
     $205 = 0;
     $469 = $204;
     $470 = $205;
     $471 = $470 << 1;
     $472 = $471&255;
     $203 = $469;
     $473 = $203;
     $202 = $473;
     $474 = $202;
     HEAP8[$474>>0] = $472;
    }
    $189 = $444;
    $475 = $189;
    __THREW__ = 0;
    invoke_vii(250,($475|0),0);
    $476 = __THREW__; __THREW__ = 0;
    $477 = $476&1;
    if ($477) {
     $478 = ___cxa_find_matching_catch(0|0)|0;
     $479 = tempRet0;
     ___clang_call_terminate($478);
     // unreachable;
    }
    $188 = $444;
    $480 = $188;
    $187 = $480;
    $481 = $187;
    $482 = $214;
    $186 = $482;
    $483 = $186;
    $185 = $483;
    $484 = $185;
    ;HEAP32[$481>>2]=HEAP32[$484>>2]|0;HEAP32[$481+4>>2]=HEAP32[$484+4>>2]|0;HEAP32[$481+8>>2]=HEAP32[$484+8>>2]|0;
    $485 = $214;
    $182 = $444;
    $183 = $485;
    $486 = $182;
    $487 = $183;
    ;HEAP8[$181>>0]=HEAP8[$184>>0]|0;
    $179 = $486;
    $180 = $487;
    $488 = $179;
    $178 = $488;
    $489 = $178;
    $177 = $489;
    $490 = $177;
    $176 = $490;
    $491 = $180;
    $174 = $491;
    $492 = $174;
    $173 = $492;
    $493 = $173;
    $172 = $493;
    $494 = $172;
    $175 = $494;
    $495 = $214;
    $171 = $495;
    $496 = $171;
    $170 = $496;
    $497 = $170;
    $169 = $497;
    $498 = $169;
    $__a$i$i$i9 = $498;
    $__i$i$i$i10 = 0;
    while(1) {
     $499 = $__i$i$i$i10;
     $500 = ($499>>>0)<(3);
     if (!($500)) {
      break;
     }
     $501 = $__i$i$i$i10;
     $502 = $__a$i$i$i9;
     $503 = (($502) + ($501<<2)|0);
     HEAP32[$503>>2] = 0;
     $504 = $__i$i$i$i10;
     $505 = (($504) + 1)|0;
     $__i$i$i$i10 = $505;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($304);
   } else {
    $167 = $305;
    $168 = $354;
    $510 = $167;
    $166 = $510;
    $511 = $166;
    $165 = $511;
    $512 = $165;
    $164 = $512;
    $513 = $168;
    $514 = $168;
    __THREW__ = 0;
    $515 = (invoke_ii(246,($514|0))|0);
    $516 = __THREW__; __THREW__ = 0;
    $517 = $516&1;
    if ($517) {
     label = 35;
     break;
    }
    __THREW__ = 0;
    invoke_viii(247,($510|0),($513|0),($515|0));
    $518 = __THREW__; __THREW__ = 0;
    $519 = $518&1;
    if ($519) {
     label = 35;
     break;
    }
    $161 = $name1;
    $162 = $305;
    $520 = $161;
    $521 = $162;
    ;HEAP8[$160>>0]=HEAP8[$163>>0]|0;
    $158 = $520;
    $159 = $521;
    $522 = $158;
    $155 = $522;
    $523 = $155;
    $154 = $523;
    $153 = $523;
    $524 = $153;
    $152 = $524;
    $525 = $152;
    $151 = $525;
    $526 = $151;
    $527 = HEAP8[$526>>0]|0;
    $528 = $527&255;
    $529 = $528 & 1;
    $530 = ($529|0)!=(0);
    if ($530) {
     $146 = $523;
     $531 = $146;
     $145 = $531;
     $532 = $145;
     $144 = $532;
     $533 = $144;
     $534 = ((($533)) + 8|0);
     $535 = HEAP32[$534>>2]|0;
     HEAP8[$156>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($535,$156);
     $137 = $523;
     $138 = 0;
     $536 = $137;
     $537 = $138;
     $136 = $536;
     $538 = $136;
     $135 = $538;
     $539 = $135;
     $540 = ((($539)) + 4|0);
     HEAP32[$540>>2] = $537;
    } else {
     $143 = $523;
     $541 = $143;
     $142 = $541;
     $542 = $142;
     $141 = $542;
     $543 = $141;
     $544 = ((($543)) + 1|0);
     $140 = $544;
     $545 = $140;
     $139 = $545;
     $546 = $139;
     HEAP8[$157>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($546,$157);
     $149 = $523;
     $150 = 0;
     $547 = $149;
     $548 = $150;
     $549 = $548 << 1;
     $550 = $549&255;
     $148 = $547;
     $551 = $148;
     $147 = $551;
     $552 = $147;
     HEAP8[$552>>0] = $550;
    }
    $134 = $522;
    $553 = $134;
    __THREW__ = 0;
    invoke_vii(250,($553|0),0);
    $554 = __THREW__; __THREW__ = 0;
    $555 = $554&1;
    if ($555) {
     $556 = ___cxa_find_matching_catch(0|0)|0;
     $557 = tempRet0;
     ___clang_call_terminate($556);
     // unreachable;
    }
    $133 = $522;
    $558 = $133;
    $132 = $558;
    $559 = $132;
    $560 = $159;
    $131 = $560;
    $561 = $131;
    $130 = $561;
    $562 = $130;
    ;HEAP32[$559>>2]=HEAP32[$562>>2]|0;HEAP32[$559+4>>2]=HEAP32[$562+4>>2]|0;HEAP32[$559+8>>2]=HEAP32[$562+8>>2]|0;
    $563 = $159;
    $127 = $522;
    $128 = $563;
    $564 = $127;
    $565 = $128;
    ;HEAP8[$126>>0]=HEAP8[$129>>0]|0;
    $124 = $564;
    $125 = $565;
    $566 = $124;
    $123 = $566;
    $567 = $123;
    $122 = $567;
    $568 = $122;
    $121 = $568;
    $569 = $125;
    $119 = $569;
    $570 = $119;
    $118 = $570;
    $571 = $118;
    $117 = $571;
    $572 = $117;
    $120 = $572;
    $573 = $159;
    $116 = $573;
    $574 = $116;
    $115 = $574;
    $575 = $115;
    $114 = $575;
    $576 = $114;
    $__a$i$i$i17 = $576;
    $__i$i$i$i18 = 0;
    while(1) {
     $577 = $__i$i$i$i18;
     $578 = ($577>>>0)<(3);
     if (!($578)) {
      break;
     }
     $579 = $__i$i$i$i18;
     $580 = $__a$i$i$i17;
     $581 = (($580) + ($579<<2)|0);
     HEAP32[$581>>2] = 0;
     $582 = $__i$i$i$i18;
     $583 = (($582) + 1)|0;
     $__i$i$i$i18 = $583;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($305);
   }
   $113 = $name1;
   $584 = $113;
   $112 = $584;
   $585 = $112;
   $111 = $585;
   $586 = $111;
   $110 = $586;
   $587 = $110;
   $109 = $587;
   $588 = $109;
   $108 = $588;
   $589 = $108;
   $590 = HEAP8[$589>>0]|0;
   $591 = $590&255;
   $592 = $591 & 1;
   $593 = ($592|0)!=(0);
   if ($593) {
    $102 = $586;
    $594 = $102;
    $101 = $594;
    $595 = $101;
    $100 = $595;
    $596 = $100;
    $597 = ((($596)) + 8|0);
    $598 = HEAP32[$597>>2]|0;
    $605 = $598;
   } else {
    $107 = $586;
    $599 = $107;
    $106 = $599;
    $600 = $106;
    $105 = $600;
    $601 = $105;
    $602 = ((($601)) + 1|0);
    $104 = $602;
    $603 = $104;
    $103 = $603;
    $604 = $103;
    $605 = $604;
   }
   $99 = $605;
   $606 = $99;
   __THREW__ = 0;
   $607 = (invoke_ii(251,($606|0))|0);
   $608 = __THREW__; __THREW__ = 0;
   $609 = $608&1;
   if ($609) {
    label = 35;
   } else {
    __THREW__ = 0;
    $610 = (invoke_iii(252,($607|0),(48784|0))|0);
    $611 = __THREW__; __THREW__ = 0;
    $612 = $611&1;
    if ($612) {
     label = 35;
    } else {
     $613 = ($610|0)!=(0);
     $614 = ((($307)) + 20|0);
     if ($613) {
      HEAP32[$614>>2] = 35632;
     } else {
      HEAP32[$614>>2] = 35633;
     }
     __THREW__ = 0;
     invoke_viii(253,($306|0),(48752|0),($name1|0));
     $615 = __THREW__; __THREW__ = 0;
     $616 = $615&1;
     if ($616) {
      label = 35;
     } else {
      $96 = $name1;
      $97 = $306;
      $617 = $96;
      $618 = $97;
      ;HEAP8[$95>>0]=HEAP8[$98>>0]|0;
      $93 = $617;
      $94 = $618;
      $619 = $93;
      $90 = $619;
      $620 = $90;
      $89 = $620;
      $88 = $620;
      $621 = $88;
      $87 = $621;
      $622 = $87;
      $86 = $622;
      $623 = $86;
      $624 = HEAP8[$623>>0]|0;
      $625 = $624&255;
      $626 = $625 & 1;
      $627 = ($626|0)!=(0);
      if ($627) {
       $81 = $620;
       $628 = $81;
       $80 = $628;
       $629 = $80;
       $79 = $629;
       $630 = $79;
       $631 = ((($630)) + 8|0);
       $632 = HEAP32[$631>>2]|0;
       HEAP8[$91>>0] = 0;
       __ZNSt3__111char_traitsIcE6assignERcRKc($632,$91);
       $72 = $620;
       $73 = 0;
       $633 = $72;
       $634 = $73;
       $71 = $633;
       $635 = $71;
       $70 = $635;
       $636 = $70;
       $637 = ((($636)) + 4|0);
       HEAP32[$637>>2] = $634;
      } else {
       $78 = $620;
       $638 = $78;
       $77 = $638;
       $639 = $77;
       $76 = $639;
       $640 = $76;
       $641 = ((($640)) + 1|0);
       $75 = $641;
       $642 = $75;
       $74 = $642;
       $643 = $74;
       HEAP8[$92>>0] = 0;
       __ZNSt3__111char_traitsIcE6assignERcRKc($643,$92);
       $84 = $620;
       $85 = 0;
       $644 = $84;
       $645 = $85;
       $646 = $645 << 1;
       $647 = $646&255;
       $83 = $644;
       $648 = $83;
       $82 = $648;
       $649 = $82;
       HEAP8[$649>>0] = $647;
      }
      $69 = $619;
      $650 = $69;
      __THREW__ = 0;
      invoke_vii(250,($650|0),0);
      $651 = __THREW__; __THREW__ = 0;
      $652 = $651&1;
      if ($652) {
       $653 = ___cxa_find_matching_catch(0|0)|0;
       $654 = tempRet0;
       ___clang_call_terminate($653);
       // unreachable;
      }
      $68 = $619;
      $655 = $68;
      $67 = $655;
      $656 = $67;
      $657 = $94;
      $66 = $657;
      $658 = $66;
      $65 = $658;
      $659 = $65;
      ;HEAP32[$656>>2]=HEAP32[$659>>2]|0;HEAP32[$656+4>>2]=HEAP32[$659+4>>2]|0;HEAP32[$656+8>>2]=HEAP32[$659+8>>2]|0;
      $660 = $94;
      $62 = $619;
      $63 = $660;
      $661 = $62;
      $662 = $63;
      ;HEAP8[$61>>0]=HEAP8[$64>>0]|0;
      $59 = $661;
      $60 = $662;
      $663 = $59;
      $58 = $663;
      $664 = $58;
      $57 = $664;
      $665 = $57;
      $56 = $665;
      $666 = $60;
      $54 = $666;
      $667 = $54;
      $53 = $667;
      $668 = $53;
      $52 = $668;
      $669 = $52;
      $55 = $669;
      $670 = $94;
      $51 = $670;
      $671 = $51;
      $50 = $671;
      $672 = $50;
      $49 = $672;
      $673 = $49;
      $__a$i$i$i22 = $673;
      $__i$i$i$i23 = 0;
      while(1) {
       $674 = $__i$i$i$i23;
       $675 = ($674>>>0)<(3);
       if (!($675)) {
        break;
       }
       $676 = $__i$i$i$i23;
       $677 = $__a$i$i$i22;
       $678 = (($677) + ($676<<2)|0);
       HEAP32[$678>>2] = 0;
       $679 = $__i$i$i$i23;
       $680 = (($679) + 1)|0;
       $__i$i$i$i23 = $680;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($306);
      $48 = $name1;
      $681 = $48;
      $47 = $681;
      $682 = $47;
      $46 = $682;
      $683 = $46;
      $45 = $683;
      $684 = $45;
      $44 = $684;
      $685 = $44;
      $43 = $685;
      $686 = $43;
      $687 = HEAP8[$686>>0]|0;
      $688 = $687&255;
      $689 = $688 & 1;
      $690 = ($689|0)!=(0);
      if ($690) {
       $37 = $683;
       $691 = $37;
       $36 = $691;
       $692 = $36;
       $35 = $692;
       $693 = $35;
       $694 = ((($693)) + 8|0);
       $695 = HEAP32[$694>>2]|0;
       $702 = $695;
      } else {
       $42 = $683;
       $696 = $42;
       $41 = $696;
       $697 = $41;
       $40 = $697;
       $698 = $40;
       $699 = ((($698)) + 1|0);
       $39 = $699;
       $700 = $39;
       $38 = $700;
       $701 = $38;
       $702 = $701;
      }
      $34 = $702;
      $703 = $34;
      __THREW__ = 0;
      invoke_vii(215,($str|0),($703|0));
      $704 = __THREW__; __THREW__ = 0;
      $705 = $704&1;
      if ($705) {
       label = 35;
      } else {
       HEAP32[$buffer>>2] = 0;
       __THREW__ = 0;
       $706 = (invoke_iiii(254,($str|0),($buffer|0),0)|0);
       $707 = __THREW__; __THREW__ = 0;
       $708 = $707&1;
       do {
        if (!($708)) {
         HEAP32[$len>>2] = $706;
         $709 = ((($307)) + 20|0);
         $710 = HEAP32[$709>>2]|0;
         __THREW__ = 0;
         $711 = (invoke_ii(255,($710|0))|0);
         $712 = __THREW__; __THREW__ = 0;
         $713 = $712&1;
         if (!($713)) {
          $714 = ((($307)) + 24|0);
          HEAP32[$714>>2] = $711;
          $33 = $macro;
          $715 = $33;
          $32 = $715;
          $716 = $32;
          $31 = $716;
          $717 = $31;
          $30 = $717;
          $718 = $30;
          $719 = HEAP8[$718>>0]|0;
          $720 = $719&255;
          $721 = $720 & 1;
          $722 = ($721|0)!=(0);
          if ($722) {
           $26 = $715;
           $723 = $26;
           $25 = $723;
           $724 = $25;
           $24 = $724;
           $725 = $24;
           $726 = ((($725)) + 4|0);
           $727 = HEAP32[$726>>2]|0;
           $734 = $727;
          } else {
           $29 = $715;
           $728 = $29;
           $28 = $728;
           $729 = $28;
           $27 = $729;
           $730 = $27;
           $731 = HEAP8[$730>>0]|0;
           $732 = $731&255;
           $733 = $732 >> 1;
           $734 = $733;
          }
          $735 = ($734|0)!=(0);
          if ($735) {
           $736 = HEAP32[$buffer>>2]|0;
           $737 = ((($charArray)) + 4|0);
           HEAP32[$737>>2] = $736;
           $738 = HEAP32[$len>>2]|0;
           $739 = ((($length)) + 4|0);
           HEAP32[$739>>2] = $738;
           $22 = $macro;
           $23 = 0;
           $740 = $22;
           $21 = $740;
           $741 = $21;
           $20 = $741;
           $742 = $20;
           $19 = $742;
           $743 = $19;
           $18 = $743;
           $744 = $18;
           $745 = HEAP8[$744>>0]|0;
           $746 = $745&255;
           $747 = $746 & 1;
           $748 = ($747|0)!=(0);
           if ($748) {
            $12 = $741;
            $749 = $12;
            $11 = $749;
            $750 = $11;
            $10 = $750;
            $751 = $10;
            $752 = ((($751)) + 8|0);
            $753 = HEAP32[$752>>2]|0;
            $762 = $753;
           } else {
            $17 = $741;
            $754 = $17;
            $16 = $754;
            $755 = $16;
            $15 = $755;
            $756 = $15;
            $757 = ((($756)) + 1|0);
            $14 = $757;
            $758 = $14;
            $13 = $758;
            $759 = $13;
            $762 = $759;
           }
           $760 = $23;
           $761 = (($762) + ($760)|0);
           HEAP32[$charArray>>2] = $761;
           $9 = $macro;
           $763 = $9;
           $8 = $763;
           $764 = $8;
           $7 = $764;
           $765 = $7;
           $6 = $765;
           $766 = $6;
           $767 = HEAP8[$766>>0]|0;
           $768 = $767&255;
           $769 = $768 & 1;
           $770 = ($769|0)!=(0);
           if ($770) {
            $2 = $763;
            $771 = $2;
            $1 = $771;
            $772 = $1;
            $0 = $772;
            $773 = $0;
            $774 = ((($773)) + 4|0);
            $775 = HEAP32[$774>>2]|0;
            $782 = $775;
           } else {
            $5 = $763;
            $776 = $5;
            $4 = $776;
            $777 = $4;
            $3 = $777;
            $778 = $3;
            $779 = HEAP8[$778>>0]|0;
            $780 = $779&255;
            $781 = $780 >> 1;
            $782 = $781;
           }
           HEAP32[$length>>2] = $782;
           $783 = ((($307)) + 24|0);
           $784 = HEAP32[$783>>2]|0;
           __THREW__ = 0;
           invoke_viiii(256,($784|0),2,($charArray|0),($length|0));
           $785 = __THREW__; __THREW__ = 0;
           $786 = $785&1;
           if ($786) {
            break;
           }
          } else {
           $789 = ((($307)) + 24|0);
           $790 = HEAP32[$789>>2]|0;
           __THREW__ = 0;
           invoke_viiii(256,($790|0),1,($buffer|0),($len|0));
           $791 = __THREW__; __THREW__ = 0;
           $792 = $791&1;
           if ($792) {
            break;
           }
          }
          $793 = ((($307)) + 24|0);
          $794 = HEAP32[$793>>2]|0;
          __THREW__ = 0;
          invoke_vi(257,($794|0));
          $795 = __THREW__; __THREW__ = 0;
          $796 = $795&1;
          if (!($796)) {
           $797 = ((($307)) + 24|0);
           $798 = HEAP32[$797>>2]|0;
           __THREW__ = 0;
           invoke_viii(258,($798|0),35713,($bCompile|0));
           $799 = __THREW__; __THREW__ = 0;
           $800 = $799&1;
           if (!($800)) {
            $801 = HEAP32[$bCompile>>2]|0;
            $802 = ($801|0)!=(0);
            if (!($802)) {
             $803 = ((($307)) + 24|0);
             $804 = HEAP32[$803>>2]|0;
             __THREW__ = 0;
             invoke_viiii(259,($804|0),260,($count|0),($err|0));
             $805 = __THREW__; __THREW__ = 0;
             $806 = $805&1;
             if ($806) {
              break;
             }
             $807 = HEAP32[$count>>2]|0;
             $808 = ($807|0)>=(259);
             if ($808) {
              HEAP32[$count>>2] = 259;
             }
             $809 = HEAP32[$count>>2]|0;
             $810 = (($err) + ($809)|0);
             HEAP8[$810>>0] = 0;
             __THREW__ = 0;
             HEAP32[$vararg_buffer>>2] = $err;
             invoke_vii(228,(48792|0),($vararg_buffer|0));
             $811 = __THREW__; __THREW__ = 0;
             $812 = $811&1;
             if ($812) {
              break;
             }
            }
            $813 = HEAP32[$buffer>>2]|0;
            $814 = ($813|0)!=(0|0);
            if (!($814)) {
             __ZN14readfilestreamD2Ev($str);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($macro);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name1);
             STACKTOP = sp;return;
            }
            $815 = HEAP32[$buffer>>2]|0;
            $816 = ($815|0)==(0|0);
            if ($816) {
             __ZN14readfilestreamD2Ev($str);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($macro);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name1);
             STACKTOP = sp;return;
            }
            __ZdaPv($815);
            __ZN14readfilestreamD2Ev($str);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($macro);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name1);
            STACKTOP = sp;return;
           }
          }
         }
        }
       } while(0);
       $787 = ___cxa_find_matching_catch()|0;
       $788 = tempRet0;
       $301 = $787;
       $302 = $788;
       __ZN14readfilestreamD2Ev($str);
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $508 = ___cxa_find_matching_catch()|0;
  $509 = tempRet0;
  $301 = $508;
  $302 = $509;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($macro);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name1);
 $817 = $301;
 $818 = $302;
 ___resumeException($817|0);
 // unreachable;
}
function __ZN7program6loaderEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bLinked = 0, $count = 0, $err = 0, $next = 0, $str1 = 0, $str2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $str1 = sp + 80|0;
 $str2 = sp + 92|0;
 $bLinked = sp + 112|0;
 $err = sp + 220|0;
 $count = sp + 40|0;
 $41 = $this;
 $42 = $name;
 $45 = $41;
 $46 = $42;
 $47 = (_strchr($46,36)|0);
 $next = $47;
 $48 = $next;
 $49 = ($48|0)!=(0|0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = $42;
 $51 = $next;
 $52 = $42;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $38 = $str1;
 $39 = $50;
 $40 = $55;
 $56 = $38;
 $37 = $56;
 $57 = $37;
 $36 = $57;
 $58 = $36;
 $35 = $58;
 $59 = $39;
 $60 = $40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($56,$59,$60);
 $61 = $next;
 $62 = ((($61)) + 1|0);
 $33 = $str2;
 $34 = $62;
 $63 = $33;
 $32 = $63;
 $64 = $32;
 $31 = $64;
 $65 = $31;
 $30 = $65;
 $66 = $34;
 $67 = $34;
 __THREW__ = 0;
 $68 = (invoke_ii(246,($67|0))|0);
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if (!($70)) {
  __THREW__ = 0;
  invoke_viii(247,($63|0),($66|0),($68|0));
  $71 = __THREW__; __THREW__ = 0;
  $72 = $71&1;
  if (!($72)) {
   $73 = ((($45)) + 20|0);
   __THREW__ = 0;
   $74 = (invoke_i(260)|0);
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   do {
    if (!($76)) {
     $29 = $str1;
     $77 = $29;
     $28 = $77;
     $78 = $28;
     $27 = $78;
     $79 = $27;
     $26 = $79;
     $80 = $26;
     $25 = $80;
     $81 = $25;
     $24 = $81;
     $82 = $24;
     $83 = HEAP8[$82>>0]|0;
     $84 = $83&255;
     $85 = $84 & 1;
     $86 = ($85|0)!=(0);
     if ($86) {
      $18 = $79;
      $87 = $18;
      $17 = $87;
      $88 = $17;
      $16 = $88;
      $89 = $16;
      $90 = ((($89)) + 8|0);
      $91 = HEAP32[$90>>2]|0;
      $98 = $91;
     } else {
      $23 = $79;
      $92 = $23;
      $22 = $92;
      $93 = $22;
      $21 = $93;
      $94 = $21;
      $95 = ((($94)) + 1|0);
      $20 = $95;
      $96 = $20;
      $19 = $96;
      $97 = $19;
      $98 = $97;
     }
     $15 = $98;
     $99 = $15;
     __THREW__ = 0;
     $100 = (invoke_iii(261,($74|0),($99|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if (!($102)) {
      __THREW__ = 0;
      (invoke_iii(262,($73|0),($100|0))|0);
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if (!($104)) {
       $105 = ((($45)) + 24|0);
       __THREW__ = 0;
       $106 = (invoke_i(260)|0);
       $107 = __THREW__; __THREW__ = 0;
       $108 = $107&1;
       if (!($108)) {
        $14 = $str2;
        $109 = $14;
        $13 = $109;
        $110 = $13;
        $12 = $110;
        $111 = $12;
        $11 = $111;
        $112 = $11;
        $10 = $112;
        $113 = $10;
        $9 = $113;
        $114 = $9;
        $115 = HEAP8[$114>>0]|0;
        $116 = $115&255;
        $117 = $116 & 1;
        $118 = ($117|0)!=(0);
        if ($118) {
         $3 = $111;
         $119 = $3;
         $2 = $119;
         $120 = $2;
         $1 = $120;
         $121 = $1;
         $122 = ((($121)) + 8|0);
         $123 = HEAP32[$122>>2]|0;
         $130 = $123;
        } else {
         $8 = $111;
         $124 = $8;
         $7 = $124;
         $125 = $7;
         $6 = $125;
         $126 = $6;
         $127 = ((($126)) + 1|0);
         $5 = $127;
         $128 = $5;
         $4 = $128;
         $129 = $4;
         $130 = $129;
        }
        $0 = $130;
        $131 = $0;
        __THREW__ = 0;
        $132 = (invoke_iii(261,($106|0),($131|0))|0);
        $133 = __THREW__; __THREW__ = 0;
        $134 = $133&1;
        if (!($134)) {
         __THREW__ = 0;
         (invoke_iii(262,($105|0),($132|0))|0);
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         if (!($136)) {
          __THREW__ = 0;
          $137 = (invoke_i(263)|0);
          $138 = __THREW__; __THREW__ = 0;
          $139 = $138&1;
          if (!($139)) {
           $140 = ((($45)) + 28|0);
           HEAP32[$140>>2] = $137;
           $141 = ((($45)) + 28|0);
           $142 = HEAP32[$141>>2]|0;
           $143 = ((($45)) + 20|0);
           __THREW__ = 0;
           $144 = (invoke_ii(264,($143|0))|0);
           $145 = __THREW__; __THREW__ = 0;
           $146 = $145&1;
           if (!($146)) {
            $147 = ((($144)) + 24|0);
            $148 = HEAP32[$147>>2]|0;
            __THREW__ = 0;
            invoke_vii(265,($142|0),($148|0));
            $149 = __THREW__; __THREW__ = 0;
            $150 = $149&1;
            if (!($150)) {
             $151 = ((($45)) + 28|0);
             $152 = HEAP32[$151>>2]|0;
             $153 = ((($45)) + 24|0);
             __THREW__ = 0;
             $154 = (invoke_ii(264,($153|0))|0);
             $155 = __THREW__; __THREW__ = 0;
             $156 = $155&1;
             if (!($156)) {
              $157 = ((($154)) + 24|0);
              $158 = HEAP32[$157>>2]|0;
              __THREW__ = 0;
              invoke_vii(265,($152|0),($158|0));
              $159 = __THREW__; __THREW__ = 0;
              $160 = $159&1;
              if (!($160)) {
               $161 = ((($45)) + 28|0);
               $162 = HEAP32[$161>>2]|0;
               __THREW__ = 0;
               invoke_vi(266,($162|0));
               $163 = __THREW__; __THREW__ = 0;
               $164 = $163&1;
               if (!($164)) {
                $165 = ((($45)) + 28|0);
                $166 = HEAP32[$165>>2]|0;
                __THREW__ = 0;
                invoke_viii(267,($166|0),35714,($bLinked|0));
                $167 = __THREW__; __THREW__ = 0;
                $168 = $167&1;
                if (!($168)) {
                 $169 = HEAP32[$bLinked>>2]|0;
                 $170 = ($169|0)!=(0);
                 if (!($170)) {
                  $171 = ((($45)) + 28|0);
                  $172 = HEAP32[$171>>2]|0;
                  __THREW__ = 0;
                  invoke_viiii(268,($172|0),260,($count|0),($err|0));
                  $173 = __THREW__; __THREW__ = 0;
                  $174 = $173&1;
                  if ($174) {
                   break;
                  }
                  $175 = HEAP32[$count>>2]|0;
                  $176 = ($175|0)>=(259);
                  if ($176) {
                   HEAP32[$count>>2] = 259;
                  }
                  $181 = HEAP32[$count>>2]|0;
                  $182 = (($err) + ($181)|0);
                  HEAP8[$182>>0] = 0;
                  __THREW__ = 0;
                  HEAP32[$vararg_buffer>>2] = $err;
                  invoke_vii(228,(48792|0),($vararg_buffer|0));
                  $183 = __THREW__; __THREW__ = 0;
                  $184 = $183&1;
                  if ($184) {
                   break;
                  }
                 }
                 __THREW__ = 0;
                 invoke_vi(229,($45|0));
                 $185 = __THREW__; __THREW__ = 0;
                 $186 = $185&1;
                 if ($186) {
                  break;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($str2);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($str1);
                 STACKTOP = sp;return;
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   $179 = ___cxa_find_matching_catch()|0;
   $180 = tempRet0;
   $43 = $179;
   $44 = $180;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($str2);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($str1);
   $187 = $43;
   $188 = $44;
   ___resumeException($187|0);
   // unreachable;
  }
 }
 $177 = ___cxa_find_matching_catch()|0;
 $178 = tempRet0;
 $43 = $177;
 $44 = $178;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($str1);
 $187 = $43;
 $188 = $44;
 ___resumeException($187|0);
 // unreachable;
}
function __ZN7program3useEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _glUseProgram(($3|0));
 STACKTOP = sp;return;
}
function __ZN7program10getUniformEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (_glGetUniformLocation(($5|0),($6|0))|0);
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN7program12getAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (_glGetAttribLocation(($5|0),($6|0))|0);
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN9attribute5setupC2ERS_iibiPv($this,$attr,$size,$type,$normalize,$stride,$ptr) {
 $this = $this|0;
 $attr = $attr|0;
 $size = $size|0;
 $type = $type|0;
 $normalize = $normalize|0;
 $stride = $stride|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $attr;
 $2 = $size;
 $3 = $type;
 $7 = $normalize&1;
 $4 = $7;
 $5 = $stride;
 $6 = $ptr;
 $8 = $0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$8>>2] = $10;
 $11 = HEAP32[$8>>2]|0;
 _glEnableVertexAttribArray(($11|0));
 $12 = HEAP32[$8>>2]|0;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $15&1;
 $17 = $16&1;
 $18 = $5;
 $19 = $6;
 _glVertexAttribPointer(($12|0),($13|0),($14|0),($17|0),($18|0),($19|0));
 STACKTOP = sp;return;
}
function __ZN9attribute5setupD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(269,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN7uniform8setValueEPvji($this,$data,$type,$arraySize) {
 $this = $this|0;
 $data = $data|0;
 $type = $type|0;
 $arraySize = $arraySize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $type;
 $3 = $arraySize;
 $4 = $0;
 $5 = $2;
 if ((($5|0) == 35675)) {
  $21 = HEAP32[$4>>2]|0;
  $22 = $3;
  $23 = $1;
  _glUniformMatrix3fv(($21|0),($22|0),0,($23|0));
 } else if ((($5|0) == 35674)) {
  $18 = HEAP32[$4>>2]|0;
  $19 = $3;
  $20 = $1;
  _glUniformMatrix2fv(($18|0),($19|0),0,($20|0));
 } else if ((($5|0) == 35676)) {
  $24 = HEAP32[$4>>2]|0;
  $25 = $3;
  $26 = $1;
  _glUniformMatrix4fv(($24|0),($25|0),0,($26|0));
 } else if ((($5|0) == 35666)) {
  $15 = HEAP32[$4>>2]|0;
  $16 = $3;
  $17 = $1;
  _glUniform4fv(($15|0),($16|0),($17|0));
 } else if ((($5|0) == 35680) | (($5|0) == 35678)) {
  $27 = HEAP32[$4>>2]|0;
  $28 = $1;
  _glUniform1iv(($27|0),1,($28|0));
 } else if ((($5|0) == 35664) | (($5|0) == 5125) | (($5|0) == 5124)) {
  $9 = HEAP32[$4>>2]|0;
  $10 = $3;
  $11 = $1;
  _glUniform2fv(($9|0),($10|0),($11|0));
 } else if ((($5|0) == 5126)) {
  $6 = HEAP32[$4>>2]|0;
  $7 = $3;
  $8 = $1;
  _glUniform1fv(($6|0),($7|0),($8|0));
 } else if ((($5|0) == 35665)) {
  $12 = HEAP32[$4>>2]|0;
  $13 = $3;
  $14 = $1;
  _glUniform3fv(($12|0),($13|0),($14|0));
 }
 STACKTOP = sp;return;
}
function __ZN6shaderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 48664;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 invoke_vi(270,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  $1 = $9;
  $2 = $10;
  __ZN8resourceI6shader8countrefLi512EED2Ev($3);
  $11 = $1;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  __ZN8resourceI6shader8countrefLi512EED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN6shaderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6shaderD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN7programD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 48680;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 invoke_vi(271,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 24|0);
  __ZN6refptrI6shaderED2Ev($13);
  $14 = ((($3)) + 20|0);
  __ZN6refptrI6shaderED2Ev($14);
  __ZN8resourceI7program8countrefLi512EED2Ev($3);
  $15 = $1;
  ___clang_call_terminate($15);
  // unreachable;
 } else {
  $9 = ((($3)) + 24|0);
  __ZN6refptrI6shaderED2Ev($9);
  $10 = ((($3)) + 20|0);
  __ZN6refptrI6shaderED2Ev($10);
  __ZN8resourceI7program8countrefLi512EED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN7programD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7programD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $__lhs_sz = 0, $__rhs_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 292|0;
 $9 = sp + 8|0;
 $12 = sp + 294|0;
 $67 = sp + 295|0;
 $68 = sp + 293|0;
 $65 = $__lhs;
 $66 = $__rhs;
 $$expand_i1_val = 0;
 HEAP8[$67>>0] = $$expand_i1_val;
 $72 = $65;
 $64 = $72;
 $73 = $64;
 $63 = $73;
 $74 = $63;
 $62 = $74;
 $75 = $62;
 $61 = $75;
 $10 = $agg$result;
 $11 = $68;
 $76 = $10;
 ;HEAP8[$9>>0]=HEAP8[$12>>0]|0;
 $7 = $76;
 $77 = $7;
 $6 = $9;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $4 = $77;
 $3 = $5;
 $2 = $76;
 $78 = $2;
 $1 = $78;
 $79 = $1;
 $0 = $79;
 $80 = $0;
 $__a$i$i = $80;
 $__i$i$i = 0;
 while(1) {
  $81 = $__i$i$i;
  $82 = ($81>>>0)<(3);
  if (!($82)) {
   break;
  }
  $83 = $__i$i$i;
  $84 = $__a$i$i;
  $85 = (($84) + ($83<<2)|0);
  HEAP32[$85>>2] = 0;
  $86 = $__i$i$i;
  $87 = (($86) + 1)|0;
  $__i$i$i = $87;
 }
 $88 = $65;
 $22 = $88;
 $89 = $22;
 $21 = $89;
 $90 = $21;
 $20 = $90;
 $91 = $20;
 $19 = $91;
 $92 = $19;
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $94 & 1;
 $96 = ($95|0)!=(0);
 if ($96) {
  $15 = $89;
  $97 = $15;
  $14 = $97;
  $98 = $14;
  $13 = $98;
  $99 = $13;
  $100 = ((($99)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $108 = $101;
 } else {
  $18 = $89;
  $102 = $18;
  $17 = $102;
  $103 = $17;
  $16 = $103;
  $104 = $16;
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = $106 >> 1;
  $108 = $107;
 }
 $__lhs_sz = $108;
 $109 = $66;
 $32 = $109;
 $110 = $32;
 $31 = $110;
 $111 = $31;
 $30 = $111;
 $112 = $30;
 $29 = $112;
 $113 = $29;
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $115 & 1;
 $117 = ($116|0)!=(0);
 if ($117) {
  $25 = $110;
  $118 = $25;
  $24 = $118;
  $119 = $24;
  $23 = $119;
  $120 = $23;
  $121 = ((($120)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $129 = $122;
 } else {
  $28 = $110;
  $123 = $28;
  $27 = $123;
  $124 = $27;
  $26 = $124;
  $125 = $26;
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = $127 >> 1;
  $129 = $128;
 }
 $__rhs_sz = $129;
 $130 = $65;
 $46 = $130;
 $131 = $46;
 $45 = $131;
 $132 = $45;
 $44 = $132;
 $133 = $44;
 $43 = $133;
 $134 = $43;
 $42 = $134;
 $135 = $42;
 $136 = HEAP8[$135>>0]|0;
 $137 = $136&255;
 $138 = $137 & 1;
 $139 = ($138|0)!=(0);
 if ($139) {
  $36 = $132;
  $140 = $36;
  $35 = $140;
  $141 = $35;
  $34 = $141;
  $142 = $34;
  $143 = ((($142)) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  $151 = $144;
 } else {
  $41 = $132;
  $145 = $41;
  $40 = $145;
  $146 = $40;
  $39 = $146;
  $147 = $39;
  $148 = ((($147)) + 1|0);
  $38 = $148;
  $149 = $38;
  $37 = $149;
  $150 = $37;
  $151 = $150;
 }
 $33 = $151;
 $152 = $33;
 $153 = $__lhs_sz;
 $154 = $__lhs_sz;
 $155 = $__rhs_sz;
 $156 = (($154) + ($155))|0;
 __THREW__ = 0;
 invoke_viiii(272,($agg$result|0),($152|0),($153|0),($156|0));
 $157 = __THREW__; __THREW__ = 0;
 $158 = $157&1;
 if ($158) {
  $186 = ___cxa_find_matching_catch()|0;
  $187 = tempRet0;
  $69 = $186;
  $70 = $187;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $188 = $69;
  $189 = $70;
  ___resumeException($188|0);
  // unreachable;
 }
 $159 = $66;
 $60 = $159;
 $160 = $60;
 $59 = $160;
 $161 = $59;
 $58 = $161;
 $162 = $58;
 $57 = $162;
 $163 = $57;
 $56 = $163;
 $164 = $56;
 $165 = HEAP8[$164>>0]|0;
 $166 = $165&255;
 $167 = $166 & 1;
 $168 = ($167|0)!=(0);
 if ($168) {
  $50 = $161;
  $169 = $50;
  $49 = $169;
  $170 = $49;
  $48 = $170;
  $171 = $48;
  $172 = ((($171)) + 8|0);
  $173 = HEAP32[$172>>2]|0;
  $180 = $173;
 } else {
  $55 = $161;
  $174 = $55;
  $54 = $174;
  $175 = $54;
  $53 = $175;
  $176 = $53;
  $177 = ((($176)) + 1|0);
  $52 = $177;
  $178 = $52;
  $51 = $178;
  $179 = $51;
  $180 = $179;
 }
 $47 = $180;
 $181 = $47;
 $182 = $__rhs_sz;
 __THREW__ = 0;
 (invoke_iiii(273,($agg$result|0),($181|0),($182|0))|0);
 $183 = __THREW__; __THREW__ = 0;
 $184 = $183&1;
 if ($184) {
  $186 = ___cxa_find_matching_catch()|0;
  $187 = tempRet0;
  $69 = $186;
  $70 = $187;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $188 = $69;
  $189 = $70;
  ___resumeException($188|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$67>>0] = $$expand_i1_val2;
 $71 = 1;
 $$pre_trunc = HEAP8[$67>>0]|0;
 $185 = $$pre_trunc&1;
 if ($185) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZN6stream5wholeEPPvi($this,$buffer,$mode) {
 $this = $this|0;
 $buffer = $buffer|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $buffer;
 $2 = $mode;
 $3 = $0;
 $4 = $1;
 $dest = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 511]($3)|0);
 $i = $8;
 $9 = $dest;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $12 = $i;
  $13 = $2;
  $14 = (($12) + ($13))|0;
  $15 = (__Znaj($14)|0);
  $16 = $dest;
  HEAP32[$16>>2] = $15;
 }
 $17 = $2;
 if ((($17|0) == 1)) {
  $18 = $i;
  $19 = $dest;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($18)|0);
  HEAP8[$21>>0] = 0;
 } else if ((($17|0) == 2)) {
  $22 = $i;
  $23 = $dest;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($22)|0);
  HEAP8[$25>>0] = 10;
  $26 = $i;
  $27 = (($26) + 1)|0;
  $28 = $dest;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($27)|0);
  HEAP8[$30>>0] = 0;
 }
 $31 = HEAP32[$3>>2]|0;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $dest;
 $35 = HEAP32[$34>>2]|0;
 $36 = $i;
 FUNCTION_TABLE_viii[$33 & 511]($3,$35,$36);
 $37 = $i;
 STACKTOP = sp;return ($37|0);
}
function __ZN12baseresourceI6shaderLi512EE10getmanagerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[53192>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (48800|0);
 }
 $4 = (___cxa_guard_acquire((53192|0))|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (48800|0);
 }
 __THREW__ = 0;
 invoke_vi(274,(48800|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  ___cxa_guard_abort((53192|0));
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((275|0),(48800|0),(___dso_handle|0))|0);
 ___cxa_guard_release((53192|0));
 STACKTOP = sp;return (48800|0);
}
function __ZN12baseresourceI6shaderLi512EE8tmanager3getEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rtn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = $2;
 $6 = (__ZN10stringhashI6shaderLi512EE6searchEPKc($4,$5)|0);
 $rtn = $6;
 $7 = $rtn;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $rtn;
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = $2;
  $11 = (__ZN12baseresourceI6shaderLi512EE8tmanager9innerloadEPKc($3,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN6refptrI6shaderEaSEPKS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  __ZN8countref3refEv($5);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  __ZN8countref5unrefEv($8);
 }
 $9 = $1;
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($2|0);
}
function __ZNK6refptrI6shaderEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN8resourceI6shader8countrefLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZN12baseresourceI6shaderLi512EED2Ev($2);
 $3 = ((($1)) + 8|0);
 __ZN8duallinkD2Ev($3);
 __ZN8countrefD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI6shaderLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5namedD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI6shaderLi512EE8tmanagerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10stringhashI6shaderLi512EEC2Ev($2);
 $3 = 53072;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10stringhashI6shaderLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 4096|0);
 $5 = $3;
 while(1) {
  __THREW__ = 0;
  invoke_vi(83,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 8;
   break;
  }
  $8 = ((($5)) + 8|0);
  $9 = ($8|0)==($4|0);
  if ($9) {
   break;
  } else {
   $5 = $8;
  }
 }
 if ((label|0) == 8) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $1 = $21;
  $2 = $22;
  $23 = ($3|0)==($5|0);
  if ($23) {
   $33 = $1;
   $34 = $2;
   ___resumeException($33|0);
   // unreachable;
  } else {
   $25 = $5;
  }
  while(1) {
   $24 = ((($25)) + -8|0);
   __ZN8duallinkD2Ev($24);
   $26 = ($24|0)==($3|0);
   if ($26) {
    break;
   } else {
    $25 = $24;
   }
  }
  $33 = $1;
  $34 = $2;
  ___resumeException($33|0);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(511);
  if (!($11)) {
   label = 11;
   break;
  }
  $12 = $i;
  $13 = (($3) + ($12<<3)|0);
  $14 = $i;
  $15 = (($14) + 1)|0;
  $16 = (($3) + ($15<<3)|0);
  __THREW__ = 0;
  invoke_vii(84,($13|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $1 = $27;
 $2 = $28;
 $29 = ((($3)) + 4096|0);
 $31 = $29;
 while(1) {
  $30 = ((($31)) + -8|0);
  __ZN8duallinkD2Ev($30);
  $32 = ($30|0)==($3|0);
  if ($32) {
   break;
  } else {
   $31 = $30;
  }
 }
 $33 = $1;
 $34 = $2;
 ___resumeException($33|0);
 // unreachable;
}
function __ZN12baseresourceI6shaderLi512EE8tmanager4vgetEPc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN12baseresourceI6shaderLi512EE8tmanager3getEPKc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN12baseresourceI6shaderLi512EE8tmanagerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10stringhashI6shaderLi512EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10stringhashI6shaderLi512EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4096|0);
 $4 = $2;
 while(1) {
  $3 = ((($4)) + -8|0);
  __ZN8duallinkD2Ev($3);
  $5 = ($3|0)==($1|0);
  if ($5) {
   break;
  } else {
   $4 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10stringhashI6shaderLi512EE6searchEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN10stringhashI6shaderLi512EE8calchashEPKc($4)|0);
 $hash = $5;
 $6 = $hash;
 $7 = (($3) + ($6<<3)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $d = $9;
 while(1) {
  $10 = $d;
  $11 = ($10>>>0)>=($3>>>0);
  $12 = $d;
  $13 = ((($3)) + 4096|0);
  $14 = ($12>>>0)<($13>>>0);
  $15 = $11 ? $14 : 0;
  $16 = $15 ^ 1;
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $2;
  $18 = $d;
  $19 = ($18|0)==(0|0);
  $20 = ((($18)) + -8|0);
  $21 = $19 ? 0 : $20;
  $22 = ((($21)) + 16|0);
  $23 = (__ZNK5named7getnameEv($22)|0);
  $24 = (_strcmp($17,$23)|0);
  $25 = ($24|0)==(0);
  $26 = $d;
  if ($25) {
   label = 4;
   break;
  }
  $30 = ((($26)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $d = $31;
 }
 if ((label|0) == 4) {
  $27 = ($26|0)==(0|0);
  $28 = ((($26)) + -8|0);
  $29 = $27 ? 0 : $28;
  $0 = $29;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZN10stringhashI6shaderLi512EE8calchashEPKc($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $hash = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  $4 = $hash;
  if (!($3)) {
   break;
  }
  $5 = $4 << 4;
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($5) + ($8))|0;
  $hash = $9;
  $10 = $hash;
  $11 = $10 & -268435456;
  $g = $11;
  $12 = $g;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $g;
   $15 = $14 >>> 24;
   $16 = $hash;
   $17 = $16 ^ $15;
   $hash = $17;
  }
  $18 = $g;
  $19 = $18 ^ -1;
  $20 = $hash;
  $21 = $20 & $19;
  $hash = $21;
  $22 = $0;
  $23 = ((($22)) + 1|0);
  $0 = $23;
 }
 $24 = $4 & 511;
 STACKTOP = sp;return ($24|0);
}
function __ZN12baseresourceI6shaderLi512EE8tmanager9innerloadEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rtn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN12baseresourceI6shaderLi512EE10loadbynameEPNS1_8tmanagerEPKc($2,$3)|0);
 $rtn = $4;
 $5 = $rtn;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $9 = $rtn;
  STACKTOP = sp;return ($9|0);
 }
 $7 = ((($2)) + 4|0);
 $8 = $rtn;
 __ZN10stringhashI6shaderLi512EE6insertEPS0_($7,$8);
 $9 = $rtn;
 STACKTOP = sp;return ($9|0);
}
function __ZN12baseresourceI6shaderLi512EE10loadbynameEPNS1_8tmanagerEPKc($mgr,$filename) {
 $mgr = $mgr|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $der = 0, $r = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = $mgr;
 $1 = $filename;
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $r = $5;
 $6 = (__Znwj(28)|0);
 __THREW__ = 0;
 invoke_vi(276,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $2 = $22;
  $3 = $23;
  __ZdlPv($6);
  $24 = $2;
  $25 = $3;
  ___resumeException($24|0);
  // unreachable;
 } else {
  $der = $6;
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf((53048|0),($vararg_buffer|0))|0);
  $10 = $der;
  $11 = ((($10)) + 16|0);
  $12 = $1;
  __ZN5named7setnameEPKc($11,$12);
  $13 = $der;
  $14 = ((($13)) + 16|0);
  $15 = (__ZNK5named7getnameEv($14)|0);
  HEAP32[$vararg_buffer1>>2] = $15;
  (_printf((53048|0),($vararg_buffer1|0))|0);
  $16 = $der;
  $17 = ((($16)) + 16|0);
  __ZN12baseresourceI6shaderLi512EE8reloaderEv($17);
  $18 = $der;
  $19 = ((($18)) + 16|0);
  $20 = (__ZNK5named7getnameEv($19)|0);
  HEAP32[$vararg_buffer4>>2] = $20;
  (_printf((53048|0),($vararg_buffer4|0))|0);
  $21 = $der;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN6shaderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8resourceI6shader8countrefLi512EEC2Ev($1);
 $2 = 48664;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 24|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8resourceI6shader8countrefLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8countrefC2Ev($3);
 $4 = ((($3)) + 8|0);
 __THREW__ = 0;
 invoke_vi(83,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZN8countrefD2Ev($3);
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
 $7 = ((($3)) + 16|0);
 __THREW__ = 0;
 invoke_vi(277,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = 53040;
  HEAP32[$3>>2] = $10;
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 $15 = ((($3)) + 8|0);
 __ZN8duallinkD2Ev($15);
 __ZN8countrefD2Ev($3);
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN12baseresourceI6shaderLi512EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5namedC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8resourceI6shader8countrefLi512EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8resourceI6shader8countrefLi512EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN12baseresourceI6shaderLi512EE8reloaderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -16|0);
 $3 = (__ZNK5named7getnameEv($1)|0);
 __ZN6shader6loaderEPKc($2,$3);
 STACKTOP = sp;return;
}
function __ZN10stringhashI6shaderLi512EE6insertEPS0_($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = (__ZNK5named7getnameEv($4)|0);
 $6 = (__ZN10stringhashI6shaderLi512EE8calchashEPKc($5)|0);
 $hash = $6;
 $7 = $hash;
 $8 = (($2) + ($7<<3)|0);
 $9 = $1;
 $10 = ($9|0)==(0|0);
 $11 = ((($9)) + 8|0);
 $12 = $10 ? 0 : $11;
 __ZN8duallink10insertbackEPS_($8,$12);
 STACKTOP = sp;return;
}
function __Z6strextPcPKc($src,$ext) {
 $src = $src|0;
 $ext = $ext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $t = 0, $t1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $ext;
 $2 = $0;
 $t1 = $2;
 while(1) {
  $3 = $t1;
  $4 = (_strchr($3,47)|0);
  $t = $4;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $t;
  $7 = ((($6)) + 1|0);
  $t1 = $7;
 }
 while(1) {
  $8 = $t1;
  $9 = (_strchr($8,92)|0);
  $t = $9;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $t;
  $12 = ((($11)) + 1|0);
  $t1 = $12;
 }
 $13 = $t1;
 $14 = (_strchr($13,46)|0);
 $t = $14;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $t;
  $17 = $1;
  (_strcpy(($16|0),($17|0))|0);
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $18 = $0;
  $19 = $1;
  (_strcat(($18|0),($19|0))|0);
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __Z6getextPKc($src) {
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $t = 0, $t1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $src;
 $2 = $1;
 $t1 = $2;
 while(1) {
  $3 = $t1;
  $4 = (_strchr($3,47)|0);
  $t = $4;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $t;
  $7 = ((($6)) + 1|0);
  $t1 = $7;
 }
 while(1) {
  $8 = $t1;
  $9 = (_strchr($8,92)|0);
  $t = $9;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $t;
  $12 = ((($11)) + 1|0);
  $t1 = $12;
 }
 $13 = $t1;
 $14 = (_strchr($13,46)|0);
 $t = $14;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $t;
  $0 = $16;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $17 = $1;
  $18 = $1;
  $19 = (_strlen(($18|0))|0);
  $20 = (($17) + ($19)|0);
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __Z8strposixPc($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $src = $1;
 while(1) {
  $2 = $src;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $src;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(92);
  if ($8) {
   $9 = $src;
   HEAP8[$9>>0] = 47;
  }
  $10 = $src;
  $11 = ((($10)) + 1|0);
  $src = $11;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function __Z7mylowerh($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $in;
 $2 = $1;
 $3 = $2&255;
 $4 = ($3|0)<=(90);
 if ($4) {
  $5 = $1;
  $6 = $5&255;
  $7 = ($6|0)>=(65);
  if ($7) {
   $8 = $1;
   $9 = $8&255;
   $10 = (($9) + 32)|0;
   $11 = $10&255;
   $0 = $11;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $12 = $1;
   $13 = $12&255;
   $14 = ($13|0)==(92);
   if ($14) {
    $0 = 47;
    break;
   } else {
    $15 = $1;
    $0 = $15;
    break;
   }
  }
 } while(0);
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function __Z11strcmplowerPKcS0_($src,$dst) {
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $dst;
 $ret = 0;
 while(1) {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  $4 = (__Z7mylowerh($3)|0);
  $5 = $4&255;
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($5) - ($8))|0;
  $ret = $9;
  $10 = ($9|0)!=(0);
  if ($10) {
   break;
  }
  $11 = $1;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = ((($14)) + 1|0);
  $0 = $15;
  $16 = $1;
  $17 = ((($16)) + 1|0);
  $1 = $17;
 }
 $18 = $ret;
 $19 = ($18|0)<(0);
 if ($19) {
  $ret = -1;
  $22 = $ret;
  STACKTOP = sp;return ($22|0);
 }
 $20 = $ret;
 $21 = ($20|0)>(0);
 if (!($21)) {
  $22 = $ret;
  STACKTOP = sp;return ($22|0);
 }
 $ret = 1;
 $22 = $ret;
 STACKTOP = sp;return ($22|0);
}
function __ZplRK4vec3S1_($agg$result,$u,$v) {
 $agg$result = $agg$result|0;
 $u = $u|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $u;
 $1 = $v;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 + $12;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 + $19;
 __ZN4vec3C2Efff($agg$result,$6,$13,$20);
 STACKTOP = sp;return;
}
function __Z3dotRK4vec4S1_($u,$v) {
 $u = $u|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $u;
 $1 = $v;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 $23 = $0;
 $24 = ((($23)) + 12|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = ((($26)) + 12|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $25 * $28;
 $30 = $22 + $29;
 STACKTOP = sp;return (+$30);
}
function __Z3minI4vec3ET_S1_S1_($agg$result,$u,$v) {
 $agg$result = $agg$result|0;
 $u = $u|0;
 $v = $v|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$u>>2];
 $1 = +HEAPF32[$v>>2];
 $2 = $0 < $1;
 $3 = +HEAPF32[$u>>2];
 $4 = +HEAPF32[$v>>2];
 $5 = $2 ? $3 : $4;
 $6 = ((($u)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($v)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 < $9;
 $11 = ((($u)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($v)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $10 ? $12 : $14;
 $16 = ((($u)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = ((($v)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $17 < $19;
 $21 = ((($u)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = ((($v)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $20 ? $22 : $24;
 __ZN4vec3C2Efff($agg$result,$5,$15,$25);
 return;
}
function __Z3maxI4vec3ET_S1_S1_($agg$result,$u,$v) {
 $agg$result = $agg$result|0;
 $u = $u|0;
 $v = $v|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$u>>2];
 $1 = +HEAPF32[$v>>2];
 $2 = $0 > $1;
 $3 = +HEAPF32[$u>>2];
 $4 = +HEAPF32[$v>>2];
 $5 = $2 ? $3 : $4;
 $6 = ((($u)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($v)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 > $9;
 $11 = ((($u)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($v)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $10 ? $12 : $14;
 $16 = ((($u)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = ((($v)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $17 > $19;
 $21 = ((($u)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = ((($v)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $20 ? $22 : $24;
 __ZN4vec3C2Efff($agg$result,$5,$15,$25);
 return;
}
function __ZmlRK4mat4S1_($agg$result,$m,$n) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $n;
 __ZN4mat4C2Ev($agg$result);
 $k = 0;
 while(1) {
  $2 = $k;
  $3 = ($2>>>0)<(4);
  if (!($3)) {
   break;
  }
  $j = 0;
  while(1) {
   $4 = $j;
   $5 = ($4>>>0)<(4);
   if (!($5)) {
    break;
   }
   $6 = $j;
   $7 = $k;
   $8 = (($agg$result) + ($7<<4)|0);
   $9 = (($8) + ($6<<2)|0);
   HEAPF32[$9>>2] = 0.0;
   $i = 0;
   while(1) {
    $10 = $i;
    $11 = ($10>>>0)<(4);
    if (!($11)) {
     break;
    }
    $12 = $i;
    $13 = $k;
    $14 = $0;
    $15 = (($14) + ($13<<4)|0);
    $16 = (($15) + ($12<<2)|0);
    $17 = +HEAPF32[$16>>2];
    $18 = $j;
    $19 = $i;
    $20 = $1;
    $21 = (($20) + ($19<<4)|0);
    $22 = (($21) + ($18<<2)|0);
    $23 = +HEAPF32[$22>>2];
    $24 = $17 * $23;
    $25 = $j;
    $26 = $k;
    $27 = (($agg$result) + ($26<<4)|0);
    $28 = (($27) + ($25<<2)|0);
    $29 = +HEAPF32[$28>>2];
    $30 = $29 + $24;
    HEAPF32[$28>>2] = $30;
    $31 = $i;
    $32 = (($31) + 1)|0;
    $i = $32;
   }
   $33 = $j;
   $34 = (($33) + 1)|0;
   $j = $34;
  }
  $35 = $k;
  $36 = (($35) + 1)|0;
  $k = $36;
 }
 STACKTOP = sp;return;
}
function __ZmlRK4vec4RK4mat4($agg$result,$v,$m) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0;
 var $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $m;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $1;
 $16 = ((($15)) + 32|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $0;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 $23 = $1;
 $24 = ((($23)) + 48|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $0;
 $27 = ((($26)) + 12|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $25 * $28;
 $30 = $22 + $29;
 $31 = $1;
 $32 = ((($31)) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $0;
 $35 = +HEAPF32[$34>>2];
 $36 = $33 * $35;
 $37 = $1;
 $38 = ((($37)) + 16|0);
 $39 = ((($38)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 * $43;
 $45 = $36 + $44;
 $46 = $1;
 $47 = ((($46)) + 32|0);
 $48 = ((($47)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $0;
 $51 = ((($50)) + 8|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $49 * $52;
 $54 = $45 + $53;
 $55 = $1;
 $56 = ((($55)) + 48|0);
 $57 = ((($56)) + 4|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $0;
 $60 = ((($59)) + 12|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $58 * $61;
 $63 = $54 + $62;
 $64 = $1;
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $0;
 $68 = +HEAPF32[$67>>2];
 $69 = $66 * $68;
 $70 = $1;
 $71 = ((($70)) + 16|0);
 $72 = ((($71)) + 8|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $0;
 $75 = ((($74)) + 4|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $73 * $76;
 $78 = $69 + $77;
 $79 = $1;
 $80 = ((($79)) + 32|0);
 $81 = ((($80)) + 8|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $0;
 $84 = ((($83)) + 8|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $82 * $85;
 $87 = $78 + $86;
 $88 = $1;
 $89 = ((($88)) + 48|0);
 $90 = ((($89)) + 8|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $0;
 $93 = ((($92)) + 12|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $91 * $94;
 $96 = $87 + $95;
 $97 = $1;
 $98 = ((($97)) + 12|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $0;
 $101 = +HEAPF32[$100>>2];
 $102 = $99 * $101;
 $103 = $1;
 $104 = ((($103)) + 16|0);
 $105 = ((($104)) + 12|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $0;
 $108 = ((($107)) + 4|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $106 * $109;
 $111 = $102 + $110;
 $112 = $1;
 $113 = ((($112)) + 32|0);
 $114 = ((($113)) + 12|0);
 $115 = +HEAPF32[$114>>2];
 $116 = $0;
 $117 = ((($116)) + 8|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $115 * $118;
 $120 = $111 + $119;
 $121 = $1;
 $122 = ((($121)) + 48|0);
 $123 = ((($122)) + 12|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $0;
 $126 = ((($125)) + 12|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $124 * $127;
 $129 = $120 + $128;
 __ZN4vec4C2Effff($agg$result,$30,$63,$96,$129);
 STACKTOP = sp;return;
}
function __ZmlRK4mat4f($agg$result,$m,$x) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $x = +$x;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $x;
 __ZN4mat4C2Ev($agg$result);
 $j = 0;
 while(1) {
  $2 = $j;
  $3 = ($2>>>0)<(4);
  if (!($3)) {
   break;
  }
  $i = 0;
  while(1) {
   $4 = $i;
   $5 = ($4>>>0)<(4);
   if (!($5)) {
    break;
   }
   $6 = $i;
   $7 = $j;
   $8 = $0;
   $9 = (($8) + ($7<<4)|0);
   $10 = (($9) + ($6<<2)|0);
   $11 = +HEAPF32[$10>>2];
   $12 = $1;
   $13 = $11 * $12;
   $14 = $i;
   $15 = $j;
   $16 = (($agg$result) + ($15<<4)|0);
   $17 = (($16) + ($14<<2)|0);
   HEAPF32[$17>>2] = $13;
   $18 = $i;
   $19 = (($18) + 1)|0;
   $i = $19;
  }
  $20 = $j;
  $21 = (($20) + 1)|0;
  $j = $21;
 }
 STACKTOP = sp;return;
}
function __ZntRK4mat4($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0.0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0.0;
 var $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0;
 var $422 = 0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0;
 var $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0.0;
 var $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0;
 var $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0, $517 = 0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0, $53 = 0.0;
 var $530 = 0, $531 = 0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0.0, $548 = 0.0;
 var $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0, $563 = 0, $564 = 0, $565 = 0.0, $566 = 0.0;
 var $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0.0;
 var $602 = 0.0, $603 = 0, $604 = 0, $605 = 0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0.0, $610 = 0, $611 = 0, $612 = 0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0.0;
 var $620 = 0, $621 = 0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0, $653 = 0, $654 = 0.0, $655 = 0.0, $656 = 0.0;
 var $657 = 0.0, $658 = 0, $659 = 0, $66 = 0.0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0.0;
 var $693 = 0.0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0.0, $700 = 0.0, $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0, $716 = 0, $717 = 0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0;
 var $729 = 0, $73 = 0.0, $730 = 0, $731 = 0.0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0, $736 = 0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0, $742 = 0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0.0, $754 = 0.0, $755 = 0.0, $756 = 0.0, $757 = 0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0, $77 = 0.0, $770 = 0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0, $776 = 0, $777 = 0, $778 = 0.0, $779 = 0.0, $78 = 0.0, $780 = 0.0, $781 = 0.0, $782 = 0;
 var $783 = 0, $784 = 0.0, $785 = 0, $786 = 0, $787 = 0, $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0.0, $791 = 0, $792 = 0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0, $798 = 0, $799 = 0, $8 = 0.0, $80 = 0;
 var $800 = 0.0, $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0, $805 = 0, $806 = 0, $807 = 0.0, $808 = 0.0, $809 = 0.0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0, $818 = 0;
 var $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0.0, $822 = 0.0, $823 = 0, $824 = 0, $825 = 0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0, $83 = 0, $830 = 0, $831 = 0.0, $832 = 0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0;
 var $837 = 0, $838 = 0.0, $839 = 0, $84 = 0, $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0, $844 = 0, $845 = 0.0, $846 = 0, $847 = 0.0, $848 = 0.0, $849 = 0.0, $85 = 0.0, $850 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0;
 var $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $mat = 0, $p00 = 0.0, $p01 = 0.0, $p02 = 0.0, $p03 = 0.0, $p04 = 0.0, $p05 = 0.0, $p06 = 0.0, $p07 = 0.0;
 var $p08 = 0.0, $p09 = 0.0, $p10 = 0.0, $p11 = 0.0, $q00 = 0.0, $q01 = 0.0, $q02 = 0.0, $q03 = 0.0, $q04 = 0.0, $q05 = 0.0, $q06 = 0.0, $q07 = 0.0, $q08 = 0.0, $q09 = 0.0, $q10 = 0.0, $q11 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mat = sp + 96|0;
 $0 = $m;
 __ZN4mat4C2Ev($mat);
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = ((($2)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $0;
 $6 = ((($5)) + 48|0);
 $7 = ((($6)) + 12|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $4 * $8;
 $p00 = $9;
 $10 = $0;
 $11 = ((($10)) + 48|0);
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $0;
 $15 = ((($14)) + 32|0);
 $16 = ((($15)) + 12|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $13 * $17;
 $p01 = $18;
 $19 = $0;
 $20 = ((($19)) + 16|0);
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $0;
 $24 = ((($23)) + 48|0);
 $25 = ((($24)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $22 * $26;
 $p02 = $27;
 $28 = $0;
 $29 = ((($28)) + 48|0);
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $0;
 $33 = ((($32)) + 16|0);
 $34 = ((($33)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $31 * $35;
 $p03 = $36;
 $37 = $0;
 $38 = ((($37)) + 16|0);
 $39 = ((($38)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $0;
 $42 = ((($41)) + 32|0);
 $43 = ((($42)) + 12|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $40 * $44;
 $p04 = $45;
 $46 = $0;
 $47 = ((($46)) + 32|0);
 $48 = ((($47)) + 8|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $0;
 $51 = ((($50)) + 16|0);
 $52 = ((($51)) + 12|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $49 * $53;
 $p05 = $54;
 $55 = $0;
 $56 = ((($55)) + 8|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $0;
 $59 = ((($58)) + 48|0);
 $60 = ((($59)) + 12|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $57 * $61;
 $p06 = $62;
 $63 = $0;
 $64 = ((($63)) + 48|0);
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $0;
 $68 = ((($67)) + 12|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $66 * $69;
 $p07 = $70;
 $71 = $0;
 $72 = ((($71)) + 8|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $0;
 $75 = ((($74)) + 32|0);
 $76 = ((($75)) + 12|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $73 * $77;
 $p08 = $78;
 $79 = $0;
 $80 = ((($79)) + 32|0);
 $81 = ((($80)) + 8|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $0;
 $84 = ((($83)) + 12|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $82 * $85;
 $p09 = $86;
 $87 = $0;
 $88 = ((($87)) + 8|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $0;
 $91 = ((($90)) + 16|0);
 $92 = ((($91)) + 12|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $89 * $93;
 $p10 = $94;
 $95 = $0;
 $96 = ((($95)) + 16|0);
 $97 = ((($96)) + 8|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $0;
 $100 = ((($99)) + 12|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $98 * $101;
 $p11 = $102;
 $103 = $p00;
 $104 = $0;
 $105 = ((($104)) + 16|0);
 $106 = ((($105)) + 4|0);
 $107 = +HEAPF32[$106>>2];
 $108 = $103 * $107;
 $109 = $p03;
 $110 = $0;
 $111 = ((($110)) + 32|0);
 $112 = ((($111)) + 4|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $109 * $113;
 $115 = $108 + $114;
 $116 = $p04;
 $117 = $0;
 $118 = ((($117)) + 48|0);
 $119 = ((($118)) + 4|0);
 $120 = +HEAPF32[$119>>2];
 $121 = $116 * $120;
 $122 = $115 + $121;
 $123 = $p01;
 $124 = $0;
 $125 = ((($124)) + 16|0);
 $126 = ((($125)) + 4|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $123 * $127;
 $129 = $p02;
 $130 = $0;
 $131 = ((($130)) + 32|0);
 $132 = ((($131)) + 4|0);
 $133 = +HEAPF32[$132>>2];
 $134 = $129 * $133;
 $135 = $128 + $134;
 $136 = $p05;
 $137 = $0;
 $138 = ((($137)) + 48|0);
 $139 = ((($138)) + 4|0);
 $140 = +HEAPF32[$139>>2];
 $141 = $136 * $140;
 $142 = $135 + $141;
 $143 = $122 - $142;
 HEAPF32[$mat>>2] = $143;
 $144 = $p01;
 $145 = $0;
 $146 = ((($145)) + 4|0);
 $147 = +HEAPF32[$146>>2];
 $148 = $144 * $147;
 $149 = $p06;
 $150 = $0;
 $151 = ((($150)) + 32|0);
 $152 = ((($151)) + 4|0);
 $153 = +HEAPF32[$152>>2];
 $154 = $149 * $153;
 $155 = $148 + $154;
 $156 = $p09;
 $157 = $0;
 $158 = ((($157)) + 48|0);
 $159 = ((($158)) + 4|0);
 $160 = +HEAPF32[$159>>2];
 $161 = $156 * $160;
 $162 = $155 + $161;
 $163 = $p00;
 $164 = $0;
 $165 = ((($164)) + 4|0);
 $166 = +HEAPF32[$165>>2];
 $167 = $163 * $166;
 $168 = $p07;
 $169 = $0;
 $170 = ((($169)) + 32|0);
 $171 = ((($170)) + 4|0);
 $172 = +HEAPF32[$171>>2];
 $173 = $168 * $172;
 $174 = $167 + $173;
 $175 = $p08;
 $176 = $0;
 $177 = ((($176)) + 48|0);
 $178 = ((($177)) + 4|0);
 $179 = +HEAPF32[$178>>2];
 $180 = $175 * $179;
 $181 = $174 + $180;
 $182 = $162 - $181;
 $183 = ((($mat)) + 4|0);
 HEAPF32[$183>>2] = $182;
 $184 = $p02;
 $185 = $0;
 $186 = ((($185)) + 4|0);
 $187 = +HEAPF32[$186>>2];
 $188 = $184 * $187;
 $189 = $p07;
 $190 = $0;
 $191 = ((($190)) + 16|0);
 $192 = ((($191)) + 4|0);
 $193 = +HEAPF32[$192>>2];
 $194 = $189 * $193;
 $195 = $188 + $194;
 $196 = $p10;
 $197 = $0;
 $198 = ((($197)) + 48|0);
 $199 = ((($198)) + 4|0);
 $200 = +HEAPF32[$199>>2];
 $201 = $196 * $200;
 $202 = $195 + $201;
 $203 = $p03;
 $204 = $0;
 $205 = ((($204)) + 4|0);
 $206 = +HEAPF32[$205>>2];
 $207 = $203 * $206;
 $208 = $p06;
 $209 = $0;
 $210 = ((($209)) + 16|0);
 $211 = ((($210)) + 4|0);
 $212 = +HEAPF32[$211>>2];
 $213 = $208 * $212;
 $214 = $207 + $213;
 $215 = $p11;
 $216 = $0;
 $217 = ((($216)) + 48|0);
 $218 = ((($217)) + 4|0);
 $219 = +HEAPF32[$218>>2];
 $220 = $215 * $219;
 $221 = $214 + $220;
 $222 = $202 - $221;
 $223 = ((($mat)) + 8|0);
 HEAPF32[$223>>2] = $222;
 $224 = $p05;
 $225 = $0;
 $226 = ((($225)) + 4|0);
 $227 = +HEAPF32[$226>>2];
 $228 = $224 * $227;
 $229 = $p08;
 $230 = $0;
 $231 = ((($230)) + 16|0);
 $232 = ((($231)) + 4|0);
 $233 = +HEAPF32[$232>>2];
 $234 = $229 * $233;
 $235 = $228 + $234;
 $236 = $p11;
 $237 = $0;
 $238 = ((($237)) + 32|0);
 $239 = ((($238)) + 4|0);
 $240 = +HEAPF32[$239>>2];
 $241 = $236 * $240;
 $242 = $235 + $241;
 $243 = $p04;
 $244 = $0;
 $245 = ((($244)) + 4|0);
 $246 = +HEAPF32[$245>>2];
 $247 = $243 * $246;
 $248 = $p09;
 $249 = $0;
 $250 = ((($249)) + 16|0);
 $251 = ((($250)) + 4|0);
 $252 = +HEAPF32[$251>>2];
 $253 = $248 * $252;
 $254 = $247 + $253;
 $255 = $p10;
 $256 = $0;
 $257 = ((($256)) + 32|0);
 $258 = ((($257)) + 4|0);
 $259 = +HEAPF32[$258>>2];
 $260 = $255 * $259;
 $261 = $254 + $260;
 $262 = $242 - $261;
 $263 = ((($mat)) + 12|0);
 HEAPF32[$263>>2] = $262;
 $264 = $p01;
 $265 = $0;
 $266 = ((($265)) + 16|0);
 $267 = +HEAPF32[$266>>2];
 $268 = $264 * $267;
 $269 = $p02;
 $270 = $0;
 $271 = ((($270)) + 32|0);
 $272 = +HEAPF32[$271>>2];
 $273 = $269 * $272;
 $274 = $268 + $273;
 $275 = $p05;
 $276 = $0;
 $277 = ((($276)) + 48|0);
 $278 = +HEAPF32[$277>>2];
 $279 = $275 * $278;
 $280 = $274 + $279;
 $281 = $p00;
 $282 = $0;
 $283 = ((($282)) + 16|0);
 $284 = +HEAPF32[$283>>2];
 $285 = $281 * $284;
 $286 = $p03;
 $287 = $0;
 $288 = ((($287)) + 32|0);
 $289 = +HEAPF32[$288>>2];
 $290 = $286 * $289;
 $291 = $285 + $290;
 $292 = $p04;
 $293 = $0;
 $294 = ((($293)) + 48|0);
 $295 = +HEAPF32[$294>>2];
 $296 = $292 * $295;
 $297 = $291 + $296;
 $298 = $280 - $297;
 $299 = ((($mat)) + 16|0);
 HEAPF32[$299>>2] = $298;
 $300 = $p00;
 $301 = $0;
 $302 = +HEAPF32[$301>>2];
 $303 = $300 * $302;
 $304 = $p07;
 $305 = $0;
 $306 = ((($305)) + 32|0);
 $307 = +HEAPF32[$306>>2];
 $308 = $304 * $307;
 $309 = $303 + $308;
 $310 = $p08;
 $311 = $0;
 $312 = ((($311)) + 48|0);
 $313 = +HEAPF32[$312>>2];
 $314 = $310 * $313;
 $315 = $309 + $314;
 $316 = $p01;
 $317 = $0;
 $318 = +HEAPF32[$317>>2];
 $319 = $316 * $318;
 $320 = $p06;
 $321 = $0;
 $322 = ((($321)) + 32|0);
 $323 = +HEAPF32[$322>>2];
 $324 = $320 * $323;
 $325 = $319 + $324;
 $326 = $p09;
 $327 = $0;
 $328 = ((($327)) + 48|0);
 $329 = +HEAPF32[$328>>2];
 $330 = $326 * $329;
 $331 = $325 + $330;
 $332 = $315 - $331;
 $333 = ((($mat)) + 16|0);
 $334 = ((($333)) + 4|0);
 HEAPF32[$334>>2] = $332;
 $335 = $p03;
 $336 = $0;
 $337 = +HEAPF32[$336>>2];
 $338 = $335 * $337;
 $339 = $p06;
 $340 = $0;
 $341 = ((($340)) + 16|0);
 $342 = +HEAPF32[$341>>2];
 $343 = $339 * $342;
 $344 = $338 + $343;
 $345 = $p11;
 $346 = $0;
 $347 = ((($346)) + 48|0);
 $348 = +HEAPF32[$347>>2];
 $349 = $345 * $348;
 $350 = $344 + $349;
 $351 = $p02;
 $352 = $0;
 $353 = +HEAPF32[$352>>2];
 $354 = $351 * $353;
 $355 = $p07;
 $356 = $0;
 $357 = ((($356)) + 16|0);
 $358 = +HEAPF32[$357>>2];
 $359 = $355 * $358;
 $360 = $354 + $359;
 $361 = $p10;
 $362 = $0;
 $363 = ((($362)) + 48|0);
 $364 = +HEAPF32[$363>>2];
 $365 = $361 * $364;
 $366 = $360 + $365;
 $367 = $350 - $366;
 $368 = ((($mat)) + 16|0);
 $369 = ((($368)) + 8|0);
 HEAPF32[$369>>2] = $367;
 $370 = $p04;
 $371 = $0;
 $372 = +HEAPF32[$371>>2];
 $373 = $370 * $372;
 $374 = $p09;
 $375 = $0;
 $376 = ((($375)) + 16|0);
 $377 = +HEAPF32[$376>>2];
 $378 = $374 * $377;
 $379 = $373 + $378;
 $380 = $p10;
 $381 = $0;
 $382 = ((($381)) + 32|0);
 $383 = +HEAPF32[$382>>2];
 $384 = $380 * $383;
 $385 = $379 + $384;
 $386 = $p05;
 $387 = $0;
 $388 = +HEAPF32[$387>>2];
 $389 = $386 * $388;
 $390 = $p08;
 $391 = $0;
 $392 = ((($391)) + 16|0);
 $393 = +HEAPF32[$392>>2];
 $394 = $390 * $393;
 $395 = $389 + $394;
 $396 = $p11;
 $397 = $0;
 $398 = ((($397)) + 32|0);
 $399 = +HEAPF32[$398>>2];
 $400 = $396 * $399;
 $401 = $395 + $400;
 $402 = $385 - $401;
 $403 = ((($mat)) + 16|0);
 $404 = ((($403)) + 12|0);
 HEAPF32[$404>>2] = $402;
 $405 = $0;
 $406 = ((($405)) + 32|0);
 $407 = +HEAPF32[$406>>2];
 $408 = $0;
 $409 = ((($408)) + 48|0);
 $410 = ((($409)) + 4|0);
 $411 = +HEAPF32[$410>>2];
 $412 = $407 * $411;
 $q00 = $412;
 $413 = $0;
 $414 = ((($413)) + 48|0);
 $415 = +HEAPF32[$414>>2];
 $416 = $0;
 $417 = ((($416)) + 32|0);
 $418 = ((($417)) + 4|0);
 $419 = +HEAPF32[$418>>2];
 $420 = $415 * $419;
 $q01 = $420;
 $421 = $0;
 $422 = ((($421)) + 16|0);
 $423 = +HEAPF32[$422>>2];
 $424 = $0;
 $425 = ((($424)) + 48|0);
 $426 = ((($425)) + 4|0);
 $427 = +HEAPF32[$426>>2];
 $428 = $423 * $427;
 $q02 = $428;
 $429 = $0;
 $430 = ((($429)) + 48|0);
 $431 = +HEAPF32[$430>>2];
 $432 = $0;
 $433 = ((($432)) + 16|0);
 $434 = ((($433)) + 4|0);
 $435 = +HEAPF32[$434>>2];
 $436 = $431 * $435;
 $q03 = $436;
 $437 = $0;
 $438 = ((($437)) + 16|0);
 $439 = +HEAPF32[$438>>2];
 $440 = $0;
 $441 = ((($440)) + 32|0);
 $442 = ((($441)) + 4|0);
 $443 = +HEAPF32[$442>>2];
 $444 = $439 * $443;
 $q04 = $444;
 $445 = $0;
 $446 = ((($445)) + 32|0);
 $447 = +HEAPF32[$446>>2];
 $448 = $0;
 $449 = ((($448)) + 16|0);
 $450 = ((($449)) + 4|0);
 $451 = +HEAPF32[$450>>2];
 $452 = $447 * $451;
 $q05 = $452;
 $453 = $0;
 $454 = +HEAPF32[$453>>2];
 $455 = $0;
 $456 = ((($455)) + 48|0);
 $457 = ((($456)) + 4|0);
 $458 = +HEAPF32[$457>>2];
 $459 = $454 * $458;
 $q06 = $459;
 $460 = $0;
 $461 = ((($460)) + 48|0);
 $462 = +HEAPF32[$461>>2];
 $463 = $0;
 $464 = ((($463)) + 4|0);
 $465 = +HEAPF32[$464>>2];
 $466 = $462 * $465;
 $q07 = $466;
 $467 = $0;
 $468 = +HEAPF32[$467>>2];
 $469 = $0;
 $470 = ((($469)) + 32|0);
 $471 = ((($470)) + 4|0);
 $472 = +HEAPF32[$471>>2];
 $473 = $468 * $472;
 $q08 = $473;
 $474 = $0;
 $475 = ((($474)) + 32|0);
 $476 = +HEAPF32[$475>>2];
 $477 = $0;
 $478 = ((($477)) + 4|0);
 $479 = +HEAPF32[$478>>2];
 $480 = $476 * $479;
 $q09 = $480;
 $481 = $0;
 $482 = +HEAPF32[$481>>2];
 $483 = $0;
 $484 = ((($483)) + 16|0);
 $485 = ((($484)) + 4|0);
 $486 = +HEAPF32[$485>>2];
 $487 = $482 * $486;
 $q10 = $487;
 $488 = $0;
 $489 = ((($488)) + 16|0);
 $490 = +HEAPF32[$489>>2];
 $491 = $0;
 $492 = ((($491)) + 4|0);
 $493 = +HEAPF32[$492>>2];
 $494 = $490 * $493;
 $q11 = $494;
 $495 = $q00;
 $496 = $0;
 $497 = ((($496)) + 16|0);
 $498 = ((($497)) + 12|0);
 $499 = +HEAPF32[$498>>2];
 $500 = $495 * $499;
 $501 = $q03;
 $502 = $0;
 $503 = ((($502)) + 32|0);
 $504 = ((($503)) + 12|0);
 $505 = +HEAPF32[$504>>2];
 $506 = $501 * $505;
 $507 = $500 + $506;
 $508 = $q04;
 $509 = $0;
 $510 = ((($509)) + 48|0);
 $511 = ((($510)) + 12|0);
 $512 = +HEAPF32[$511>>2];
 $513 = $508 * $512;
 $514 = $507 + $513;
 $515 = $q01;
 $516 = $0;
 $517 = ((($516)) + 16|0);
 $518 = ((($517)) + 12|0);
 $519 = +HEAPF32[$518>>2];
 $520 = $515 * $519;
 $521 = $q02;
 $522 = $0;
 $523 = ((($522)) + 32|0);
 $524 = ((($523)) + 12|0);
 $525 = +HEAPF32[$524>>2];
 $526 = $521 * $525;
 $527 = $520 + $526;
 $528 = $q05;
 $529 = $0;
 $530 = ((($529)) + 48|0);
 $531 = ((($530)) + 12|0);
 $532 = +HEAPF32[$531>>2];
 $533 = $528 * $532;
 $534 = $527 + $533;
 $535 = $514 - $534;
 $536 = ((($mat)) + 32|0);
 HEAPF32[$536>>2] = $535;
 $537 = $q01;
 $538 = $0;
 $539 = ((($538)) + 12|0);
 $540 = +HEAPF32[$539>>2];
 $541 = $537 * $540;
 $542 = $q06;
 $543 = $0;
 $544 = ((($543)) + 32|0);
 $545 = ((($544)) + 12|0);
 $546 = +HEAPF32[$545>>2];
 $547 = $542 * $546;
 $548 = $541 + $547;
 $549 = $q09;
 $550 = $0;
 $551 = ((($550)) + 48|0);
 $552 = ((($551)) + 12|0);
 $553 = +HEAPF32[$552>>2];
 $554 = $549 * $553;
 $555 = $548 + $554;
 $556 = $q00;
 $557 = $0;
 $558 = ((($557)) + 12|0);
 $559 = +HEAPF32[$558>>2];
 $560 = $556 * $559;
 $561 = $q07;
 $562 = $0;
 $563 = ((($562)) + 32|0);
 $564 = ((($563)) + 12|0);
 $565 = +HEAPF32[$564>>2];
 $566 = $561 * $565;
 $567 = $560 + $566;
 $568 = $q08;
 $569 = $0;
 $570 = ((($569)) + 48|0);
 $571 = ((($570)) + 12|0);
 $572 = +HEAPF32[$571>>2];
 $573 = $568 * $572;
 $574 = $567 + $573;
 $575 = $555 - $574;
 $576 = ((($mat)) + 32|0);
 $577 = ((($576)) + 4|0);
 HEAPF32[$577>>2] = $575;
 $578 = $q02;
 $579 = $0;
 $580 = ((($579)) + 12|0);
 $581 = +HEAPF32[$580>>2];
 $582 = $578 * $581;
 $583 = $q07;
 $584 = $0;
 $585 = ((($584)) + 16|0);
 $586 = ((($585)) + 12|0);
 $587 = +HEAPF32[$586>>2];
 $588 = $583 * $587;
 $589 = $582 + $588;
 $590 = $q10;
 $591 = $0;
 $592 = ((($591)) + 48|0);
 $593 = ((($592)) + 12|0);
 $594 = +HEAPF32[$593>>2];
 $595 = $590 * $594;
 $596 = $589 + $595;
 $597 = $q03;
 $598 = $0;
 $599 = ((($598)) + 12|0);
 $600 = +HEAPF32[$599>>2];
 $601 = $597 * $600;
 $602 = $q06;
 $603 = $0;
 $604 = ((($603)) + 16|0);
 $605 = ((($604)) + 12|0);
 $606 = +HEAPF32[$605>>2];
 $607 = $602 * $606;
 $608 = $601 + $607;
 $609 = $q11;
 $610 = $0;
 $611 = ((($610)) + 48|0);
 $612 = ((($611)) + 12|0);
 $613 = +HEAPF32[$612>>2];
 $614 = $609 * $613;
 $615 = $608 + $614;
 $616 = $596 - $615;
 $617 = ((($mat)) + 32|0);
 $618 = ((($617)) + 8|0);
 HEAPF32[$618>>2] = $616;
 $619 = $q05;
 $620 = $0;
 $621 = ((($620)) + 12|0);
 $622 = +HEAPF32[$621>>2];
 $623 = $619 * $622;
 $624 = $q08;
 $625 = $0;
 $626 = ((($625)) + 16|0);
 $627 = ((($626)) + 12|0);
 $628 = +HEAPF32[$627>>2];
 $629 = $624 * $628;
 $630 = $623 + $629;
 $631 = $q11;
 $632 = $0;
 $633 = ((($632)) + 32|0);
 $634 = ((($633)) + 12|0);
 $635 = +HEAPF32[$634>>2];
 $636 = $631 * $635;
 $637 = $630 + $636;
 $638 = $q04;
 $639 = $0;
 $640 = ((($639)) + 12|0);
 $641 = +HEAPF32[$640>>2];
 $642 = $638 * $641;
 $643 = $q09;
 $644 = $0;
 $645 = ((($644)) + 16|0);
 $646 = ((($645)) + 12|0);
 $647 = +HEAPF32[$646>>2];
 $648 = $643 * $647;
 $649 = $642 + $648;
 $650 = $q10;
 $651 = $0;
 $652 = ((($651)) + 32|0);
 $653 = ((($652)) + 12|0);
 $654 = +HEAPF32[$653>>2];
 $655 = $650 * $654;
 $656 = $649 + $655;
 $657 = $637 - $656;
 $658 = ((($mat)) + 32|0);
 $659 = ((($658)) + 12|0);
 HEAPF32[$659>>2] = $657;
 $660 = $q02;
 $661 = $0;
 $662 = ((($661)) + 32|0);
 $663 = ((($662)) + 8|0);
 $664 = +HEAPF32[$663>>2];
 $665 = $660 * $664;
 $666 = $q05;
 $667 = $0;
 $668 = ((($667)) + 48|0);
 $669 = ((($668)) + 8|0);
 $670 = +HEAPF32[$669>>2];
 $671 = $666 * $670;
 $672 = $665 + $671;
 $673 = $q01;
 $674 = $0;
 $675 = ((($674)) + 16|0);
 $676 = ((($675)) + 8|0);
 $677 = +HEAPF32[$676>>2];
 $678 = $673 * $677;
 $679 = $672 + $678;
 $680 = $q04;
 $681 = $0;
 $682 = ((($681)) + 48|0);
 $683 = ((($682)) + 8|0);
 $684 = +HEAPF32[$683>>2];
 $685 = $680 * $684;
 $686 = $q00;
 $687 = $0;
 $688 = ((($687)) + 16|0);
 $689 = ((($688)) + 8|0);
 $690 = +HEAPF32[$689>>2];
 $691 = $686 * $690;
 $692 = $685 + $691;
 $693 = $q03;
 $694 = $0;
 $695 = ((($694)) + 32|0);
 $696 = ((($695)) + 8|0);
 $697 = +HEAPF32[$696>>2];
 $698 = $693 * $697;
 $699 = $692 + $698;
 $700 = $679 - $699;
 $701 = ((($mat)) + 48|0);
 HEAPF32[$701>>2] = $700;
 $702 = $q08;
 $703 = $0;
 $704 = ((($703)) + 48|0);
 $705 = ((($704)) + 8|0);
 $706 = +HEAPF32[$705>>2];
 $707 = $702 * $706;
 $708 = $q00;
 $709 = $0;
 $710 = ((($709)) + 8|0);
 $711 = +HEAPF32[$710>>2];
 $712 = $708 * $711;
 $713 = $707 + $712;
 $714 = $q07;
 $715 = $0;
 $716 = ((($715)) + 32|0);
 $717 = ((($716)) + 8|0);
 $718 = +HEAPF32[$717>>2];
 $719 = $714 * $718;
 $720 = $713 + $719;
 $721 = $q06;
 $722 = $0;
 $723 = ((($722)) + 32|0);
 $724 = ((($723)) + 8|0);
 $725 = +HEAPF32[$724>>2];
 $726 = $721 * $725;
 $727 = $q09;
 $728 = $0;
 $729 = ((($728)) + 48|0);
 $730 = ((($729)) + 8|0);
 $731 = +HEAPF32[$730>>2];
 $732 = $727 * $731;
 $733 = $726 + $732;
 $734 = $q01;
 $735 = $0;
 $736 = ((($735)) + 8|0);
 $737 = +HEAPF32[$736>>2];
 $738 = $734 * $737;
 $739 = $733 + $738;
 $740 = $720 - $739;
 $741 = ((($mat)) + 48|0);
 $742 = ((($741)) + 4|0);
 HEAPF32[$742>>2] = $740;
 $743 = $q06;
 $744 = $0;
 $745 = ((($744)) + 16|0);
 $746 = ((($745)) + 8|0);
 $747 = +HEAPF32[$746>>2];
 $748 = $743 * $747;
 $749 = $q11;
 $750 = $0;
 $751 = ((($750)) + 48|0);
 $752 = ((($751)) + 8|0);
 $753 = +HEAPF32[$752>>2];
 $754 = $749 * $753;
 $755 = $748 + $754;
 $756 = $q03;
 $757 = $0;
 $758 = ((($757)) + 8|0);
 $759 = +HEAPF32[$758>>2];
 $760 = $756 * $759;
 $761 = $755 + $760;
 $762 = $q10;
 $763 = $0;
 $764 = ((($763)) + 48|0);
 $765 = ((($764)) + 8|0);
 $766 = +HEAPF32[$765>>2];
 $767 = $762 * $766;
 $768 = $q02;
 $769 = $0;
 $770 = ((($769)) + 8|0);
 $771 = +HEAPF32[$770>>2];
 $772 = $768 * $771;
 $773 = $767 + $772;
 $774 = $q07;
 $775 = $0;
 $776 = ((($775)) + 16|0);
 $777 = ((($776)) + 8|0);
 $778 = +HEAPF32[$777>>2];
 $779 = $774 * $778;
 $780 = $773 + $779;
 $781 = $761 - $780;
 $782 = ((($mat)) + 48|0);
 $783 = ((($782)) + 8|0);
 HEAPF32[$783>>2] = $781;
 $784 = $q10;
 $785 = $0;
 $786 = ((($785)) + 32|0);
 $787 = ((($786)) + 8|0);
 $788 = +HEAPF32[$787>>2];
 $789 = $784 * $788;
 $790 = $q04;
 $791 = $0;
 $792 = ((($791)) + 8|0);
 $793 = +HEAPF32[$792>>2];
 $794 = $790 * $793;
 $795 = $789 + $794;
 $796 = $q09;
 $797 = $0;
 $798 = ((($797)) + 16|0);
 $799 = ((($798)) + 8|0);
 $800 = +HEAPF32[$799>>2];
 $801 = $796 * $800;
 $802 = $795 + $801;
 $803 = $q08;
 $804 = $0;
 $805 = ((($804)) + 16|0);
 $806 = ((($805)) + 8|0);
 $807 = +HEAPF32[$806>>2];
 $808 = $803 * $807;
 $809 = $q11;
 $810 = $0;
 $811 = ((($810)) + 32|0);
 $812 = ((($811)) + 8|0);
 $813 = +HEAPF32[$812>>2];
 $814 = $809 * $813;
 $815 = $808 + $814;
 $816 = $q05;
 $817 = $0;
 $818 = ((($817)) + 8|0);
 $819 = +HEAPF32[$818>>2];
 $820 = $816 * $819;
 $821 = $815 + $820;
 $822 = $802 - $821;
 $823 = ((($mat)) + 48|0);
 $824 = ((($823)) + 12|0);
 HEAPF32[$824>>2] = $822;
 $825 = $0;
 $826 = +HEAPF32[$825>>2];
 $827 = +HEAPF32[$mat>>2];
 $828 = $826 * $827;
 $829 = $0;
 $830 = ((($829)) + 16|0);
 $831 = +HEAPF32[$830>>2];
 $832 = ((($mat)) + 4|0);
 $833 = +HEAPF32[$832>>2];
 $834 = $831 * $833;
 $835 = $828 + $834;
 $836 = $0;
 $837 = ((($836)) + 32|0);
 $838 = +HEAPF32[$837>>2];
 $839 = ((($mat)) + 8|0);
 $840 = +HEAPF32[$839>>2];
 $841 = $838 * $840;
 $842 = $835 + $841;
 $843 = $0;
 $844 = ((($843)) + 48|0);
 $845 = +HEAPF32[$844>>2];
 $846 = ((($mat)) + 12|0);
 $847 = +HEAPF32[$846>>2];
 $848 = $845 * $847;
 $849 = $842 + $848;
 $850 = 1.0 / $849;
 __ZmlRK4mat4f($agg$result,$mat,$850);
 STACKTOP = sp;return;
}
function __Z8rotateX4f($agg$result,$angle) {
 $agg$result = $agg$result|0;
 $angle = +$angle;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $cosA = 0.0, $sinA = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $angle;
 $1 = $0;
 $2 = (+Math_cos((+$1)));
 $cosA = $2;
 $3 = $0;
 $4 = (+Math_sin((+$3)));
 $sinA = $4;
 $5 = $cosA;
 $6 = $sinA;
 $7 = -$6;
 $8 = $sinA;
 $9 = $cosA;
 __ZN4mat4C2Effffffffffffffff($agg$result,1.0,0.0,0.0,0.0,0.0,$5,$7,0.0,0.0,$8,$9,0.0,0.0,0.0,0.0,1.0);
 STACKTOP = sp;return;
}
function __Z8rotateZ4f($agg$result,$angle) {
 $agg$result = $agg$result|0;
 $angle = +$angle;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $cosA = 0.0, $sinA = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $angle;
 $1 = $0;
 $2 = (+Math_cos((+$1)));
 $cosA = $2;
 $3 = $0;
 $4 = (+Math_sin((+$3)));
 $sinA = $4;
 $5 = $cosA;
 $6 = $sinA;
 $7 = -$6;
 $8 = $sinA;
 $9 = $cosA;
 __ZN4mat4C2Effffffffffffffff($agg$result,$5,$7,0.0,0.0,$8,$9,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
 STACKTOP = sp;return;
}
function __Z18perspectiveMatrixXfiiffb($agg$result,$fov,$width,$height,$zNear,$zFar,$d3dStyle) {
 $agg$result = $agg$result|0;
 $fov = +$fov;
 $width = $width|0;
 $height = $height|0;
 $zNear = +$zNear;
 $zFar = +$zFar;
 $d3dStyle = $d3dStyle|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $h = 0.0;
 var $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fov;
 $1 = $width;
 $2 = $height;
 $3 = $zNear;
 $4 = $zFar;
 $6 = $d3dStyle&1;
 $5 = $6;
 $7 = $0;
 $8 = 0.5 * $7;
 $9 = (+Math_tan((+$8)));
 $w = $9;
 $10 = $w;
 $11 = $2;
 $12 = (+($11|0));
 $13 = $10 * $12;
 $14 = $1;
 $15 = (+($14|0));
 $16 = $13 / $15;
 $h = $16;
 $17 = $w;
 $18 = 1.0 / $17;
 $19 = $h;
 $20 = 1.0 / $19;
 $21 = $4;
 $22 = $3;
 $23 = $21 + $22;
 $24 = $4;
 $25 = $3;
 $26 = $24 - $25;
 $27 = $23 / $26;
 $28 = $4;
 $29 = 2.0 * $28;
 $30 = $3;
 $31 = $29 * $30;
 $32 = -$31;
 $33 = $4;
 $34 = $3;
 $35 = $33 - $34;
 $36 = $32 / $35;
 __ZN4mat4C2Effffffffffffffff($agg$result,$18,0.0,0.0,0.0,0.0,$20,0.0,0.0,0.0,0.0,$27,$36,0.0,0.0,1.0,0.0);
 $37 = $5;
 $38 = $37&1;
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = ((($agg$result)) + 32|0);
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = ((($agg$result)) + 48|0);
 $43 = ((($42)) + 8|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $41 + $44;
 $46 = 0.5 * $45;
 $47 = ((($agg$result)) + 32|0);
 $48 = ((($47)) + 8|0);
 HEAPF32[$48>>2] = $46;
 $49 = ((($agg$result)) + 32|0);
 $50 = ((($49)) + 12|0);
 $51 = +HEAPF32[$50>>2];
 $52 = ((($agg$result)) + 48|0);
 $53 = ((($52)) + 12|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $51 + $54;
 $56 = 0.5 * $55;
 $57 = ((($agg$result)) + 32|0);
 $58 = ((($57)) + 12|0);
 HEAPF32[$58>>2] = $56;
 STACKTOP = sp;return;
}
function __Z9identity4v($agg$result) {
 $agg$result = $agg$result|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4mat4C2Effffffffffffffff($agg$result,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
 return;
}
function __ZN4mat4C2Effffffffffffffff($this,$m00,$m01,$m02,$m03,$m10,$m11,$m12,$m13,$m20,$m21,$m22,$m23,$m30,$m31,$m32,$m33) {
 $this = $this|0;
 $m00 = +$m00;
 $m01 = +$m01;
 $m02 = +$m02;
 $m03 = +$m03;
 $m10 = +$m10;
 $m11 = +$m11;
 $m12 = +$m12;
 $m13 = +$m13;
 $m20 = +$m20;
 $m21 = +$m21;
 $m22 = +$m22;
 $m23 = +$m23;
 $m30 = +$m30;
 $m31 = +$m31;
 $m32 = +$m32;
 $m33 = +$m33;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m00;
 $2 = $m01;
 $3 = $m02;
 $4 = $m03;
 $5 = $m10;
 $6 = $m11;
 $7 = $m12;
 $8 = $m13;
 $9 = $m20;
 $10 = $m21;
 $11 = $m22;
 $12 = $m23;
 $13 = $m30;
 $14 = $m31;
 $15 = $m32;
 $16 = $m33;
 $17 = $0;
 $18 = $1;
 HEAPF32[$17>>2] = $18;
 $19 = $2;
 $20 = ((($17)) + 4|0);
 HEAPF32[$20>>2] = $19;
 $21 = $3;
 $22 = ((($17)) + 8|0);
 HEAPF32[$22>>2] = $21;
 $23 = $4;
 $24 = ((($17)) + 12|0);
 HEAPF32[$24>>2] = $23;
 $25 = $5;
 $26 = ((($17)) + 16|0);
 HEAPF32[$26>>2] = $25;
 $27 = $6;
 $28 = ((($17)) + 16|0);
 $29 = ((($28)) + 4|0);
 HEAPF32[$29>>2] = $27;
 $30 = $7;
 $31 = ((($17)) + 16|0);
 $32 = ((($31)) + 8|0);
 HEAPF32[$32>>2] = $30;
 $33 = $8;
 $34 = ((($17)) + 16|0);
 $35 = ((($34)) + 12|0);
 HEAPF32[$35>>2] = $33;
 $36 = $9;
 $37 = ((($17)) + 32|0);
 HEAPF32[$37>>2] = $36;
 $38 = $10;
 $39 = ((($17)) + 32|0);
 $40 = ((($39)) + 4|0);
 HEAPF32[$40>>2] = $38;
 $41 = $11;
 $42 = ((($17)) + 32|0);
 $43 = ((($42)) + 8|0);
 HEAPF32[$43>>2] = $41;
 $44 = $12;
 $45 = ((($17)) + 32|0);
 $46 = ((($45)) + 12|0);
 HEAPF32[$46>>2] = $44;
 $47 = $13;
 $48 = ((($17)) + 48|0);
 HEAPF32[$48>>2] = $47;
 $49 = $14;
 $50 = ((($17)) + 48|0);
 $51 = ((($50)) + 4|0);
 HEAPF32[$51>>2] = $49;
 $52 = $15;
 $53 = ((($17)) + 48|0);
 $54 = ((($53)) + 8|0);
 HEAPF32[$54>>2] = $52;
 $55 = $16;
 $56 = ((($17)) + 48|0);
 $57 = ((($56)) + 12|0);
 HEAPF32[$57>>2] = $55;
 STACKTOP = sp;return;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0 = $$0211;
     break;
    }
    $11 = ((($$0211)) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$02$lcssa = $11;
     break L5;
    } else {
     $$0211 = $11;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $23 = $16;$w$08 = $$02$lcssa;
   while(1) {
    $22 = $23 ^ $15;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if (!($28)) {
     $w$0$lcssa = $w$08;
     break L12;
    }
    $29 = ((($w$08)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + -16843009)|0;
    $32 = $30 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    if ($35) {
     $23 = $30;$w$08 = $29;
    } else {
     $w$0$lcssa = $29;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = ((($$1)) + 1|0);
  if ($or$cond5) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 return ($$0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((53904|0),(53928|0),303,(53992|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((54024|0),(278|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[54016>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(54032,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 511]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (53216);
   ___cxa_throw(($7|0),(53248|0),(53|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (54088|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(279,(54104|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(279,(54144|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(280);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(281)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[13300]|0;HEAP32[13300] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[53264>>2]|0;HEAP32[53264>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (53304);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt14overflow_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,53488,53544,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 127]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 255]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L31: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L31;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L31;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L31;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L31;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 127]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 255]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 255]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 127]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 127]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 511]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,53488,53656,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[54408>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(54512,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[53288>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 511](53288,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[54408>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 511]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(54416,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[54408>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(54464,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(54552,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((54016|0),(282|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(54200,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[54016>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(54256,$vararg_buffer);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((54312|0),(54344|0),1164,(53992|0));
 // unreachable;
}
function _fmodf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa = 0, $$lcssa6 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $ex$0$lcssa = 0, $ex$025 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$211 = 0, $ex$3$lcssa = 0, $ex$38 = 0, $ey$0$lcssa = 0, $ey$019 = 0, $ey$1$ph = 0, $i$026 = 0, $i$120 = 0;
 var $or$cond = 0, $uxi$0 = 0, $uxi$1$lcssa = 0, $uxi$112 = 0, $uxi$2 = 0, $uxi$3$lcssa = 0, $uxi$3$ph = 0, $uxi$39 = 0, $uxi$4 = 0, $uy$sroa$0$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
 $2 = $0 >>> 23;
 $3 = $2 & 255;
 $4 = $1 >>> 23;
 $5 = $4 & 255;
 $6 = $0 & -2147483648;
 $7 = $1 << 1;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = $1 & 2147483647;
  $10 = ($9>>>0)>(2139095040);
  $11 = ($3|0)==(255);
  $or$cond = $10 | $11;
  if (!($or$cond)) {
   $14 = $0 << 1;
   $15 = ($14>>>0)>($7>>>0);
   if (!($15)) {
    $16 = ($14|0)==($7|0);
    $17 = $x * 0.0;
    $$x = $16 ? $17 : $x;
    return (+$$x);
   }
   $18 = ($3|0)==(0);
   if ($18) {
    $19 = $0 << 9;
    $20 = ($19|0)>(-1);
    if ($20) {
     $ex$025 = 0;$i$026 = $19;
     while(1) {
      $21 = (($ex$025) + -1)|0;
      $22 = $i$026 << 1;
      $23 = ($22|0)>(-1);
      if ($23) {
       $ex$025 = $21;$i$026 = $22;
      } else {
       $ex$0$lcssa = $21;
       break;
      }
     }
    } else {
     $ex$0$lcssa = 0;
    }
    $24 = (1 - ($ex$0$lcssa))|0;
    $25 = $0 << $24;
    $ex$1 = $ex$0$lcssa;$uxi$0 = $25;
   } else {
    $26 = $0 & 8388607;
    $27 = $26 | 8388608;
    $ex$1 = $3;$uxi$0 = $27;
   }
   $28 = ($5|0)==(0);
   if ($28) {
    $29 = $1 << 9;
    $30 = ($29|0)>(-1);
    if ($30) {
     $ey$019 = 0;$i$120 = $29;
     while(1) {
      $31 = (($ey$019) + -1)|0;
      $32 = $i$120 << 1;
      $33 = ($32|0)>(-1);
      if ($33) {
       $ey$019 = $31;$i$120 = $32;
      } else {
       $ey$0$lcssa = $31;
       break;
      }
     }
    } else {
     $ey$0$lcssa = 0;
    }
    $34 = (1 - ($ey$0$lcssa))|0;
    $35 = $1 << $34;
    $ey$1$ph = $ey$0$lcssa;$uy$sroa$0$0$ph = $35;
   } else {
    $36 = $1 & 8388607;
    $37 = $36 | 8388608;
    $ey$1$ph = $5;$uy$sroa$0$0$ph = $37;
   }
   $38 = ($ex$1|0)>($ey$1$ph|0);
   $39 = (($uxi$0) - ($uy$sroa$0$0$ph))|0;
   $40 = ($39|0)>(-1);
   L23: do {
    if ($38) {
     $62 = $40;$63 = $39;$ex$211 = $ex$1;$uxi$112 = $uxi$0;
     while(1) {
      if ($62) {
       $41 = ($uxi$112|0)==($uy$sroa$0$0$ph|0);
       if ($41) {
        break;
       } else {
        $uxi$2 = $63;
       }
      } else {
       $uxi$2 = $uxi$112;
      }
      $43 = $uxi$2 << 1;
      $44 = (($ex$211) + -1)|0;
      $45 = ($44|0)>($ey$1$ph|0);
      $46 = (($43) - ($uy$sroa$0$0$ph))|0;
      $47 = ($46|0)>(-1);
      if ($45) {
       $62 = $47;$63 = $46;$ex$211 = $44;$uxi$112 = $43;
      } else {
       $$lcssa = $46;$$lcssa6 = $47;$ex$2$lcssa = $44;$uxi$1$lcssa = $43;
       break L23;
      }
     }
     $42 = $x * 0.0;
     $$0 = $42;
     return (+$$0);
    } else {
     $$lcssa = $39;$$lcssa6 = $40;$ex$2$lcssa = $ex$1;$uxi$1$lcssa = $uxi$0;
    }
   } while(0);
   if ($$lcssa6) {
    $48 = ($uxi$1$lcssa|0)==($uy$sroa$0$0$ph|0);
    if ($48) {
     $50 = $x * 0.0;
     $$0 = $50;
     return (+$$0);
    } else {
     $uxi$3$ph = $$lcssa;
    }
   } else {
    $uxi$3$ph = $uxi$1$lcssa;
   }
   $49 = ($uxi$3$ph>>>0)<(8388608);
   if ($49) {
    $ex$38 = $ex$2$lcssa;$uxi$39 = $uxi$3$ph;
    while(1) {
     $51 = $uxi$39 << 1;
     $52 = (($ex$38) + -1)|0;
     $53 = ($51>>>0)<(8388608);
     if ($53) {
      $ex$38 = $52;$uxi$39 = $51;
     } else {
      $ex$3$lcssa = $52;$uxi$3$lcssa = $51;
      break;
     }
    }
   } else {
    $ex$3$lcssa = $ex$2$lcssa;$uxi$3$lcssa = $uxi$3$ph;
   }
   $54 = ($ex$3$lcssa|0)>(0);
   if ($54) {
    $55 = (($uxi$3$lcssa) + -8388608)|0;
    $56 = $ex$3$lcssa << 23;
    $57 = $55 | $56;
    $uxi$4 = $57;
   } else {
    $58 = (1 - ($ex$3$lcssa))|0;
    $59 = $uxi$3$lcssa >>> $58;
    $uxi$4 = $59;
   }
   $60 = $uxi$4 | $6;
   $61 = (HEAP32[tempDoublePtr>>2]=$60,+HEAPF32[tempDoublePtr>>2]);
   $$0 = $61;
   return (+$$0);
  }
 }
 $12 = $x * $y;
 $13 = $12 / $12;
 $$0 = $13;
 return (+$$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 511]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 511]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 511]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=54584; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$100 = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0;
 var $$412184$i = 0, $$5196$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa275$i = 0, $$lcssa443 = 0, $$lcssa448 = 0, $$lcssa449 = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa452 = 0, $$lcssa454 = 0, $$lcssa455 = 0;
 var $$lcssa461 = 0, $$lcssa465 = 0, $$lcssa467 = 0, $$lcssa470 = 0, $$lcssa471 = 0, $$lcssa474 = 0.0, $$lcssa475 = 0, $$lcssa478 = 0, $$lcssa482 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0;
 var $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre272 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
 var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
 var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
 var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
 var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
 var $1148 = 0, $1149 = 0.0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0.0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1164$phi = 0;
 var $1165 = 0, $1165$phi = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0.0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0.0;
 var $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0.0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0.0, $776 = 0.0, $777 = 0, $778 = 0.0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0;
 var $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0;
 var $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0, $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0;
 var $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0;
 var $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0;
 var $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0;
 var $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0;
 var $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0;
 var $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0115 = 0;
 var $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt87$lcssa = 0, $fmt87167 = 0, $fmt88 = 0, $fmt89 = 0, $fmt90 = 0, $fmt92 = 0, $fmt92$lcssa446 = 0, $fmt93 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1191 = 0, $i$1222$i = 0, $i$2166 = 0, $i$2166$lcssa = 0, $i$2209$i = 0, $i$3164 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond331 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext101 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa447 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0168 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1164 = 0;$1165 = 0;$cnt$0 = 0;$fmt89 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt89>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1166 = $22;$fmt88 = $fmt89;
  }
  while(1) {
   if ((($1166<<24>>24) == 37)) {
    $fmt87167 = $fmt88;$z$0168 = $fmt88;
    label = 9;
    break;
   } else if ((($1166<<24>>24) == 0)) {
    $fmt87$lcssa = $fmt88;$z$0$lcssa = $fmt88;
    break;
   }
   $24 = ((($fmt88)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1166 = $$pre;$fmt88 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt87167)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt87$lcssa = $fmt87167;$z$0$lcssa = $z$0168;
      break L12;
     }
     $28 = ((($z$0168)) + 1|0);
     $29 = ((($fmt87167)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt87167 = $29;$z$0168 = $28;
      label = 9;
     } else {
      $fmt87$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt89;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt89,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt89|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1165$phi = $1165;$1164$phi = $1164;$cnt$0 = $cnt$1;$fmt89 = $fmt87$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1165 = $1165$phi;$1164 = $1164$phi;
   continue;
  }
  $36 = ((($fmt87$lcssa)) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = ((($fmt87$lcssa)) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   $42 = ((($fmt87$lcssa)) + 3|0);
   $$100 = $41 ? $42 : $36;
   $$l10n$0 = $41 ? 1 : $l10n$0;
   $isdigittmp$ = $41 ? $isdigittmp : -1;
   $$pre272 = HEAP8[$$100>>0]|0;
   $44 = $$pre272;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L24: do {
   if ($46) {
    $48 = $43;$53 = $44;$fl$0175 = 0;$storemerge8174 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $62 = $53;$fl$0115 = $fl$0175;$storemerge8113 = $storemerge8174;
      break L24;
     }
     $52 = $53 << 24 >> 24;
     $54 = (($52) + -32)|0;
     $55 = 1 << $54;
     $56 = $55 | $fl$0175;
     $57 = ((($storemerge8174)) + 1|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58 << 24 >> 24;
     $60 = $59 & -32;
     $61 = ($60|0)==(32);
     if ($61) {
      $48 = $59;$53 = $58;$fl$0175 = $56;$storemerge8174 = $57;
     } else {
      $62 = $58;$fl$0115 = $56;$storemerge8113 = $57;
      break;
     }
    }
   } else {
    $62 = $44;$fl$0115 = 0;$storemerge8113 = $storemerge;
   }
  } while(0);
  $63 = ($62<<24>>24)==(42);
  do {
   if ($63) {
    $64 = ((($storemerge8113)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $isdigittmp11 = (($66) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $67 = ((($storemerge8113)) + 2|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68<<24>>24)==(36);
     if ($69) {
      $70 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$70>>2] = 10;
      $71 = HEAP8[$64>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = (($72) + -48)|0;
      $74 = (($nl_arg) + ($73<<3)|0);
      $75 = $74;
      $76 = $75;
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 4)|0;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($storemerge8113)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $81;$w$0 = $77;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $82 = ($l10n$1|0)==(0);
     if (!($82)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0115;$fmt90 = $64;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $83 = $arglist_current;
     $84 = ((0) + 4|0);
     $expanded64 = $84;
     $expanded = (($expanded64) - 1)|0;
     $85 = (($83) + ($expanded))|0;
     $86 = ((0) + 4|0);
     $expanded68 = $86;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $87 = $85 & $expanded66;
     $88 = $87;
     $89 = HEAP32[$88>>2]|0;
     $arglist_next = ((($88)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $64;$w$0 = $89;
    }
    $90 = ($w$0|0)<(0);
    if ($90) {
     $91 = $fl$0115 | 8192;
     $92 = (0 - ($w$0))|0;
     $fl$1 = $91;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $92;
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $93 = $62 << 24 >> 24;
    $isdigittmp1$i = (($93) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $97 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $94 = ($i$03$i*10)|0;
      $95 = (($94) + ($isdigittmp4$i))|0;
      $96 = ((($97)) + 1|0);
      $98 = HEAP8[$96>>0]|0;
      $99 = $98 << 24 >> 24;
      $isdigittmp$i = (($99) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $97 = $96;$i$03$i = $95;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $95;$$lcssa443 = $96;
       break;
      }
     }
     $100 = ($$lcssa|0)<(0);
     if ($100) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $fl$1 = $fl$0115;$fmt90 = $$lcssa443;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $101 = HEAP8[$fmt90>>0]|0;
  $102 = ($101<<24>>24)==(46);
  L45: do {
   if ($102) {
    $103 = ((($fmt90)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = ($104<<24>>24)==(42);
    if (!($105)) {
     $132 = $104 << 24 >> 24;
     $isdigittmp1$i27 = (($132) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $136 = $103;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $fmt93 = $103;$p$0 = 0;
      break;
     }
     while(1) {
      $133 = ($i$03$i30*10)|0;
      $134 = (($133) + ($isdigittmp4$i29))|0;
      $135 = ((($136)) + 1|0);
      $137 = HEAP8[$135>>0]|0;
      $138 = $137 << 24 >> 24;
      $isdigittmp$i31 = (($138) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $136 = $135;$i$03$i30 = $134;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $fmt93 = $135;$p$0 = $134;
       break L45;
      }
     }
    }
    $106 = ((($fmt90)) + 2|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107 << 24 >> 24;
    $isdigittmp9 = (($108) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $109 = ((($fmt90)) + 3|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = ($110<<24>>24)==(36);
     if ($111) {
      $112 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$112>>2] = 10;
      $113 = HEAP8[$106>>0]|0;
      $114 = $113 << 24 >> 24;
      $115 = (($114) + -48)|0;
      $116 = (($nl_arg) + ($115<<3)|0);
      $117 = $116;
      $118 = $117;
      $119 = HEAP32[$118>>2]|0;
      $120 = (($117) + 4)|0;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($fmt90)) + 4|0);
      $fmt93 = $123;$p$0 = $119;
      break;
     }
    }
    $124 = ($l10n$3|0)==(0);
    if (!($124)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $125 = $arglist_current2;
     $126 = ((0) + 4|0);
     $expanded71 = $126;
     $expanded70 = (($expanded71) - 1)|0;
     $127 = (($125) + ($expanded70))|0;
     $128 = ((0) + 4|0);
     $expanded75 = $128;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $129 = $127 & $expanded73;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $arglist_next3 = ((($130)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt93 = $106;$p$0 = $131;
    } else {
     $fmt93 = $106;$p$0 = 0;
    }
   } else {
    $fmt93 = $fmt90;$p$0 = -1;
   }
  } while(0);
  $fmt92 = $fmt93;$st$0 = 0;
  while(1) {
   $139 = HEAP8[$fmt92>>0]|0;
   $140 = $139 << 24 >> 24;
   $141 = (($140) + -65)|0;
   $142 = ($141>>>0)>(57);
   if ($142) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $143 = ((($fmt92)) + 1|0);
   $144 = ((54696 + (($st$0*58)|0)|0) + ($141)|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = (($146) + -1)|0;
   $148 = ($147>>>0)<(8);
   if ($148) {
    $fmt92 = $143;$st$0 = $146;
   } else {
    $$lcssa448 = $143;$$lcssa449 = $145;$$lcssa450 = $146;$fmt92$lcssa446 = $fmt92;$st$0$lcssa447 = $st$0;
    break;
   }
  }
  $149 = ($$lcssa449<<24>>24)==(0);
  if ($149) {
   $$0 = -1;
   label = 363;
   break;
  }
  $150 = ($$lcssa449<<24>>24)==(19);
  $151 = ($argpos$0|0)>(-1);
  L64: do {
   if ($150) {
    if ($151) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1167 = $1164;$1168 = $1165;
     label = 62;
    }
   } else {
    if ($151) {
     $152 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$152>>2] = $$lcssa450;
     $153 = (($nl_arg) + ($argpos$0<<3)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($153)) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $1167 = $156;$1168 = $154;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $157 = ($$lcssa449&255)>(20);
    if ($157) {
     $259 = $1165;$286 = $1164;
    } else {
     do {
      switch ($$lcssa450|0) {
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $175 = $arglist_current11;
       $176 = ((0) + 4|0);
       $expanded92 = $176;
       $expanded91 = (($expanded92) - 1)|0;
       $177 = (($175) + ($expanded91))|0;
       $178 = ((0) + 4|0);
       $expanded96 = $178;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $179 = $177 & $expanded94;
       $180 = $179;
       $181 = HEAP32[$180>>2]|0;
       $arglist_next12 = ((($180)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $259 = $181;$286 = 0;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $213 = $arglist_current23;
       $214 = ((0) + 4|0);
       $expanded120 = $214;
       $expanded119 = (($expanded120) - 1)|0;
       $215 = (($213) + ($expanded119))|0;
       $216 = ((0) + 4|0);
       $expanded124 = $216;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $217 = $215 & $expanded122;
       $218 = $217;
       $219 = HEAP32[$218>>2]|0;
       $arglist_next24 = ((($218)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $220 = $219&255;
       $221 = $220 << 24 >> 24;
       $222 = ($221|0)<(0);
       $223 = $222 << 31 >> 31;
       $sext = $219 << 24;
       $224 = $sext >> 24;
       $259 = $224;$286 = $223;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $166 = $arglist_current8;
       $167 = ((0) + 4|0);
       $expanded85 = $167;
       $expanded84 = (($expanded85) - 1)|0;
       $168 = (($166) + ($expanded84))|0;
       $169 = ((0) + 4|0);
       $expanded89 = $169;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $170 = $168 & $expanded87;
       $171 = $170;
       $172 = HEAP32[$171>>2]|0;
       $arglist_next9 = ((($171)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $173 = ($172|0)<(0);
       $174 = $173 << 31 >> 31;
       $259 = $172;$286 = $174;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $206 = $arglist_current20;
       $207 = ((0) + 4|0);
       $expanded113 = $207;
       $expanded112 = (($expanded113) - 1)|0;
       $208 = (($206) + ($expanded112))|0;
       $209 = ((0) + 4|0);
       $expanded117 = $209;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $210 = $208 & $expanded115;
       $211 = $210;
       $212 = HEAP32[$211>>2]|0;
       $arglist_next21 = ((($211)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $212 & 65535;
       $259 = $$mask1$i37;$286 = 0;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $232 = $arglist_current29;
       $233 = ((0) + 8|0);
       $expanded134 = $233;
       $expanded133 = (($expanded134) - 1)|0;
       $234 = (($232) + ($expanded133))|0;
       $235 = ((0) + 8|0);
       $expanded138 = $235;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $236 = $234 & $expanded136;
       $237 = $236;
       $238 = +HEAPF64[$237>>3];
       $arglist_next30 = ((($237)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $238;$239 = HEAP32[tempDoublePtr>>2]|0;
       $240 = HEAP32[tempDoublePtr+4>>2]|0;
       $259 = $239;$286 = $240;
       break L64;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = $arglist_current5;
       $159 = ((0) + 4|0);
       $expanded78 = $159;
       $expanded77 = (($expanded78) - 1)|0;
       $160 = (($158) + ($expanded77))|0;
       $161 = ((0) + 4|0);
       $expanded82 = $161;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $162 = $160 & $expanded80;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $arglist_next6 = ((($163)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $165 = $164;
       $259 = $165;$286 = $1164;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $182 = $arglist_current14;
       $183 = ((0) + 8|0);
       $expanded99 = $183;
       $expanded98 = (($expanded99) - 1)|0;
       $184 = (($182) + ($expanded98))|0;
       $185 = ((0) + 8|0);
       $expanded103 = $185;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $186 = $184 & $expanded101;
       $187 = $186;
       $188 = $187;
       $189 = $188;
       $190 = HEAP32[$189>>2]|0;
       $191 = (($188) + 4)|0;
       $192 = $191;
       $193 = HEAP32[$192>>2]|0;
       $arglist_next15 = ((($187)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $259 = $190;$286 = $193;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $241 = $arglist_current32;
       $242 = ((0) + 8|0);
       $expanded141 = $242;
       $expanded140 = (($expanded141) - 1)|0;
       $243 = (($241) + ($expanded140))|0;
       $244 = ((0) + 8|0);
       $expanded145 = $244;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $245 = $243 & $expanded143;
       $246 = $245;
       $247 = +HEAPF64[$246>>3];
       $arglist_next33 = ((($246)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $247;$248 = HEAP32[tempDoublePtr>>2]|0;
       $249 = HEAP32[tempDoublePtr+4>>2]|0;
       $259 = $248;$286 = $249;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $194 = $arglist_current17;
       $195 = ((0) + 4|0);
       $expanded106 = $195;
       $expanded105 = (($expanded106) - 1)|0;
       $196 = (($194) + ($expanded105))|0;
       $197 = ((0) + 4|0);
       $expanded110 = $197;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $198 = $196 & $expanded108;
       $199 = $198;
       $200 = HEAP32[$199>>2]|0;
       $arglist_next18 = ((($199)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $201 = $200&65535;
       $202 = $201 << 16 >> 16;
       $203 = ($202|0)<(0);
       $204 = $203 << 31 >> 31;
       $sext101 = $200 << 16;
       $205 = $sext101 >> 16;
       $259 = $205;$286 = $204;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $225 = $arglist_current26;
       $226 = ((0) + 4|0);
       $expanded127 = $226;
       $expanded126 = (($expanded127) - 1)|0;
       $227 = (($225) + ($expanded126))|0;
       $228 = ((0) + 4|0);
       $expanded131 = $228;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $229 = $227 & $expanded129;
       $230 = $229;
       $231 = HEAP32[$230>>2]|0;
       $arglist_next27 = ((($230)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $231 & 255;
       $259 = $$mask$i38;$286 = 0;
       break L64;
       break;
      }
      default: {
       $259 = $1165;$286 = $1164;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $259 = $1168;$286 = $1167;
   } else {
    $1164 = $1167;$1165 = $1168;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $250 = HEAP8[$fmt92$lcssa446>>0]|0;
  $251 = $250 << 24 >> 24;
  $252 = ($st$0$lcssa447|0)!=(0);
  $253 = $251 & 15;
  $254 = ($253|0)==(3);
  $or$cond15 = $252 & $254;
  $255 = $251 & -33;
  $t$0 = $or$cond15 ? $255 : $251;
  $256 = $fl$1 & 8192;
  $257 = ($256|0)==(0);
  $258 = $fl$1 & -65537;
  $fl$1$ = $257 ? $fl$1 : $258;
  L86: do {
   switch ($t$0|0) {
   case 67:  {
    HEAP32[$wc>>2] = $259;
    HEAP32[$5>>2] = 0;
    $1173 = $wc;$1174 = $6;$p$4274 = -1;
    label = 97;
    break;
   }
   case 99:  {
    $373 = $259&255;
    HEAP8[$4>>0] = $373;
    $1169 = $286;$1170 = $259;$a$2 = $4;$fl$6 = $258;$p$5 = 1;$pl$2 = 0;$prefix$2 = 55176;$z$2 = $2;
    break;
   }
   case 115:  {
    $377 = $259;
    $378 = ($259|0)!=(0);
    $379 = $378 ? $377 : 55192;
    $a$1 = $379;
    label = 94;
    break;
   }
   case 112:  {
    $281 = ($p$0>>>0)>(8);
    $282 = $281 ? $p$0 : 8;
    $283 = $fl$1$ | 8;
    $fl$3 = $283;$p$1 = $282;$t$1 = 120;
    label = 73;
    break;
   }
   case 110:  {
    switch ($st$0$lcssa447|0) {
    case 3:  {
     $269 = $cnt$1&65535;
     $270 = $259;
     HEAP16[$270>>1] = $269;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $271 = $cnt$1&255;
     $272 = $259;
     HEAP8[$272>>0] = $271;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $273 = $259;
     HEAP32[$273>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $262 = ($cnt$1|0)<(0);
     $263 = $262 << 31 >> 31;
     $264 = $259;
     $265 = $264;
     $266 = $265;
     HEAP32[$266>>2] = $cnt$1;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $263;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $261 = $259;
     HEAP32[$261>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $260 = $259;
     HEAP32[$260>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $274 = ($cnt$1|0)<(0);
     $275 = $274 << 31 >> 31;
     $276 = $259;
     $277 = $276;
     $278 = $277;
     HEAP32[$278>>2] = $cnt$1;
     $279 = (($277) + 4)|0;
     $280 = $279;
     HEAP32[$280>>2] = $275;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 83:  {
    $386 = $259;
    $387 = ($p$0|0)==(0);
    if ($387) {
     $1175 = $259;$1176 = $386;$i$0$lcssa275 = 0;
     label = 102;
    } else {
     $1173 = $386;$1174 = $259;$p$4274 = $p$0;
     label = 97;
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 111:  {
    $307 = ($259|0)==(0);
    $308 = ($286|0)==(0);
    $309 = $307 & $308;
    if ($309) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$311 = $259;$315 = $286;
     while(1) {
      $310 = $311 & 7;
      $312 = $310 | 48;
      $313 = $312&255;
      $314 = ((($$03$i48)) + -1|0);
      HEAP8[$314>>0] = $313;
      $316 = (_bitshift64Lshr(($311|0),($315|0),3)|0);
      $317 = tempRet0;
      $318 = ($316|0)==(0);
      $319 = ($317|0)==(0);
      $320 = $318 & $319;
      if ($320) {
       $$0$lcssa$i51 = $314;
       break;
      } else {
       $$03$i48 = $314;$311 = $316;$315 = $317;
      }
     }
    }
    $321 = $fl$1$ & 8;
    $322 = ($321|0)==(0);
    $or$cond19 = $322 | $309;
    $$24 = $or$cond19 ? 55176 : (55181);
    $323 = $or$cond19&1;
    $$25 = $323 ^ 1;
    $361 = $259;$363 = $286;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 117:  {
    $331 = $286;$333 = $259;$pl$0 = 0;$prefix$0 = 55176;
    label = 84;
    break;
   }
   case 105: case 100:  {
    $324 = ($286|0)<(0);
    if ($324) {
     $325 = (_i64Subtract(0,0,($259|0),($286|0))|0);
     $326 = tempRet0;
     $331 = $326;$333 = $325;$pl$0 = 1;$prefix$0 = 55176;
     label = 84;
     break L86;
    }
    $327 = $fl$1$ & 2048;
    $328 = ($327|0)==(0);
    if ($328) {
     $329 = $fl$1$ & 1;
     $330 = ($329|0)==(0);
     $$ = $330 ? 55176 : (55178);
     $331 = $286;$333 = $259;$pl$0 = $329;$prefix$0 = $$;
     label = 84;
    } else {
     $331 = $286;$333 = $259;$pl$0 = 1;$prefix$0 = (55177);
     label = 84;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $259;HEAP32[tempDoublePtr+4>>2] = $286;$425 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $426 = ($286|0)<(0);
    if ($426) {
     $427 = -$425;
     $$07$i = $427;$pl$0$i = 1;$prefix$0$i = 55200;
    } else {
     $428 = $fl$1$ & 2048;
     $429 = ($428|0)==(0);
     if ($429) {
      $430 = $fl$1$ & 1;
      $431 = ($430|0)==(0);
      $$$i = $431 ? (55201) : (55206);
      $$07$i = $425;$pl$0$i = $430;$prefix$0$i = $$$i;
     } else {
      $$07$i = $425;$pl$0$i = 1;$prefix$0$i = (55203);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$432 = HEAP32[tempDoublePtr>>2]|0;
    $433 = HEAP32[tempDoublePtr+4>>2]|0;
    $434 = $433 & 2146435072;
    $435 = ($434>>>0)<(2146435072);
    $436 = (0)<(0);
    $437 = ($434|0)==(2146435072);
    $438 = $437 & $436;
    $439 = $435 | $438;
    do {
     if ($439) {
      $466 = (+_frexpl($$07$i,$e2$i));
      $467 = $466 * 2.0;
      $468 = $467 != 0.0;
      if ($468) {
       $469 = HEAP32[$e2$i>>2]|0;
       $470 = (($469) + -1)|0;
       HEAP32[$e2$i>>2] = $470;
      }
      $471 = $t$0 | 32;
      $472 = ($471|0)==(97);
      if ($472) {
       $473 = $t$0 & 32;
       $474 = ($473|0)==(0);
       $475 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $474 ? $prefix$0$i : $475;
       $476 = $pl$0$i | 2;
       $477 = ($p$0>>>0)>(11);
       $478 = (12 - ($p$0))|0;
       $479 = ($478|0)==(0);
       $480 = $477 | $479;
       do {
        if ($480) {
         $$1$i = $467;
        } else {
         $re$1179$i = $478;$round$0178$i = 8.0;
         while(1) {
          $481 = (($re$1179$i) + -1)|0;
          $482 = $round$0178$i * 16.0;
          $483 = ($481|0)==(0);
          if ($483) {
           $$lcssa474 = $482;
           break;
          } else {
           $re$1179$i = $481;$round$0178$i = $482;
          }
         }
         $484 = HEAP8[$prefix$0$$i>>0]|0;
         $485 = ($484<<24>>24)==(45);
         if ($485) {
          $486 = -$467;
          $487 = $486 - $$lcssa474;
          $488 = $$lcssa474 + $487;
          $489 = -$488;
          $$1$i = $489;
          break;
         } else {
          $490 = $467 + $$lcssa474;
          $491 = $490 - $$lcssa474;
          $$1$i = $491;
          break;
         }
        }
       } while(0);
       $492 = HEAP32[$e2$i>>2]|0;
       $493 = ($492|0)<(0);
       $494 = (0 - ($492))|0;
       $495 = $493 ? $494 : $492;
       $496 = ($495|0)<(0);
       if ($496) {
        $497 = ($495|0)<(0);
        $498 = $497 << 31 >> 31;
        $$05$i$i = $7;$499 = $495;$500 = $498;
        while(1) {
         $501 = (___uremdi3(($499|0),($500|0),10,0)|0);
         $502 = tempRet0;
         $503 = $501 | 48;
         $504 = $503&255;
         $505 = ((($$05$i$i)) + -1|0);
         HEAP8[$505>>0] = $504;
         $506 = (___udivdi3(($499|0),($500|0),10,0)|0);
         $507 = tempRet0;
         $508 = ($500>>>0)>(9);
         $509 = ($499>>>0)>(4294967295);
         $510 = ($500|0)==(9);
         $511 = $510 & $509;
         $512 = $508 | $511;
         if ($512) {
          $$05$i$i = $505;$499 = $506;$500 = $507;
         } else {
          $$lcssa475 = $505;$1177 = $506;$1178 = $507;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa475;$$01$lcssa$off0$i$i = $1177;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $495;
       }
       $513 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($513) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $514 = (($y$03$i$i>>>0) % 10)&-1;
         $515 = $514 | 48;
         $516 = $515&255;
         $517 = ((($$12$i$i)) + -1|0);
         HEAP8[$517>>0] = $516;
         $518 = (($y$03$i$i>>>0) / 10)&-1;
         $519 = ($y$03$i$i>>>0)<(10);
         if ($519) {
          $$1$lcssa$i$i = $517;
          break;
         } else {
          $$12$i$i = $517;$y$03$i$i = $518;
         }
        }
       }
       $520 = ($$1$lcssa$i$i|0)==($7|0);
       if ($520) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $521 = HEAP32[$e2$i>>2]|0;
       $522 = $521 >> 31;
       $523 = $522 & 2;
       $524 = (($523) + 43)|0;
       $525 = $524&255;
       $526 = ((($estr$0$i)) + -1|0);
       HEAP8[$526>>0] = $525;
       $527 = (($t$0) + 15)|0;
       $528 = $527&255;
       $529 = ((($estr$0$i)) + -2|0);
       HEAP8[$529>>0] = $528;
       $530 = $fl$1$ & 8;
       $531 = ($530|0)==(0);
       if ($531) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $532 = (~~(($$2$us$us$i)));
          $533 = (55160 + ($532)|0);
          $534 = HEAP8[$533>>0]|0;
          $535 = $534&255;
          $536 = $535 | $473;
          $537 = $536&255;
          $538 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $537;
          $539 = (+($532|0));
          $540 = $$2$us$us$i - $539;
          $541 = $540 * 16.0;
          $542 = $538;
          $543 = (($542) - ($0))|0;
          $544 = ($543|0)!=(1);
          $notlhs$us$us$i = $541 == 0.0;
          $or$cond$i79 = $544 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $538;
          } else {
           $545 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$538>>0] = 46;
           $s$1$us$us$i = $545;
          }
          $546 = $541 != 0.0;
          if ($546) {
           $$2$us$us$i = $541;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $547 = (~~(($$2$us$i)));
          $548 = (55160 + ($547)|0);
          $549 = HEAP8[$548>>0]|0;
          $550 = $549&255;
          $551 = $550 | $473;
          $552 = $551&255;
          $553 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $552;
          $554 = (+($547|0));
          $555 = $$2$us$i - $554;
          $556 = $555 * 16.0;
          $557 = $553;
          $558 = (($557) - ($0))|0;
          $559 = ($558|0)==(1);
          if ($559) {
           $560 = ((($s$0$us$i)) + 2|0);
           HEAP8[$553>>0] = 46;
           $s$1$us$i = $560;
          } else {
           $s$1$us$i = $553;
          }
          $561 = $556 != 0.0;
          if ($561) {
           $$2$us$i = $556;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $562 = (~~(($$2$i)));
         $563 = (55160 + ($562)|0);
         $564 = HEAP8[$563>>0]|0;
         $565 = $564&255;
         $566 = $565 | $473;
         $567 = $566&255;
         $568 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $567;
         $569 = (+($562|0));
         $570 = $$2$i - $569;
         $571 = $570 * 16.0;
         $572 = $568;
         $573 = (($572) - ($0))|0;
         $574 = ($573|0)==(1);
         if ($574) {
          $575 = ((($s$0$i)) + 2|0);
          HEAP8[$568>>0] = 46;
          $s$1$i = $575;
         } else {
          $s$1$i = $568;
         }
         $576 = $571 != 0.0;
         if ($576) {
          $$2$i = $571;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $577 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $578 = (($11) + ($$pre300$i))|0;
       $579 = ($578|0)<($p$0|0);
       $or$cond331 = $577 & $579;
       $580 = $529;
       $581 = (($12) + ($p$0))|0;
       $582 = (($581) - ($580))|0;
       $583 = $529;
       $584 = (($10) - ($583))|0;
       $585 = (($584) + ($$pre300$i))|0;
       $l$0$i = $or$cond331 ? $582 : $585;
       $586 = (($l$0$i) + ($476))|0;
       $587 = $fl$1$ & 73728;
       $588 = ($587|0)==(0);
       $589 = ($w$1|0)>($586|0);
       $or$cond$i52$i = $588 & $589;
       if ($or$cond$i52$i) {
        $590 = (($w$1) - ($586))|0;
        $591 = ($590>>>0)>(256);
        $592 = $591 ? 256 : $590;
        _memset(($pad$i|0),32,($592|0))|0;
        $593 = ($590>>>0)>(255);
        if ($593) {
         $$01$i54$i = $590;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $594 = (($$01$i54$i) + -256)|0;
          $595 = ($594>>>0)>(255);
          if ($595) {
           $$01$i54$i = $594;
          } else {
           break;
          }
         }
         $596 = $590 & 255;
         $$0$lcssa$i56$i = $596;
        } else {
         $$0$lcssa$i56$i = $590;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$476,$f)|0);
       $597 = ($587|0)==(65536);
       $or$cond$i59$i = $597 & $589;
       if ($or$cond$i59$i) {
        $598 = (($w$1) - ($586))|0;
        $599 = ($598>>>0)>(256);
        $600 = $599 ? 256 : $598;
        _memset(($pad$i|0),48,($600|0))|0;
        $601 = ($598>>>0)>(255);
        if ($601) {
         $$01$i61$i = $598;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $602 = (($$01$i61$i) + -256)|0;
          $603 = ($602>>>0)>(255);
          if ($603) {
           $$01$i61$i = $602;
          } else {
           break;
          }
         }
         $604 = $598 & 255;
         $$0$lcssa$i63$i = $604;
        } else {
         $$0$lcssa$i63$i = $598;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $605 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$605,$f)|0);
       $606 = $529;
       $607 = (($9) - ($606))|0;
       $608 = (($l$0$i) - ($607))|0;
       $609 = (($608) - ($605))|0;
       $610 = ($609|0)>(0);
       if ($610) {
        $611 = ($609>>>0)>(256);
        $612 = $611 ? 256 : $609;
        _memset(($pad$i|0),48,($612|0))|0;
        $613 = ($609>>>0)>(255);
        if ($613) {
         $$01$i67$i = $609;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $614 = (($$01$i67$i) + -256)|0;
          $615 = ($614>>>0)>(255);
          if ($615) {
           $$01$i67$i = $614;
          } else {
           break;
          }
         }
         $616 = $609 & 255;
         $$0$lcssa$i69$i = $616;
        } else {
         $$0$lcssa$i69$i = $609;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($529,$607,$f)|0);
       $617 = ($587|0)==(8192);
       $or$cond$i72$i = $617 & $589;
       if ($or$cond$i72$i) {
        $618 = (($w$1) - ($586))|0;
        $619 = ($618>>>0)>(256);
        $620 = $619 ? 256 : $618;
        _memset(($pad$i|0),32,($620|0))|0;
        $621 = ($618>>>0)>(255);
        if ($621) {
         $$01$i74$i = $618;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $622 = (($$01$i74$i) + -256)|0;
          $623 = ($622>>>0)>(255);
          if ($623) {
           $$01$i74$i = $622;
          } else {
           break;
          }
         }
         $624 = $618 & 255;
         $$0$lcssa$i76$i = $624;
        } else {
         $$0$lcssa$i76$i = $618;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $589 ? $w$1 : $586;
       $$0$i = $w$$i;
       break;
      }
      $625 = ($p$0|0)<(0);
      $$p$i = $625 ? 6 : $p$0;
      if ($468) {
       $626 = $467 * 268435456.0;
       $627 = HEAP32[$e2$i>>2]|0;
       $628 = (($627) + -28)|0;
       HEAP32[$e2$i>>2] = $628;
       $$3$i = $626;$629 = $628;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $467;$629 = $$pre$i;
      }
      $630 = ($629|0)<(0);
      $$31$i = $630 ? $big$i : $13;
      $631 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $632 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $632;
       $633 = ((($z$0$i)) + 4|0);
       $634 = (+($632>>>0));
       $635 = $$4$i - $634;
       $636 = $635 * 1.0E+9;
       $637 = $636 != 0.0;
       if ($637) {
        $$4$i = $636;$z$0$i = $633;
       } else {
        $$lcssa451 = $633;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $638 = ($$pr$i|0)>(0);
      if ($638) {
       $639 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa451;
       while(1) {
        $640 = ($639|0)>(29);
        $641 = $640 ? 29 : $639;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $642 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($642) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $643 = HEAP32[$d$0247$i>>2]|0;
           $644 = (_bitshift64Shl(($643|0),0,($641|0))|0);
           $645 = tempRet0;
           $646 = (_i64Add(($644|0),($645|0),($carry$0246$i|0),0)|0);
           $647 = tempRet0;
           $648 = (___uremdi3(($646|0),($647|0),1000000000,0)|0);
           $649 = tempRet0;
           HEAP32[$d$0247$i>>2] = $648;
           $650 = (___udivdi3(($646|0),($647|0),1000000000,0)|0);
           $651 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $652 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($652) {
            $$lcssa452 = $650;
            break;
           } else {
            $carry$0246$i = $650;$d$0247$i = $d$0$i;
           }
          }
          $653 = ($$lcssa452|0)==(0);
          if ($653) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $654 = ((($a$1253$i)) + -4|0);
          HEAP32[$654>>2] = $$lcssa452;
          $a$2$ph$i = $654;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $655 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($655)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $656 = ((($z$2$i)) + -4|0);
         $657 = HEAP32[$656>>2]|0;
         $658 = ($657|0)==(0);
         if ($658) {
          $z$2$i = $656;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $659 = HEAP32[$e2$i>>2]|0;
        $660 = (($659) - ($641))|0;
        HEAP32[$e2$i>>2] = $660;
        $661 = ($660|0)>(0);
        if ($661) {
         $639 = $660;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $660;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa451;
      }
      $662 = ($$pr146$i|0)<(0);
      L236: do {
       if ($662) {
        $663 = (($$p$i) + 25)|0;
        $664 = (($663|0) / 9)&-1;
        $665 = (($664) + 1)|0;
        $666 = ($471|0)==(102);
        if (!($666)) {
         $699 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $698 = (0 - ($699))|0;
          $700 = ($698|0)>(9);
          $701 = $700 ? 9 : $698;
          $702 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($702) {
            $706 = 1 << $701;
            $707 = (($706) + -1)|0;
            $708 = 1000000000 >>> $701;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $709 = HEAP32[$d$1233$i>>2]|0;
             $710 = $709 & $707;
             $711 = $709 >>> $701;
             $712 = (($711) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $712;
             $713 = Math_imul($710, $708)|0;
             $714 = ((($d$1233$i)) + 4|0);
             $715 = ($714>>>0)<($z$3239$i>>>0);
             if ($715) {
              $carry3$0234$i = $713;$d$1233$i = $714;
             } else {
              $$lcssa454 = $713;
              break;
             }
            }
            $716 = HEAP32[$a$3240$i>>2]|0;
            $717 = ($716|0)==(0);
            $718 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $717 ? $718 : $a$3240$i;
            $719 = ($$lcssa454|0)==(0);
            if ($719) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $720 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa454;
            $$a$3306$i = $$a$3$i;$z$4$i = $720;
           } else {
            $703 = HEAP32[$a$3240$i>>2]|0;
            $704 = ($703|0)==(0);
            $705 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $704 ? $705 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $721 = $z$4$i;
          $722 = $$a$3306$i;
          $723 = (($721) - ($722))|0;
          $724 = $723 >> 2;
          $725 = ($724|0)>($665|0);
          $726 = (($$a$3306$i) + ($665<<2)|0);
          $$z$4$i = $725 ? $726 : $z$4$i;
          $727 = HEAP32[$e2$i>>2]|0;
          $728 = (($727) + ($701))|0;
          HEAP32[$e2$i>>2] = $728;
          $729 = ($728|0)<(0);
          if ($729) {
           $699 = $728;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L236;
          }
         }
        }
        $667 = (($$31$i) + ($665<<2)|0);
        $669 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $668 = (0 - ($669))|0;
         $670 = ($668|0)>(9);
         $671 = $670 ? 9 : $668;
         $672 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($672) {
           $697 = 1 << $671;
           $690 = (($697) + -1)|0;
           $694 = 1000000000 >>> $671;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $688 = HEAP32[$d$1233$us$i>>2]|0;
            $689 = $688 & $690;
            $691 = $688 >>> $671;
            $692 = (($691) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $692;
            $693 = Math_imul($689, $694)|0;
            $695 = ((($d$1233$us$i)) + 4|0);
            $696 = ($695>>>0)<($z$3239$us$i>>>0);
            if ($696) {
             $carry3$0234$us$i = $693;$d$1233$us$i = $695;
            } else {
             $$lcssa455 = $693;
             break;
            }
           }
           $676 = HEAP32[$a$3240$us$i>>2]|0;
           $677 = ($676|0)==(0);
           $678 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $677 ? $678 : $a$3240$us$i;
           $679 = ($$lcssa455|0)==(0);
           if ($679) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $680 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa455;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $680;
          } else {
           $673 = HEAP32[$a$3240$us$i>>2]|0;
           $674 = ($673|0)==(0);
           $675 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $674 ? $675 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $681 = $z$4$us$i;
         $682 = (($681) - ($631))|0;
         $683 = $682 >> 2;
         $684 = ($683|0)>($665|0);
         $$z$4$us$i = $684 ? $667 : $z$4$us$i;
         $685 = HEAP32[$e2$i>>2]|0;
         $686 = (($685) + ($671))|0;
         HEAP32[$e2$i>>2] = $686;
         $687 = ($686|0)<(0);
         if ($687) {
          $669 = $686;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $730 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($730) {
        $731 = $a$3$lcssa$i;
        $732 = (($631) - ($731))|0;
        $733 = $732 >> 2;
        $734 = ($733*9)|0;
        $735 = HEAP32[$a$3$lcssa$i>>2]|0;
        $736 = ($735>>>0)<(10);
        if ($736) {
         $e$1$i = $734;
         break;
        } else {
         $e$0229$i = $734;$i$0228$i = 10;
        }
        while(1) {
         $737 = ($i$0228$i*10)|0;
         $738 = (($e$0229$i) + 1)|0;
         $739 = ($735>>>0)<($737>>>0);
         if ($739) {
          $e$1$i = $738;
          break;
         } else {
          $e$0229$i = $738;$i$0228$i = $737;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $740 = ($471|0)!=(102);
      $741 = $740 ? $e$1$i : 0;
      $742 = (($$p$i) - ($741))|0;
      $743 = ($471|0)==(103);
      $744 = ($$p$i|0)!=(0);
      $745 = $744 & $743;
      $$neg151$i = $745 << 31 >> 31;
      $746 = (($742) + ($$neg151$i))|0;
      $747 = $z$3$lcssa$i;
      $748 = (($747) - ($631))|0;
      $749 = $748 >> 2;
      $750 = ($749*9)|0;
      $751 = (($750) + -9)|0;
      $752 = ($746|0)<($751|0);
      if ($752) {
       $753 = (($746) + 9216)|0;
       $754 = (($753|0) / 9)&-1;
       $$sum$i = (($754) + -1023)|0;
       $755 = (($$31$i) + ($$sum$i<<2)|0);
       $756 = (($753|0) % 9)&-1;
       $j$0221$i = (($756) + 1)|0;
       $757 = ($j$0221$i|0)<(9);
       if ($757) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $758 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $758;
          break;
         } else {
          $i$1222$i = $758;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $759 = HEAP32[$755>>2]|0;
       $760 = (($759>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $761 = ($760|0)==(0);
       if ($761) {
        $$sum15$i = (($754) + -1022)|0;
        $762 = (($$31$i) + ($$sum15$i<<2)|0);
        $763 = ($762|0)==($z$3$lcssa$i|0);
        if ($763) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $755;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $764 = (($759>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $765 = $764 & 1;
         $766 = ($765|0)==(0);
         $$20$i = $766 ? 9007199254740992.0 : 9007199254740994.0;
         $767 = (($i$1$lcssa$i|0) / 2)&-1;
         $768 = ($760>>>0)<($767>>>0);
         do {
          if ($768) {
           $small$0$i = 0.5;
          } else {
           $769 = ($760|0)==($767|0);
           if ($769) {
            $$sum16$i = (($754) + -1022)|0;
            $770 = (($$31$i) + ($$sum16$i<<2)|0);
            $771 = ($770|0)==($z$3$lcssa$i|0);
            if ($771) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $772 = ($pl$0$i|0)==(0);
         do {
          if ($772) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $773 = HEAP8[$prefix$0$i>>0]|0;
           $774 = ($773<<24>>24)==(45);
           if (!($774)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $775 = -$$20$i;
           $776 = -$small$0$i;
           $round6$1$i = $775;$small$1$i = $776;
          }
         } while(0);
         $777 = (($759) - ($760))|0;
         HEAP32[$755>>2] = $777;
         $778 = $round6$1$i + $small$1$i;
         $779 = $778 != $round6$1$i;
         if (!($779)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $755;$e$3$i = $e$1$i;
          break;
         }
         $780 = (($777) + ($i$1$lcssa$i))|0;
         HEAP32[$755>>2] = $780;
         $781 = ($780>>>0)>(999999999);
         if ($781) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $755;
          while(1) {
           $782 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $783 = ($782>>>0)<($a$5215$i>>>0);
           if ($783) {
            $784 = ((($a$5215$i)) + -4|0);
            HEAP32[$784>>2] = 0;
            $a$6$i = $784;
           } else {
            $a$6$i = $a$5215$i;
           }
           $785 = HEAP32[$782>>2]|0;
           $786 = (($785) + 1)|0;
           HEAP32[$782>>2] = $786;
           $787 = ($786>>>0)>(999999999);
           if ($787) {
            $a$5215$i = $a$6$i;$d$2214$i = $782;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $782;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $755;
         }
         $788 = $a$5$lcssa$i;
         $789 = (($631) - ($788))|0;
         $790 = $789 >> 2;
         $791 = ($790*9)|0;
         $792 = HEAP32[$a$5$lcssa$i>>2]|0;
         $793 = ($792>>>0)<(10);
         if ($793) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $791;
          break;
         } else {
          $e$2210$i = $791;$i$2209$i = 10;
         }
         while(1) {
          $794 = ($i$2209$i*10)|0;
          $795 = (($e$2210$i) + 1)|0;
          $796 = ($792>>>0)<($794>>>0);
          if ($796) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $795;
           break;
          } else {
           $e$2210$i = $795;$i$2209$i = $794;
          }
         }
        }
       } while(0);
       $797 = ((($d$3$i)) + 4|0);
       $798 = ($z$3$lcssa$i>>>0)>($797>>>0);
       $$z$3$i = $798 ? $797 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $799 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $800 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($800)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $801 = ((($z$6$i)) + -4|0);
       $802 = HEAP32[$801>>2]|0;
       $803 = ($802|0)==(0);
       if ($803) {
        $z$6$i = $801;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($743) {
        $804 = $744&1;
        $805 = $804 ^ 1;
        $$p$$i = (($805) + ($$p$i))|0;
        $806 = ($$p$$i|0)>($e$4$ph$i|0);
        $807 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $806 & $807;
        if ($or$cond6$i) {
         $808 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $809 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $808;$$210$i = $809;
        } else {
         $810 = (($t$0) + -2)|0;
         $811 = (($$p$$i) + -1)|0;
         $$013$i = $810;$$210$i = $811;
        }
        $812 = $fl$1$ & 8;
        $813 = ($812|0)==(0);
        if (!($813)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $812;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $814 = ((($z$6$i$lcssa)) + -4|0);
          $815 = HEAP32[$814>>2]|0;
          $816 = ($815|0)==(0);
          if ($816) {
           $j$2$i = 9;
           break;
          }
          $817 = (($815>>>0) % 10)&-1;
          $818 = ($817|0)==(0);
          if ($818) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $819 = ($i$3205$i*10)|0;
           $820 = (($j$1206$i) + 1)|0;
           $821 = (($815>>>0) % ($819>>>0))&-1;
           $822 = ($821|0)==(0);
           if ($822) {
            $i$3205$i = $819;$j$1206$i = $820;
           } else {
            $j$2$i = $820;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $823 = $$013$i | 32;
        $824 = ($823|0)==(102);
        $825 = $z$6$i$lcssa;
        $826 = (($825) - ($631))|0;
        $827 = $826 >> 2;
        $828 = ($827*9)|0;
        $829 = (($828) + -9)|0;
        if ($824) {
         $830 = (($829) - ($j$2$i))|0;
         $831 = ($830|0)<(0);
         $$21$i = $831 ? 0 : $830;
         $832 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $832 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $833 = (($829) + ($e$4$ph$i))|0;
         $834 = (($833) - ($j$2$i))|0;
         $835 = ($834|0)<(0);
         $$23$i = $835 ? 0 : $834;
         $836 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $836 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $837 = $$311$i | $$pre$phi302$iZ2D;
      $838 = ($837|0)!=(0);
      $839 = $838&1;
      $840 = $$114$i | 32;
      $841 = ($840|0)==(102);
      if ($841) {
       $842 = ($e$4$ph$i|0)>(0);
       $843 = $842 ? $e$4$ph$i : 0;
       $$pn$i = $843;$estr$2$i = 0;
      } else {
       $844 = ($e$4$ph$i|0)<(0);
       $845 = $844 ? $799 : $e$4$ph$i;
       $846 = ($845|0)<(0);
       if ($846) {
        $847 = ($845|0)<(0);
        $848 = $847 << 31 >> 31;
        $$05$i79$i = $7;$849 = $845;$850 = $848;
        while(1) {
         $851 = (___uremdi3(($849|0),($850|0),10,0)|0);
         $852 = tempRet0;
         $853 = $851 | 48;
         $854 = $853&255;
         $855 = ((($$05$i79$i)) + -1|0);
         HEAP8[$855>>0] = $854;
         $856 = (___udivdi3(($849|0),($850|0),10,0)|0);
         $857 = tempRet0;
         $858 = ($850>>>0)>(9);
         $859 = ($849>>>0)>(4294967295);
         $860 = ($850|0)==(9);
         $861 = $860 & $859;
         $862 = $858 | $861;
         if ($862) {
          $$05$i79$i = $855;$849 = $856;$850 = $857;
         } else {
          $$lcssa461 = $855;$1179 = $856;$1180 = $857;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa461;$$01$lcssa$off0$i85$i = $1179;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $845;
       }
       $863 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($863) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $864 = (($y$03$i86$i>>>0) % 10)&-1;
         $865 = $864 | 48;
         $866 = $865&255;
         $867 = ((($$12$i87$i)) + -1|0);
         HEAP8[$867>>0] = $866;
         $868 = (($y$03$i86$i>>>0) / 10)&-1;
         $869 = ($y$03$i86$i>>>0)<(10);
         if ($869) {
          $estr$1$ph$i = $867;
          break;
         } else {
          $$12$i87$i = $867;$y$03$i86$i = $868;
         }
        }
       }
       $870 = $estr$1$ph$i;
       $871 = (($9) - ($870))|0;
       $872 = ($871|0)<(2);
       if ($872) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $873 = ((($estr$1201$i)) + -1|0);
         HEAP8[$873>>0] = 48;
         $874 = $873;
         $875 = (($9) - ($874))|0;
         $876 = ($875|0)<(2);
         if ($876) {
          $estr$1201$i = $873;
         } else {
          $estr$1$lcssa$i = $873;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $877 = $e$4$ph$i >> 31;
       $878 = $877 & 2;
       $879 = (($878) + 43)|0;
       $880 = $879&255;
       $881 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$881>>0] = $880;
       $882 = $$114$i&255;
       $883 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$883>>0] = $882;
       $884 = $883;
       $885 = (($9) - ($884))|0;
       $$pn$i = $885;$estr$2$i = $883;
      }
      $886 = (($pl$0$i) + 1)|0;
      $887 = (($886) + ($$311$i))|0;
      $l$1$i = (($887) + ($839))|0;
      $888 = (($l$1$i) + ($$pn$i))|0;
      $889 = $fl$1$ & 73728;
      $890 = ($889|0)==(0);
      $891 = ($w$1|0)>($888|0);
      $or$cond$i93$i = $890 & $891;
      if ($or$cond$i93$i) {
       $892 = (($w$1) - ($888))|0;
       $893 = ($892>>>0)>(256);
       $894 = $893 ? 256 : $892;
       _memset(($pad$i|0),32,($894|0))|0;
       $895 = ($892>>>0)>(255);
       if ($895) {
        $$01$i95$i = $892;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $896 = (($$01$i95$i) + -256)|0;
         $897 = ($896>>>0)>(255);
         if ($897) {
          $$01$i95$i = $896;
         } else {
          break;
         }
        }
        $898 = $892 & 255;
        $$0$lcssa$i97$i = $898;
       } else {
        $$0$lcssa$i97$i = $892;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $899 = ($889|0)==(65536);
      $or$cond$i100$i = $899 & $891;
      if ($or$cond$i100$i) {
       $900 = (($w$1) - ($888))|0;
       $901 = ($900>>>0)>(256);
       $902 = $901 ? 256 : $900;
       _memset(($pad$i|0),48,($902|0))|0;
       $903 = ($900>>>0)>(255);
       if ($903) {
        $$01$i102$i = $900;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $904 = (($$01$i102$i) + -256)|0;
         $905 = ($904>>>0)>(255);
         if ($905) {
          $$01$i102$i = $904;
         } else {
          break;
         }
        }
        $906 = $900 & 255;
        $$0$lcssa$i104$i = $906;
       } else {
        $$0$lcssa$i104$i = $900;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($841) {
       $907 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $907 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $908 = HEAP32[$d$4191$i>>2]|0;
        $909 = ($908|0)==(0);
        if ($909) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $908;
         while(1) {
          $910 = (($y$03$i109$i>>>0) % 10)&-1;
          $911 = $910 | 48;
          $912 = $911&255;
          $913 = ((($$12$i110$i)) + -1|0);
          HEAP8[$913>>0] = $912;
          $914 = (($y$03$i109$i>>>0) / 10)&-1;
          $915 = ($y$03$i109$i>>>0)<(10);
          if ($915) {
           $$1$lcssa$i112$i = $913;
           break;
          } else {
           $$12$i110$i = $913;$y$03$i109$i = $914;
          }
         }
        }
        $916 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($916) {
          $920 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($920)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $917 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($917) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $918 = ((($s7$0188$i)) + -1|0);
           HEAP8[$918>>0] = 48;
           $919 = ($918>>>0)>($buf$i>>>0);
           if ($919) {
            $s7$0188$i = $918;
           } else {
            $s7$1$i = $918;
            break;
           }
          }
         }
        } while(0);
        $921 = $s7$1$i;
        $922 = (($15) - ($921))|0;
        (___fwritex($s7$1$i,$922,$f)|0);
        $923 = ((($d$4191$i)) + 4|0);
        $924 = ($923>>>0)>($$31$i>>>0);
        if ($924) {
         $$lcssa470 = $923;
         break;
        } else {
         $d$4191$i = $923;
        }
       }
       $925 = ($837|0)==(0);
       if (!($925)) {
        (___fwritex(55256,1,$f)|0);
       }
       $926 = ($$lcssa470>>>0)<($z$6$i$lcssa>>>0);
       $927 = ($$311$i|0)>(0);
       $928 = $927 & $926;
       if ($928) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa470;
        while(1) {
         $929 = HEAP32[$d$5183$i>>2]|0;
         $930 = ($929|0)==(0);
         if ($930) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $929;
          while(1) {
           $931 = (($y$03$i118$i>>>0) % 10)&-1;
           $932 = $931 | 48;
           $933 = $932&255;
           $934 = ((($$12$i119$i)) + -1|0);
           HEAP8[$934>>0] = $933;
           $935 = (($y$03$i118$i>>>0) / 10)&-1;
           $936 = ($y$03$i118$i>>>0)<(10);
           if ($936) {
            $$lcssa471 = $934;
            break;
           } else {
            $$12$i119$i = $934;$y$03$i118$i = $935;
           }
          }
          $937 = ($$lcssa471>>>0)>($buf$i>>>0);
          if ($937) {
           $s8$0180$i = $$lcssa471;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa471;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $938 = ((($s8$0180$i)) + -1|0);
           HEAP8[$938>>0] = 48;
           $939 = ($938>>>0)>($buf$i>>>0);
           if ($939) {
            $s8$0180$i = $938;
            label = 289;
           } else {
            $s8$0$lcssa$i = $938;
            break;
           }
          }
         }
         $940 = ($$412184$i|0)>(9);
         $941 = $940 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$941,$f)|0);
         $942 = ((($d$5183$i)) + 4|0);
         $943 = (($$412184$i) + -9)|0;
         $944 = ($942>>>0)<($z$6$i$lcssa>>>0);
         $945 = $940 & $944;
         if ($945) {
          $$412184$i = $943;$d$5183$i = $942;
         } else {
          $$412$lcssa$i = $943;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $946 = ($$412$lcssa$i|0)>(0);
       if ($946) {
        $947 = ($$412$lcssa$i>>>0)>(256);
        $948 = $947 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($948|0))|0;
        $949 = ($$412$lcssa$i>>>0)>(255);
        if ($949) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $950 = (($$01$i126$i) + -256)|0;
          $951 = ($950>>>0)>(255);
          if ($951) {
           $$01$i126$i = $950;
          } else {
           break;
          }
         }
         $952 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $952;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $953 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $953;
       $954 = ($$311$i|0)>(-1);
       do {
        if ($954) {
         $955 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $956 = HEAP32[$d$6195$i>>2]|0;
          $957 = ($956|0)==(0);
          if ($957) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $956;
           while(1) {
            $958 = (($y$03$i133$i>>>0) % 10)&-1;
            $959 = $958 | 48;
            $960 = $959&255;
            $961 = ((($$12$i134$i)) + -1|0);
            HEAP8[$961>>0] = $960;
            $962 = (($y$03$i133$i>>>0) / 10)&-1;
            $963 = ($y$03$i133$i>>>0)<(10);
            if ($963) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa465 = $961;
             break;
            } else {
             $$12$i134$i = $961;$y$03$i133$i = $962;
            }
           }
           $964 = ($$lcssa465|0)==($14|0);
           if ($964) {
            label = 303;
           } else {
            $1181 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa465;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1181 = $14;$s9$0$i = $16;
          }
          $965 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($965) {
            (___fwritex($s9$0$i,1,$f)|0);
            $969 = ($$5196$i|0)<(1);
            $or$cond29$i = $955 & $969;
            if ($or$cond29$i) {
             $s9$2$i = $1181;
             break;
            }
            (___fwritex(55256,1,$f)|0);
            $s9$2$i = $1181;
           } else {
            $966 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($966) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $967 = ((($s9$1192$i)) + -1|0);
             HEAP8[$967>>0] = 48;
             $968 = ($967>>>0)>($buf$i>>>0);
             if ($968) {
              $s9$1192$i = $967;
             } else {
              $s9$2$i = $967;
              break;
             }
            }
           }
          } while(0);
          $970 = $s9$2$i;
          $971 = (($15) - ($970))|0;
          $972 = ($$5196$i|0)>($971|0);
          $973 = $972 ? $971 : $$5196$i;
          (___fwritex($s9$2$i,$973,$f)|0);
          $974 = (($$5196$i) - ($971))|0;
          $975 = ((($d$6195$i)) + 4|0);
          $976 = ($975>>>0)<($z$6$$i>>>0);
          $977 = ($974|0)>(-1);
          $978 = $976 & $977;
          if ($978) {
           $$5196$i = $974;$d$6195$i = $975;
          } else {
           $$lcssa467 = $974;
           break;
          }
         }
         $979 = ($$lcssa467|0)>(0);
         if (!($979)) {
          break;
         }
         $980 = ($$lcssa467>>>0)>(256);
         $981 = $980 ? 256 : $$lcssa467;
         _memset(($pad$i|0),48,($981|0))|0;
         $982 = ($$lcssa467>>>0)>(255);
         if ($982) {
          $$01$i141$i = $$lcssa467;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $983 = (($$01$i141$i) + -256)|0;
           $984 = ($983>>>0)>(255);
           if ($984) {
            $$01$i141$i = $983;
           } else {
            break;
           }
          }
          $985 = $$lcssa467 & 255;
          $$0$lcssa$i143$i = $985;
         } else {
          $$0$lcssa$i143$i = $$lcssa467;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $986 = $estr$2$i;
       $987 = (($9) - ($986))|0;
       (___fwritex($estr$2$i,$987,$f)|0);
      }
      $988 = ($889|0)==(8192);
      $or$cond$i$i = $988 & $891;
      if ($or$cond$i$i) {
       $989 = (($w$1) - ($888))|0;
       $990 = ($989>>>0)>(256);
       $991 = $990 ? 256 : $989;
       _memset(($pad$i|0),32,($991|0))|0;
       $992 = ($989>>>0)>(255);
       if ($992) {
        $$01$i$i = $989;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $993 = (($$01$i$i) + -256)|0;
         $994 = ($993>>>0)>(255);
         if ($994) {
          $$01$i$i = $993;
         } else {
          break;
         }
        }
        $995 = $989 & 255;
        $$0$lcssa$i$i = $995;
       } else {
        $$0$lcssa$i$i = $989;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $891 ? $w$1 : $888;
      $$0$i = $w$30$i;
     } else {
      $440 = $t$0 & 32;
      $441 = ($440|0)!=(0);
      $442 = $441 ? 55224 : 55232;
      $443 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $444 = $441 ? 55240 : 55248;
      $pl$1$i = $443 ? 0 : $pl$0$i;
      $s1$0$i = $443 ? $444 : $442;
      $445 = (($pl$1$i) + 3)|0;
      $446 = $fl$1$ & 8192;
      $447 = ($446|0)==(0);
      $448 = ($w$1|0)>($445|0);
      $or$cond$i35$i = $447 & $448;
      if ($or$cond$i35$i) {
       $449 = (($w$1) - ($445))|0;
       $450 = ($449>>>0)>(256);
       $451 = $450 ? 256 : $449;
       _memset(($pad$i|0),32,($451|0))|0;
       $452 = ($449>>>0)>(255);
       if ($452) {
        $$01$i37$i = $449;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $453 = (($$01$i37$i) + -256)|0;
         $454 = ($453>>>0)>(255);
         if ($454) {
          $$01$i37$i = $453;
         } else {
          break;
         }
        }
        $455 = $449 & 255;
        $$0$lcssa$i39$i = $455;
       } else {
        $$0$lcssa$i39$i = $449;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $456 = $fl$1$ & 73728;
      $457 = ($456|0)==(8192);
      $or$cond$i42$i = $457 & $448;
      if ($or$cond$i42$i) {
       $458 = (($w$1) - ($445))|0;
       $459 = ($458>>>0)>(256);
       $460 = $459 ? 256 : $458;
       _memset(($pad$i|0),32,($460|0))|0;
       $461 = ($458>>>0)>(255);
       if ($461) {
        $$01$i44$i = $458;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $462 = (($$01$i44$i) + -256)|0;
         $463 = ($462>>>0)>(255);
         if ($463) {
          $$01$i44$i = $462;
         } else {
          break;
         }
        }
        $464 = $458 & 255;
        $$0$lcssa$i46$i = $464;
       } else {
        $$0$lcssa$i46$i = $458;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $465 = $448 ? $w$1 : $445;
      $$0$i = $465;
     }
    } while(0);
    $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 109:  {
    $374 = (___errno_location()|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (_strerror(($375|0))|0);
    $a$1 = $376;
    label = 94;
    break;
   }
   default: {
    $1169 = $286;$1170 = $259;$a$2 = $fmt89;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 55176;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $284 = $t$1 & 32;
   $285 = ($259|0)==(0);
   $287 = ($286|0)==(0);
   $288 = $285 & $287;
   if ($288) {
    $361 = $259;$363 = $286;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 55176;
    label = 89;
   } else {
    $$012$i = $2;$290 = $259;$297 = $286;
    while(1) {
     $289 = $290 & 15;
     $291 = (55160 + ($289)|0);
     $292 = HEAP8[$291>>0]|0;
     $293 = $292&255;
     $294 = $293 | $284;
     $295 = $294&255;
     $296 = ((($$012$i)) + -1|0);
     HEAP8[$296>>0] = $295;
     $298 = (_bitshift64Lshr(($290|0),($297|0),4)|0);
     $299 = tempRet0;
     $300 = ($298|0)==(0);
     $301 = ($299|0)==(0);
     $302 = $300 & $301;
     if ($302) {
      $$lcssa482 = $296;
      break;
     } else {
      $$012$i = $296;$290 = $298;$297 = $299;
     }
    }
    $303 = $fl$3 & 8;
    $304 = ($303|0)==(0);
    if ($304) {
     $361 = $259;$363 = $286;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 55176;
     label = 89;
    } else {
     $305 = $t$1 >> 4;
     $306 = (55176 + ($305)|0);
     $361 = $259;$363 = $286;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $306;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $332 = ($331>>>0)>(0);
   $334 = ($333>>>0)>(4294967295);
   $335 = ($331|0)==(0);
   $336 = $335 & $334;
   $337 = $332 | $336;
   if ($337) {
    $$05$i = $2;$338 = $333;$339 = $331;
    while(1) {
     $340 = (___uremdi3(($338|0),($339|0),10,0)|0);
     $341 = tempRet0;
     $342 = $340 | 48;
     $343 = $342&255;
     $344 = ((($$05$i)) + -1|0);
     HEAP8[$344>>0] = $343;
     $345 = (___udivdi3(($338|0),($339|0),10,0)|0);
     $346 = tempRet0;
     $347 = ($339>>>0)>(9);
     $348 = ($338>>>0)>(4294967295);
     $349 = ($339|0)==(9);
     $350 = $349 & $348;
     $351 = $347 | $350;
     if ($351) {
      $$05$i = $344;$338 = $345;$339 = $346;
     } else {
      $$lcssa478 = $344;$1171 = $345;$1172 = $346;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa478;$$01$lcssa$off0$i = $1171;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $333;
   }
   $352 = ($$01$lcssa$off0$i|0)==(0);
   if ($352) {
    $361 = $333;$363 = $331;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $353 = (($y$03$i>>>0) % 10)&-1;
     $354 = $353 | 48;
     $355 = $354&255;
     $356 = ((($$12$i)) + -1|0);
     HEAP8[$356>>0] = $355;
     $357 = (($y$03$i>>>0) / 10)&-1;
     $358 = ($y$03$i>>>0)<(10);
     if ($358) {
      $361 = $333;$363 = $331;$a$0 = $356;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $356;$y$03$i = $357;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $380 = (_memchr($a$1,0,$p$0)|0);
   $381 = ($380|0)==(0|0);
   $382 = $380;
   $383 = $a$1;
   $384 = (($382) - ($383))|0;
   $385 = (($a$1) + ($p$0)|0);
   $z$1 = $381 ? $385 : $380;
   $p$3 = $381 ? $p$0 : $384;
   $1169 = $286;$1170 = $259;$a$2 = $a$1;$fl$6 = $258;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 55176;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1173;
   while(1) {
    $388 = HEAP32[$ws$0181>>2]|0;
    $389 = ($388|0)==(0);
    if ($389) {
     $i$0$lcssa = $i$0180;$l$2 = $l$1179;
     break;
    }
    $390 = (_wctomb($mb,$388)|0);
    $391 = ($390|0)<(0);
    $392 = (($p$4274) - ($i$0180))|0;
    $393 = ($390>>>0)>($392>>>0);
    $or$cond22 = $391 | $393;
    if ($or$cond22) {
     $i$0$lcssa = $i$0180;$l$2 = $390;
     break;
    }
    $394 = ((($ws$0181)) + 4|0);
    $395 = (($390) + ($i$0180))|0;
    $396 = ($p$4274>>>0)>($395>>>0);
    if ($396) {
     $i$0180 = $395;$l$1179 = $390;$ws$0181 = $394;
    } else {
     $i$0$lcssa = $395;$l$2 = $390;
     break;
    }
   }
   $397 = ($l$2|0)<(0);
   if ($397) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1175 = $1174;$1176 = $1173;$i$0$lcssa275 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $359 = ($p$2|0)>(-1);
   $360 = $fl$4 & -65537;
   $$fl$4 = $359 ? $360 : $fl$4;
   $362 = ($361|0)!=(0);
   $364 = ($363|0)!=(0);
   $365 = $362 | $364;
   $366 = ($p$2|0)!=(0);
   $or$cond = $365 | $366;
   if ($or$cond) {
    $367 = $a$0;
    $368 = (($3) - ($367))|0;
    $369 = $365&1;
    $370 = $369 ^ 1;
    $371 = (($370) + ($368))|0;
    $372 = ($p$2|0)>($371|0);
    $p$2$ = $372 ? $p$2 : $371;
    $1169 = $363;$1170 = $361;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1169 = $363;$1170 = $361;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $398 = $fl$1$ & 73728;
   $399 = ($398|0)==(0);
   $400 = ($w$1|0)>($i$0$lcssa275|0);
   $or$cond$i64 = $399 & $400;
   if ($or$cond$i64) {
    $401 = (($w$1) - ($i$0$lcssa275))|0;
    $402 = ($401>>>0)>(256);
    $403 = $402 ? 256 : $401;
    _memset(($pad$i|0),32,($403|0))|0;
    $404 = ($401>>>0)>(255);
    if ($404) {
     $$01$i66 = $401;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $405 = (($$01$i66) + -256)|0;
      $406 = ($405>>>0)>(255);
      if ($406) {
       $$01$i66 = $405;
      } else {
       break;
      }
     }
     $407 = $401 & 255;
     $$0$lcssa$i68 = $407;
    } else {
     $$0$lcssa$i68 = $401;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $408 = ($i$0$lcssa275|0)==(0);
   L465: do {
    if (!($408)) {
     $i$1191 = 0;$ws$1192 = $1176;
     while(1) {
      $409 = HEAP32[$ws$1192>>2]|0;
      $410 = ($409|0)==(0);
      if ($410) {
       break L465;
      }
      $411 = (_wctomb($mb,$409)|0);
      $412 = (($411) + ($i$1191))|0;
      $413 = ($412|0)>($i$0$lcssa275|0);
      if ($413) {
       break L465;
      }
      $414 = ((($ws$1192)) + 4|0);
      (___fwritex($mb,$411,$f)|0);
      $415 = ($412>>>0)<($i$0$lcssa275>>>0);
      if ($415) {
       $i$1191 = $412;$ws$1192 = $414;
      } else {
       break;
      }
     }
    }
   } while(0);
   $416 = ($398|0)==(8192);
   $or$cond$i71 = $416 & $400;
   if ($or$cond$i71) {
    $417 = (($w$1) - ($i$0$lcssa275))|0;
    $418 = ($417>>>0)>(256);
    $419 = $418 ? 256 : $417;
    _memset(($pad$i|0),32,($419|0))|0;
    $420 = ($417>>>0)>(255);
    if ($420) {
     $$01$i73 = $417;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $421 = (($$01$i73) + -256)|0;
      $422 = ($421>>>0)>(255);
      if ($422) {
       $$01$i73 = $421;
      } else {
       break;
      }
     }
     $423 = $417 & 255;
     $$0$lcssa$i75 = $423;
    } else {
     $$0$lcssa$i75 = $417;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $424 = $400 ? $w$1 : $i$0$lcssa275;
   $1164 = $286;$1165 = $1175;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $424;$l10n$0 = $l10n$3;
   continue;
  }
  $996 = $z$2;
  $997 = $a$2;
  $998 = (($996) - ($997))|0;
  $999 = ($p$5|0)<($998|0);
  $$p$5 = $999 ? $998 : $p$5;
  $1000 = (($pl$2) + ($$p$5))|0;
  $1001 = ($w$1|0)<($1000|0);
  $w$2 = $1001 ? $1000 : $w$1;
  $1002 = $fl$6 & 73728;
  $1003 = ($1002|0)==(0);
  $1004 = ($w$2|0)>($1000|0);
  $or$cond$i81 = $1003 & $1004;
  if ($or$cond$i81) {
   $1005 = (($w$2) - ($1000))|0;
   $1006 = ($1005>>>0)>(256);
   $1007 = $1006 ? 256 : $1005;
   _memset(($pad$i|0),32,($1007|0))|0;
   $1008 = ($1005>>>0)>(255);
   if ($1008) {
    $$01$i83 = $1005;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1009 = (($$01$i83) + -256)|0;
     $1010 = ($1009>>>0)>(255);
     if ($1010) {
      $$01$i83 = $1009;
     } else {
      break;
     }
    }
    $1011 = $1005 & 255;
    $$0$lcssa$i85 = $1011;
   } else {
    $$0$lcssa$i85 = $1005;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1012 = ($1002|0)==(65536);
  $or$cond$i57 = $1012 & $1004;
  if ($or$cond$i57) {
   $1013 = (($w$2) - ($1000))|0;
   $1014 = ($1013>>>0)>(256);
   $1015 = $1014 ? 256 : $1013;
   _memset(($pad$i|0),48,($1015|0))|0;
   $1016 = ($1013>>>0)>(255);
   if ($1016) {
    $$01$i59 = $1013;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1017 = (($$01$i59) + -256)|0;
     $1018 = ($1017>>>0)>(255);
     if ($1018) {
      $$01$i59 = $1017;
     } else {
      break;
     }
    }
    $1019 = $1013 & 255;
    $$0$lcssa$i61 = $1019;
   } else {
    $$0$lcssa$i61 = $1013;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1020 = ($$p$5|0)>($998|0);
  if ($1020) {
   $1021 = (($$p$5) - ($998))|0;
   $1022 = ($1021>>>0)>(256);
   $1023 = $1022 ? 256 : $1021;
   _memset(($pad$i|0),48,($1023|0))|0;
   $1024 = ($1021>>>0)>(255);
   if ($1024) {
    $$01$i44 = $1021;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1025 = (($$01$i44) + -256)|0;
     $1026 = ($1025>>>0)>(255);
     if ($1026) {
      $$01$i44 = $1025;
     } else {
      break;
     }
    }
    $1027 = $1021 & 255;
    $$0$lcssa$i46 = $1027;
   } else {
    $$0$lcssa$i46 = $1021;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$998,$f)|0);
  $1028 = ($1002|0)==(8192);
  $or$cond$i = $1028 & $1004;
  if ($or$cond$i) {
   $1029 = (($w$2) - ($1000))|0;
   $1030 = ($1029>>>0)>(256);
   $1031 = $1030 ? 256 : $1029;
   _memset(($pad$i|0),32,($1031|0))|0;
   $1032 = ($1029>>>0)>(255);
   if ($1032) {
    $$01$i = $1029;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1033 = (($$01$i) + -256)|0;
     $1034 = ($1033>>>0)>(255);
     if ($1034) {
      $$01$i = $1033;
     } else {
      break;
     }
    }
    $1035 = $1029 & 255;
    $$0$lcssa$i = $1035;
   } else {
    $$0$lcssa$i = $1029;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1164 = $1169;$1165 = $1170;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1036 = ($f|0)==(0|0);
  if (!($1036)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1037 = ($l10n$0$lcssa|0)==(0);
  if ($1037) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2166 = 1;
  }
  while(1) {
   $1038 = (($nl_type) + ($i$2166<<2)|0);
   $1039 = HEAP32[$1038>>2]|0;
   $1040 = ($1039|0)==(0);
   if ($1040) {
    $i$2166$lcssa = $i$2166;
    break;
   }
   $1042 = (($nl_arg) + ($i$2166<<3)|0);
   $1043 = ($1039>>>0)>(20);
   L530: do {
    if (!($1043)) {
     do {
      switch ($1039|0) {
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1143 = $arglist_current59;
       $1144 = ((0) + 8|0);
       $expanded204 = $1144;
       $expanded203 = (($expanded204) - 1)|0;
       $1145 = (($1143) + ($expanded203))|0;
       $1146 = ((0) + 8|0);
       $expanded208 = $1146;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1147 = $1145 & $expanded206;
       $1148 = $1147;
       $1149 = +HEAPF64[$1148>>3];
       $arglist_next60 = ((($1148)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1042>>3] = $1149;
       break L530;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1150 = $arglist_current62;
       $1151 = ((0) + 8|0);
       $expanded211 = $1151;
       $expanded210 = (($expanded211) - 1)|0;
       $1152 = (($1150) + ($expanded210))|0;
       $1153 = ((0) + 8|0);
       $expanded215 = $1153;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1154 = $1152 & $expanded213;
       $1155 = $1154;
       $1156 = +HEAPF64[$1155>>3];
       $arglist_next63 = ((($1155)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1042>>3] = $1156;
       break L530;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1117 = $arglist_current53;
       $1118 = ((0) + 4|0);
       $expanded190 = $1118;
       $expanded189 = (($expanded190) - 1)|0;
       $1119 = (($1117) + ($expanded189))|0;
       $1120 = ((0) + 4|0);
       $expanded194 = $1120;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1121 = $1119 & $expanded192;
       $1122 = $1121;
       $1123 = HEAP32[$1122>>2]|0;
       $arglist_next54 = ((($1122)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1124 = $1123&255;
       $1125 = $1124 << 24 >> 24;
       $1126 = ($1125|0)<(0);
       $1127 = $1126 << 31 >> 31;
       $1128 = $1042;
       $1129 = $1128;
       HEAP32[$1129>>2] = $1125;
       $1130 = (($1128) + 4)|0;
       $1131 = $1130;
       HEAP32[$1131>>2] = $1127;
       break L530;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1132 = $arglist_current56;
       $1133 = ((0) + 4|0);
       $expanded197 = $1133;
       $expanded196 = (($expanded197) - 1)|0;
       $1134 = (($1132) + ($expanded196))|0;
       $1135 = ((0) + 4|0);
       $expanded201 = $1135;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1136 = $1134 & $expanded199;
       $1137 = $1136;
       $1138 = HEAP32[$1137>>2]|0;
       $arglist_next57 = ((($1137)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1138 & 255;
       $1139 = $1042;
       $1140 = $1139;
       HEAP32[$1140>>2] = $$mask$i;
       $1141 = (($1139) + 4)|0;
       $1142 = $1141;
       HEAP32[$1142>>2] = 0;
       break L530;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1091 = $arglist_current47;
       $1092 = ((0) + 4|0);
       $expanded176 = $1092;
       $expanded175 = (($expanded176) - 1)|0;
       $1093 = (($1091) + ($expanded175))|0;
       $1094 = ((0) + 4|0);
       $expanded180 = $1094;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1095 = $1093 & $expanded178;
       $1096 = $1095;
       $1097 = HEAP32[$1096>>2]|0;
       $arglist_next48 = ((($1096)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1098 = $1097&65535;
       $1099 = $1098 << 16 >> 16;
       $1100 = ($1099|0)<(0);
       $1101 = $1100 << 31 >> 31;
       $1102 = $1042;
       $1103 = $1102;
       HEAP32[$1103>>2] = $1099;
       $1104 = (($1102) + 4)|0;
       $1105 = $1104;
       HEAP32[$1105>>2] = $1101;
       break L530;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1106 = $arglist_current50;
       $1107 = ((0) + 4|0);
       $expanded183 = $1107;
       $expanded182 = (($expanded183) - 1)|0;
       $1108 = (($1106) + ($expanded182))|0;
       $1109 = ((0) + 4|0);
       $expanded187 = $1109;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1110 = $1108 & $expanded185;
       $1111 = $1110;
       $1112 = HEAP32[$1111>>2]|0;
       $arglist_next51 = ((($1111)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1112 & 65535;
       $1113 = $1042;
       $1114 = $1113;
       HEAP32[$1114>>2] = $$mask1$i;
       $1115 = (($1113) + 4)|0;
       $1116 = $1115;
       HEAP32[$1116>>2] = 0;
       break L530;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1064 = $arglist_current41;
       $1065 = ((0) + 4|0);
       $expanded162 = $1065;
       $expanded161 = (($expanded162) - 1)|0;
       $1066 = (($1064) + ($expanded161))|0;
       $1067 = ((0) + 4|0);
       $expanded166 = $1067;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1068 = $1066 & $expanded164;
       $1069 = $1068;
       $1070 = HEAP32[$1069>>2]|0;
       $arglist_next42 = ((($1069)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1071 = $1042;
       $1072 = $1071;
       HEAP32[$1072>>2] = $1070;
       $1073 = (($1071) + 4)|0;
       $1074 = $1073;
       HEAP32[$1074>>2] = 0;
       break L530;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1075 = $arglist_current44;
       $1076 = ((0) + 8|0);
       $expanded169 = $1076;
       $expanded168 = (($expanded169) - 1)|0;
       $1077 = (($1075) + ($expanded168))|0;
       $1078 = ((0) + 8|0);
       $expanded173 = $1078;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1079 = $1077 & $expanded171;
       $1080 = $1079;
       $1081 = $1080;
       $1082 = $1081;
       $1083 = HEAP32[$1082>>2]|0;
       $1084 = (($1081) + 4)|0;
       $1085 = $1084;
       $1086 = HEAP32[$1085>>2]|0;
       $arglist_next45 = ((($1080)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1087 = $1042;
       $1088 = $1087;
       HEAP32[$1088>>2] = $1083;
       $1089 = (($1087) + 4)|0;
       $1090 = $1089;
       HEAP32[$1090>>2] = $1086;
       break L530;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1044 = $arglist_current35;
       $1045 = ((0) + 4|0);
       $expanded148 = $1045;
       $expanded147 = (($expanded148) - 1)|0;
       $1046 = (($1044) + ($expanded147))|0;
       $1047 = ((0) + 4|0);
       $expanded152 = $1047;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1048 = $1046 & $expanded150;
       $1049 = $1048;
       $1050 = HEAP32[$1049>>2]|0;
       $arglist_next36 = ((($1049)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1042>>2] = $1050;
       break L530;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1051 = $arglist_current38;
       $1052 = ((0) + 4|0);
       $expanded155 = $1052;
       $expanded154 = (($expanded155) - 1)|0;
       $1053 = (($1051) + ($expanded154))|0;
       $1054 = ((0) + 4|0);
       $expanded159 = $1054;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1055 = $1053 & $expanded157;
       $1056 = $1055;
       $1057 = HEAP32[$1056>>2]|0;
       $arglist_next39 = ((($1056)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1058 = ($1057|0)<(0);
       $1059 = $1058 << 31 >> 31;
       $1060 = $1042;
       $1061 = $1060;
       HEAP32[$1061>>2] = $1057;
       $1062 = (($1060) + 4)|0;
       $1063 = $1062;
       HEAP32[$1063>>2] = $1059;
       break L530;
       break;
      }
      default: {
       break L530;
      }
      }
     } while(0);
    }
   } while(0);
   $1157 = (($i$2166) + 1)|0;
   $1158 = ($1157|0)<(10);
   if ($1158) {
    $i$2166 = $1157;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1041 = ($i$2166$lcssa|0)<(10);
  if ($1041) {
   $i$3164 = $i$2166$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1161 = (($nl_type) + ($i$3164<<2)|0);
   $1162 = HEAP32[$1161>>2]|0;
   $1163 = ($1162|0)==(0);
   $1159 = (($i$3164) + 1)|0;
   if (!($1163)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1160 = ($1159|0)<(10);
   if ($1160) {
    $i$3164 = $1159;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[55264>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (55304 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (55304 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[55264>>2] = $22;
     } else {
      $23 = HEAP32[(55280)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(55272)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (55304 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (55304 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[55264>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(55280)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(55272)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(55284)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (55304 + ($92<<2)|0);
      $94 = HEAP32[55264>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[55264>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (55304 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (55304 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(55280)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(55272)>>2] = $81;
     HEAP32[(55284)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(55268)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (55568 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(55280)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (55568 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(55268)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(55268)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(55280)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(55280)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(55280)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(55272)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(55284)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (55304 + ($229<<2)|0);
       $231 = HEAP32[55264>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[55264>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (55304 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (55304 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(55280)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(55272)>>2] = $rsize$0$i$lcssa;
      HEAP32[(55284)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(55268)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (55568 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (55568 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(55272)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(55280)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (55568 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(55268)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(55268)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(55280)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(55280)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(55280)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (55304 + ($424<<2)|0);
          $426 = HEAP32[55264>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[55264>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (55304 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (55304 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(55280)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (55568 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(55268)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(55268)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(55280)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(55280)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(55272)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(55284)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(55284)>>2] = $514;
   HEAP32[(55272)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(55272)>>2] = 0;
   HEAP32[(55284)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(55276)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(55276)>>2] = $528;
  $529 = HEAP32[(55288)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(55288)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[55736>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(55744)>>2] = $538;
    HEAP32[(55740)>>2] = $538;
    HEAP32[(55748)>>2] = -1;
    HEAP32[(55752)>>2] = -1;
    HEAP32[(55756)>>2] = 0;
    HEAP32[(55708)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[55736>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(55744)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(55704)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(55696)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(55708)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(55288)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (55712);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(55276)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(55740)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(55696)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(55704)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(55744)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(55708)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(55708)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(55696)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(55696)>>2] = $632;
  $633 = HEAP32[(55700)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(55700)>>2] = $632;
  }
  $635 = HEAP32[(55288)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(55280)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(55280)>>2] = $tbase$255$i;
    }
    HEAP32[(55712)>>2] = $tbase$255$i;
    HEAP32[(55716)>>2] = $tsize$254$i;
    HEAP32[(55724)>>2] = 0;
    $640 = HEAP32[55736>>2]|0;
    HEAP32[(55300)>>2] = $640;
    HEAP32[(55296)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (55304 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (55304 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (55304 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(55288)>>2] = $654;
    HEAP32[(55276)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(55752)>>2]|0;
    HEAP32[(55292)>>2] = $659;
   } else {
    $sp$084$i = (55712);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(55276)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(55288)>>2] = $684;
       HEAP32[(55276)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(55752)>>2]|0;
       HEAP32[(55292)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(55280)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(55280)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (55712);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (55712);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L317: do {
       if ($728) {
        $729 = HEAP32[(55276)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(55276)>>2] = $730;
        HEAP32[(55288)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(55284)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(55272)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(55272)>>2] = $736;
         HEAP32[(55284)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L324: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (55304 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[55264>>2]|0;
            $763 = $762 & $761;
            HEAP32[55264>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (55568 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(55268)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(55268)>>2] = $806;
             break L324;
            } else {
             $807 = HEAP32[(55280)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L324;
             }
            }
           } while(0);
           $814 = HEAP32[(55280)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(55280)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (55304 + ($840<<2)|0);
         $842 = HEAP32[55264>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[55264>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (55304 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (55304 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(55280)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (55568 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(55268)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(55268)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L410: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L410;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(55280)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L317;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(55280)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (55712);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(55288)>>2] = $953;
    HEAP32[(55276)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(55752)>>2]|0;
    HEAP32[(55292)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(55712)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(55712)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(55712)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(55712)+12>>2]|0;
    HEAP32[(55712)>>2] = $tbase$255$i;
    HEAP32[(55716)>>2] = $tsize$254$i;
    HEAP32[(55724)>>2] = 0;
    HEAP32[(55720)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (55304 + ($977<<2)|0);
      $979 = HEAP32[55264>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[55264>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (55304 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (55304 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(55280)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (55568 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(55268)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(55268)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L452: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L452;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(55280)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(55280)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(55276)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(55276)>>2] = $1062;
   $1063 = HEAP32[(55288)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(55288)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(55280)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(55284)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(55272)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (55304 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[55264>>2]|0;
     $36 = $35 & $34;
     HEAP32[55264>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (55568 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(55268)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(55268)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(55280)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(55280)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(55280)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(55288)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(55276)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(55276)>>2] = $120;
   HEAP32[(55288)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(55284)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(55284)>>2] = 0;
   HEAP32[(55272)>>2] = 0;
   return;
  }
  $125 = HEAP32[(55284)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(55272)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(55272)>>2] = $128;
   HEAP32[(55284)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (55304 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(55280)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[55264>>2]|0;
     $152 = $151 & $150;
     HEAP32[55264>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(55280)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(55280)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(55280)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (55568 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(55268)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(55268)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(55280)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(55280)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(55280)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(55284)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(55272)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (55304 + ($233<<2)|0);
  $235 = HEAP32[55264>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[55264>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (55304 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (55304 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(55280)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (55568 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(55268)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(55268)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(55280)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(55280)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(55296)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(55296)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (55720);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(55296)>>2] = -1;
 return;
}
function __ZNSt3__112__next_primeEj($n) {
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$k0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i$0 = 0, $in$0 = 0, $j$0 = 0, $k0$0 = 0, $storemerge = 0, $storemerge$lcssa = 0, $storemerge$lcssa15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 9|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $n;
 $4 = ($n>>>0)<(212);
 do {
  if ($4) {
   $5 = (__ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(55760,(55952),$2,$1)|0);
   $6 = HEAP32[$5>>2]|0;
   $$0 = $6;
  } else {
   $7 = ($n>>>0)>(4294967291);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(283,($8|0),(55952|0));
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch()|0;
     $12 = tempRet0;
     ___cxa_free_exception(($8|0));
     ___resumeException($11|0);
     // unreachable;
    } else {
     HEAP32[$8>>2] = (53368);
     ___cxa_throw(($8|0),(53408|0),(56|0));
     // unreachable;
    }
   }
   $13 = (($n>>>0) / 210)&-1;
   $14 = ($13*210)|0;
   $15 = (($n) - ($14))|0;
   HEAP32[$3>>2] = $15;
   $16 = (__ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(55976,(56168),$3,$0)|0);
   $17 = $16;
   $18 = (($17) - (55976))|0;
   $19 = $18 >> 2;
   $20 = (55976 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($14))|0;
   $in$0 = $19;$k0$0 = $13;$storemerge = $22;
   L9: while(1) {
    $j$0 = 5;
    while(1) {
     $23 = ($j$0>>>0)<(47);
     if (!($23)) {
      $i$0 = 211;
      label = 12;
      break;
     }
     $24 = (55760 + ($j$0<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($storemerge>>>0) / ($25>>>0))&-1;
     $27 = ($26>>>0)<($25>>>0);
     if ($27) {
      $storemerge$lcssa15 = $storemerge;
      label = 110;
      break L9;
     }
     $28 = Math_imul($26, $25)|0;
     $29 = ($storemerge|0)==($28|0);
     $30 = (($j$0) + 1)|0;
     if ($29) {
      break;
     } else {
      $j$0 = $30;
     }
    }
    L15: do {
     if ((label|0) == 12) {
      while(1) {
       label = 0;
       $31 = (($storemerge>>>0) / ($i$0>>>0))&-1;
       $32 = ($31>>>0)<($i$0>>>0);
       if ($32) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $33 = Math_imul($31, $i$0)|0;
       $34 = ($storemerge|0)==($33|0);
       if ($34) {
        break L15;
       }
       $35 = (($i$0) + 10)|0;
       $36 = (($storemerge>>>0) / ($35>>>0))&-1;
       $37 = ($36>>>0)<($35>>>0);
       if ($37) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $38 = Math_imul($36, $35)|0;
       $39 = ($storemerge|0)==($38|0);
       if ($39) {
        break L15;
       }
       $40 = (($i$0) + 12)|0;
       $41 = (($storemerge>>>0) / ($40>>>0))&-1;
       $42 = ($41>>>0)<($40>>>0);
       if ($42) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $43 = Math_imul($41, $40)|0;
       $44 = ($storemerge|0)==($43|0);
       if ($44) {
        break L15;
       }
       $45 = (($i$0) + 16)|0;
       $46 = (($storemerge>>>0) / ($45>>>0))&-1;
       $47 = ($46>>>0)<($45>>>0);
       if ($47) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $48 = Math_imul($46, $45)|0;
       $49 = ($storemerge|0)==($48|0);
       if ($49) {
        break L15;
       }
       $50 = (($i$0) + 18)|0;
       $51 = (($storemerge>>>0) / ($50>>>0))&-1;
       $52 = ($51>>>0)<($50>>>0);
       if ($52) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $53 = Math_imul($51, $50)|0;
       $54 = ($storemerge|0)==($53|0);
       if ($54) {
        break L15;
       }
       $55 = (($i$0) + 22)|0;
       $56 = (($storemerge>>>0) / ($55>>>0))&-1;
       $57 = ($56>>>0)<($55>>>0);
       if ($57) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $58 = Math_imul($56, $55)|0;
       $59 = ($storemerge|0)==($58|0);
       if ($59) {
        break L15;
       }
       $60 = (($i$0) + 28)|0;
       $61 = (($storemerge>>>0) / ($60>>>0))&-1;
       $62 = ($61>>>0)<($60>>>0);
       if ($62) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $63 = Math_imul($61, $60)|0;
       $64 = ($storemerge|0)==($63|0);
       if ($64) {
        break L15;
       }
       $65 = (($i$0) + 30)|0;
       $66 = (($storemerge>>>0) / ($65>>>0))&-1;
       $67 = ($66>>>0)<($65>>>0);
       if ($67) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $68 = Math_imul($66, $65)|0;
       $69 = ($storemerge|0)==($68|0);
       if ($69) {
        break L15;
       }
       $70 = (($i$0) + 36)|0;
       $71 = (($storemerge>>>0) / ($70>>>0))&-1;
       $72 = ($71>>>0)<($70>>>0);
       if ($72) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $73 = Math_imul($71, $70)|0;
       $74 = ($storemerge|0)==($73|0);
       if ($74) {
        break L15;
       }
       $75 = (($i$0) + 40)|0;
       $76 = (($storemerge>>>0) / ($75>>>0))&-1;
       $77 = ($76>>>0)<($75>>>0);
       if ($77) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $78 = Math_imul($76, $75)|0;
       $79 = ($storemerge|0)==($78|0);
       if ($79) {
        break L15;
       }
       $80 = (($i$0) + 42)|0;
       $81 = (($storemerge>>>0) / ($80>>>0))&-1;
       $82 = ($81>>>0)<($80>>>0);
       if ($82) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $83 = Math_imul($81, $80)|0;
       $84 = ($storemerge|0)==($83|0);
       if ($84) {
        break L15;
       }
       $85 = (($i$0) + 46)|0;
       $86 = (($storemerge>>>0) / ($85>>>0))&-1;
       $87 = ($86>>>0)<($85>>>0);
       if ($87) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $88 = Math_imul($86, $85)|0;
       $89 = ($storemerge|0)==($88|0);
       if ($89) {
        break L15;
       }
       $90 = (($i$0) + 52)|0;
       $91 = (($storemerge>>>0) / ($90>>>0))&-1;
       $92 = ($91>>>0)<($90>>>0);
       if ($92) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $93 = Math_imul($91, $90)|0;
       $94 = ($storemerge|0)==($93|0);
       if ($94) {
        break L15;
       }
       $95 = (($i$0) + 58)|0;
       $96 = (($storemerge>>>0) / ($95>>>0))&-1;
       $97 = ($96>>>0)<($95>>>0);
       if ($97) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $98 = Math_imul($96, $95)|0;
       $99 = ($storemerge|0)==($98|0);
       if ($99) {
        break L15;
       }
       $100 = (($i$0) + 60)|0;
       $101 = (($storemerge>>>0) / ($100>>>0))&-1;
       $102 = ($101>>>0)<($100>>>0);
       if ($102) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $103 = Math_imul($101, $100)|0;
       $104 = ($storemerge|0)==($103|0);
       if ($104) {
        break L15;
       }
       $105 = (($i$0) + 66)|0;
       $106 = (($storemerge>>>0) / ($105>>>0))&-1;
       $107 = ($106>>>0)<($105>>>0);
       if ($107) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $108 = Math_imul($106, $105)|0;
       $109 = ($storemerge|0)==($108|0);
       if ($109) {
        break L15;
       }
       $110 = (($i$0) + 70)|0;
       $111 = (($storemerge>>>0) / ($110>>>0))&-1;
       $112 = ($111>>>0)<($110>>>0);
       if ($112) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $113 = Math_imul($111, $110)|0;
       $114 = ($storemerge|0)==($113|0);
       if ($114) {
        break L15;
       }
       $115 = (($i$0) + 72)|0;
       $116 = (($storemerge>>>0) / ($115>>>0))&-1;
       $117 = ($116>>>0)<($115>>>0);
       if ($117) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $118 = Math_imul($116, $115)|0;
       $119 = ($storemerge|0)==($118|0);
       if ($119) {
        break L15;
       }
       $120 = (($i$0) + 78)|0;
       $121 = (($storemerge>>>0) / ($120>>>0))&-1;
       $122 = ($121>>>0)<($120>>>0);
       if ($122) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $123 = Math_imul($121, $120)|0;
       $124 = ($storemerge|0)==($123|0);
       if ($124) {
        break L15;
       }
       $125 = (($i$0) + 82)|0;
       $126 = (($storemerge>>>0) / ($125>>>0))&-1;
       $127 = ($126>>>0)<($125>>>0);
       if ($127) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $128 = Math_imul($126, $125)|0;
       $129 = ($storemerge|0)==($128|0);
       if ($129) {
        break L15;
       }
       $130 = (($i$0) + 88)|0;
       $131 = (($storemerge>>>0) / ($130>>>0))&-1;
       $132 = ($131>>>0)<($130>>>0);
       if ($132) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $133 = Math_imul($131, $130)|0;
       $134 = ($storemerge|0)==($133|0);
       if ($134) {
        break L15;
       }
       $135 = (($i$0) + 96)|0;
       $136 = (($storemerge>>>0) / ($135>>>0))&-1;
       $137 = ($136>>>0)<($135>>>0);
       if ($137) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $138 = Math_imul($136, $135)|0;
       $139 = ($storemerge|0)==($138|0);
       if ($139) {
        break L15;
       }
       $140 = (($i$0) + 100)|0;
       $141 = (($storemerge>>>0) / ($140>>>0))&-1;
       $142 = ($141>>>0)<($140>>>0);
       if ($142) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $143 = Math_imul($141, $140)|0;
       $144 = ($storemerge|0)==($143|0);
       if ($144) {
        break L15;
       }
       $145 = (($i$0) + 102)|0;
       $146 = (($storemerge>>>0) / ($145>>>0))&-1;
       $147 = ($146>>>0)<($145>>>0);
       if ($147) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $148 = Math_imul($146, $145)|0;
       $149 = ($storemerge|0)==($148|0);
       if ($149) {
        break L15;
       }
       $150 = (($i$0) + 106)|0;
       $151 = (($storemerge>>>0) / ($150>>>0))&-1;
       $152 = ($151>>>0)<($150>>>0);
       if ($152) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $153 = Math_imul($151, $150)|0;
       $154 = ($storemerge|0)==($153|0);
       if ($154) {
        break L15;
       }
       $155 = (($i$0) + 108)|0;
       $156 = (($storemerge>>>0) / ($155>>>0))&-1;
       $157 = ($156>>>0)<($155>>>0);
       if ($157) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $158 = Math_imul($156, $155)|0;
       $159 = ($storemerge|0)==($158|0);
       if ($159) {
        break L15;
       }
       $160 = (($i$0) + 112)|0;
       $161 = (($storemerge>>>0) / ($160>>>0))&-1;
       $162 = ($161>>>0)<($160>>>0);
       if ($162) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $163 = Math_imul($161, $160)|0;
       $164 = ($storemerge|0)==($163|0);
       if ($164) {
        break L15;
       }
       $165 = (($i$0) + 120)|0;
       $166 = (($storemerge>>>0) / ($165>>>0))&-1;
       $167 = ($166>>>0)<($165>>>0);
       if ($167) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $168 = Math_imul($166, $165)|0;
       $169 = ($storemerge|0)==($168|0);
       if ($169) {
        break L15;
       }
       $170 = (($i$0) + 126)|0;
       $171 = (($storemerge>>>0) / ($170>>>0))&-1;
       $172 = ($171>>>0)<($170>>>0);
       if ($172) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $173 = Math_imul($171, $170)|0;
       $174 = ($storemerge|0)==($173|0);
       if ($174) {
        break L15;
       }
       $175 = (($i$0) + 130)|0;
       $176 = (($storemerge>>>0) / ($175>>>0))&-1;
       $177 = ($176>>>0)<($175>>>0);
       if ($177) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $178 = Math_imul($176, $175)|0;
       $179 = ($storemerge|0)==($178|0);
       if ($179) {
        break L15;
       }
       $180 = (($i$0) + 136)|0;
       $181 = (($storemerge>>>0) / ($180>>>0))&-1;
       $182 = ($181>>>0)<($180>>>0);
       if ($182) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $183 = Math_imul($181, $180)|0;
       $184 = ($storemerge|0)==($183|0);
       if ($184) {
        break L15;
       }
       $185 = (($i$0) + 138)|0;
       $186 = (($storemerge>>>0) / ($185>>>0))&-1;
       $187 = ($186>>>0)<($185>>>0);
       if ($187) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $188 = Math_imul($186, $185)|0;
       $189 = ($storemerge|0)==($188|0);
       if ($189) {
        break L15;
       }
       $190 = (($i$0) + 142)|0;
       $191 = (($storemerge>>>0) / ($190>>>0))&-1;
       $192 = ($191>>>0)<($190>>>0);
       if ($192) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $193 = Math_imul($191, $190)|0;
       $194 = ($storemerge|0)==($193|0);
       if ($194) {
        break L15;
       }
       $195 = (($i$0) + 148)|0;
       $196 = (($storemerge>>>0) / ($195>>>0))&-1;
       $197 = ($196>>>0)<($195>>>0);
       if ($197) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $198 = Math_imul($196, $195)|0;
       $199 = ($storemerge|0)==($198|0);
       if ($199) {
        break L15;
       }
       $200 = (($i$0) + 150)|0;
       $201 = (($storemerge>>>0) / ($200>>>0))&-1;
       $202 = ($201>>>0)<($200>>>0);
       if ($202) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $203 = Math_imul($201, $200)|0;
       $204 = ($storemerge|0)==($203|0);
       if ($204) {
        break L15;
       }
       $205 = (($i$0) + 156)|0;
       $206 = (($storemerge>>>0) / ($205>>>0))&-1;
       $207 = ($206>>>0)<($205>>>0);
       if ($207) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $208 = Math_imul($206, $205)|0;
       $209 = ($storemerge|0)==($208|0);
       if ($209) {
        break L15;
       }
       $210 = (($i$0) + 162)|0;
       $211 = (($storemerge>>>0) / ($210>>>0))&-1;
       $212 = ($211>>>0)<($210>>>0);
       if ($212) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $213 = Math_imul($211, $210)|0;
       $214 = ($storemerge|0)==($213|0);
       if ($214) {
        break L15;
       }
       $215 = (($i$0) + 166)|0;
       $216 = (($storemerge>>>0) / ($215>>>0))&-1;
       $217 = ($216>>>0)<($215>>>0);
       if ($217) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $218 = Math_imul($216, $215)|0;
       $219 = ($storemerge|0)==($218|0);
       if ($219) {
        break L15;
       }
       $220 = (($i$0) + 168)|0;
       $221 = (($storemerge>>>0) / ($220>>>0))&-1;
       $222 = ($221>>>0)<($220>>>0);
       if ($222) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $223 = Math_imul($221, $220)|0;
       $224 = ($storemerge|0)==($223|0);
       if ($224) {
        break L15;
       }
       $225 = (($i$0) + 172)|0;
       $226 = (($storemerge>>>0) / ($225>>>0))&-1;
       $227 = ($226>>>0)<($225>>>0);
       if ($227) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $228 = Math_imul($226, $225)|0;
       $229 = ($storemerge|0)==($228|0);
       if ($229) {
        break L15;
       }
       $230 = (($i$0) + 178)|0;
       $231 = (($storemerge>>>0) / ($230>>>0))&-1;
       $232 = ($231>>>0)<($230>>>0);
       if ($232) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $233 = Math_imul($231, $230)|0;
       $234 = ($storemerge|0)==($233|0);
       if ($234) {
        break L15;
       }
       $235 = (($i$0) + 180)|0;
       $236 = (($storemerge>>>0) / ($235>>>0))&-1;
       $237 = ($236>>>0)<($235>>>0);
       if ($237) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $238 = Math_imul($236, $235)|0;
       $239 = ($storemerge|0)==($238|0);
       if ($239) {
        break L15;
       }
       $240 = (($i$0) + 186)|0;
       $241 = (($storemerge>>>0) / ($240>>>0))&-1;
       $242 = ($241>>>0)<($240>>>0);
       if ($242) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $243 = Math_imul($241, $240)|0;
       $244 = ($storemerge|0)==($243|0);
       if ($244) {
        break L15;
       }
       $245 = (($i$0) + 190)|0;
       $246 = (($storemerge>>>0) / ($245>>>0))&-1;
       $247 = ($246>>>0)<($245>>>0);
       if ($247) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $248 = Math_imul($246, $245)|0;
       $249 = ($storemerge|0)==($248|0);
       if ($249) {
        break L15;
       }
       $250 = (($i$0) + 192)|0;
       $251 = (($storemerge>>>0) / ($250>>>0))&-1;
       $252 = ($251>>>0)<($250>>>0);
       if ($252) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $253 = Math_imul($251, $250)|0;
       $254 = ($storemerge|0)==($253|0);
       if ($254) {
        break L15;
       }
       $255 = (($i$0) + 196)|0;
       $256 = (($storemerge>>>0) / ($255>>>0))&-1;
       $257 = ($256>>>0)<($255>>>0);
       if ($257) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $258 = Math_imul($256, $255)|0;
       $259 = ($storemerge|0)==($258|0);
       if ($259) {
        break L15;
       }
       $260 = (($i$0) + 198)|0;
       $261 = (($storemerge>>>0) / ($260>>>0))&-1;
       $262 = ($261>>>0)<($260>>>0);
       if ($262) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $263 = Math_imul($261, $260)|0;
       $264 = ($storemerge|0)==($263|0);
       if ($264) {
        break L15;
       }
       $265 = (($i$0) + 208)|0;
       $266 = (($storemerge>>>0) / ($265>>>0))&-1;
       $267 = ($266>>>0)<($265>>>0);
       if ($267) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $268 = Math_imul($266, $265)|0;
       $269 = ($storemerge|0)==($268|0);
       $270 = (($i$0) + 210)|0;
       if ($269) {
        break;
       } else {
        $i$0 = $270;
        label = 12;
       }
      }
     }
    } while(0);
    $271 = (($in$0) + 1)|0;
    $272 = ($271|0)==(48);
    $$ = $272 ? 0 : $271;
    $273 = $272&1;
    $$k0$0 = (($273) + ($k0$0))|0;
    $274 = ($$k0$0*210)|0;
    $275 = (55976 + ($$<<2)|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = (($276) + ($274))|0;
    $in$0 = $$;$k0$0 = $$k0$0;$storemerge = $277;
   }
   if ((label|0) == 109) {
    HEAP32[$2>>2] = $storemerge$lcssa;
    $$0 = $storemerge$lcssa;
    break;
   }
   else if ((label|0) == 110) {
    HEAP32[$2>>2] = $storemerge$lcssa15;
    $$0 = $storemerge$lcssa15;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_($__first,$__last,$__value_,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__value_ = $__value_|0;
 $__comp = $__comp|0;
 var $$0$ph = 0, $$0$ph$lcssa = 0, $$lcssa = 0, $$neg1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__len$0 = 0, $__len$0$lcssa7 = 0, $__len$0$ph = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__last;
 $1 = $__first;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = HEAP32[$__value_>>2]|0;
 $$0$ph = $__first;$__len$0$ph = $3;
 L1: while(1) {
  $__len$0 = $__len$0$ph;
  while(1) {
   $5 = ($__len$0|0)==(0);
   if ($5) {
    $$0$ph$lcssa = $$0$ph;
    break L1;
   }
   $6 = (($__len$0|0) / 2)&-1;
   $7 = (($$0$ph) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8>>>0)<($4>>>0);
   if ($9) {
    $$lcssa = $6;$__len$0$lcssa7 = $__len$0;
    break;
   } else {
    $__len$0 = $6;
   }
  }
  $$sum = (($$lcssa) + 1)|0;
  $10 = (($$0$ph) + ($$sum<<2)|0);
  $$neg1 = (($__len$0$lcssa7) + -1)|0;
  $11 = (($$neg1) - ($$lcssa))|0;
  $$0$ph = $10;$__len$0$ph = $11;
 }
 return ($$0$ph$lcssa|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 do {
  if ($8) {
   $9 = (($__n) - ($7))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = (((($this)) + 1|0) + ($__n)|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = ((($this)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = ((($this)) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $15 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $15 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $16 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $16 = $11;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($15))|0;
   $19 = (($18) + ($16))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($16)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($16) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(105,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = ((($this)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31)|0);
 HEAP8[$33>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1)|0);
  _memcpy(($24|0),($25|0),($23|0))|0;
 }
 $26 = ($__old_cap|0)==(10);
 if (!($26)) {
  __ZdlPv($20);
 }
 $27 = ((($this)) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__reserve>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__reserve>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__reserve) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (53304);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(284,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function runPostSets() {

}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&127](a1|0,+a2,+a3,+a4);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_d(index) {
  index = index|0;
  
  return +FUNCTION_TABLE_d[index&127]();
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&127](a1|0,+a2,+a3);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_vidiiddi(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
  FUNCTION_TABLE_vidiiddi[index&127](a1|0,+a2,a3|0,a4|0,+a5,+a6,a7|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(0); }
function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0; }
function b2() { ; nullFunc_d(2);return +0; }
function _emscripten_get_now__wrapper() { ; return +_emscripten_get_now(); }
function b3(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(3); }
function b4(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(4); }
function b5() { ; nullFunc_i(5);return 0; }
function _glCreateProgram__wrapper() { ; return _glCreateProgram()|0; }
function b6(p0) { p0 = p0|0; nullFunc_vi(6); }
function _glCompileShader__wrapper(p0) { p0 = p0|0; _glCompileShader(p0|0); }
function _glLinkProgram__wrapper(p0) { p0 = p0|0; _glLinkProgram(p0|0); }
function _glDisableVertexAttribArray__wrapper(p0) { p0 = p0|0; _glDisableVertexAttribArray(p0|0); }
function _glDeleteShader__wrapper(p0) { p0 = p0|0; _glDeleteShader(p0|0); }
function _glDeleteProgram__wrapper(p0) { p0 = p0|0; _glDeleteProgram(p0|0); }
function b7(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(7); }
function _glDeleteTextures__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glDeleteTextures(p0|0,p1|0); }
function _glDeleteBuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glDeleteBuffers(p0|0,p1|0); }
function _glBindBuffer__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glBindBuffer(p0|0,p1|0); }
function _glAttachShader__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glAttachShader(p0|0,p1|0); }
function b8(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(8);return 0; }
function b9(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(9); }
function b10(p0) { p0 = p0|0; nullFunc_ii(10);return 0; }
function _glGetString__wrapper(p0) { p0 = p0|0; return _glGetString(p0|0)|0; }
function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
function _glCreateShader__wrapper(p0) { p0 = p0|0; return _glCreateShader(p0|0)|0; }
function b11(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(11); }
function _emscripten_get_canvas_size__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_get_canvas_size(p0|0,p1|0,p2|0); }
function _glGetShaderiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glGetShaderiv(p0|0,p1|0,p2|0); }
function _glGetProgramiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glGetProgramiv(p0|0,p1|0,p2|0); }
function b12() { ; nullFunc_v(12); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
function b13(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(13); }
function b14(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(14);return 0; }
function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
function _fopen__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _fopen(p0|0,p1|0)|0; }
function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = +p4;p5 = +p5;p6 = p6|0; nullFunc_vidiiddi(15); }
function b16(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(16); }
function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }
function _glBufferData__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBufferData(p0|0,p1|0,p2|0,p3|0); }
function _glBufferSubData__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBufferSubData(p0|0,p1|0,p2|0,p3|0); }
function _glShaderSource__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glShaderSource(p0|0,p1|0,p2|0,p3|0); }
function _glGetShaderInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0); }
function _glGetProgramInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viddd = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN4vec3C2Efff,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_sn_write,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,__Z11touchHandleiPK20EmscriptenTouchEventPv,__Z11mouseHandleiPK20EmscriptenMouseEventPv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN6stream5wholeEPPvi,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_d = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_emscripten_get_now__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viiiiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN9attribute5setupC2ERS_iibiPv,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_viiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b4,b4,b4,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b4,b4,b4,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN6device12drawElementsEPKvijj
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_i = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZN12baseresourceI12staticScene2Li512EE10getmanagerEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZN12baseresourceI7textureLi512EE10getmanagerEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN12baseresourceI7programLi512EE10getmanagerEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN12baseresourceI6shaderLi512EE10getmanagerEv,b5,b5,_glCreateProgram__wrapper,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,___cxa_get_globals_fast,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_vi = [b6,__ZN12staticScene2D2Ev,__ZN12staticScene2D0Ev,__ZN8countrefD2Ev,__ZN8countrefD0Ev,__ZN8resourceI12staticScene28countrefLi512EED2Ev,__ZN8resourceI12staticScene28countrefLi512EED0Ev,b6,__ZN6cameraD2Ev,__ZN6cameraD0Ev,b6,__ZN8resourceI7program8countrefLi512EED2Ev,__ZN8resourceI7program8countrefLi512EED0Ev,b6,__ZN6streamD2Ev,__ZN6streamD0Ev,b6,b6,b6,__ZN16memoryReadStreamD2Ev,__ZN16memoryReadStreamD0Ev,b6,b6,b6,b6,b6,b6,__ZN10filestreamD2Ev,__ZN10filestreamD0Ev
,b6,b6,b6,b6,b6,b6,__ZN14readfilestreamD2Ev,__ZN14readfilestreamD0Ev,b6,b6,__ZN7textureD2Ev,__ZN7textureD0Ev,__ZN8resourceI7texture8countrefLi512EED2Ev,__ZN8resourceI7texture8countrefLi512EED0Ev,__ZN6bufferD2Ev,__ZN6bufferD0Ev,__ZN6shaderD2Ev,__ZN6shaderD0Ev,__ZN7programD2Ev,__ZN7programD0Ev,__ZN8resourceI6shader8countrefLi512EED2Ev,__ZN8resourceI6shader8countrefLi512EED0Ev,b6,b6,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b6,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b6
,__ZNSt14overflow_errorD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b6,b6,b6,b6,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b6,b6,b6,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b6,b6,b6,b6,b6,b6,__ZN12baseresourceI12staticScene2Li512EE8tmanagerC2Ev,__ZN12baseresourceI12staticScene2Li512EE8tmanagerD2Ev,b6,__ZN8countref5unrefEv,__ZN8duallinkC2Ev,b6,__ZN8duallink6unlinkEv,__ZN12staticScene2C2Ev,__ZN5aabb2C2Ev,__ZN6refptrI7textureEC2Ev
,__ZN6refptrI6bufferEC2Ev,__ZN12baseresourceI12staticScene2Li512EEC2Ev,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN8testviewC2Ev,__ZN9peaceTextC2Ev,__ZN8EnemyGenC2Ev,__ZN6refptrI12staticScene2EC2Ev,__ZN16staticScene2InstC2Ev,b6,__ZN6cameraC2Ev,b6,b6,b6,b6,__ZN6device4initEv,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,__Z16initDefaultLevelR9trackData,b6,b6,__ZN9float4x3a8identityEv,b6,b6,__ZN6Player5resetEv,__ZN8EnemyGen5resetEv,__ZN9peaceText5beginEv,b6,__ZN9peaceText3endEv,__ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEED2Ev,__ZN6PlayerD2Ev,__ZN9float4x3aC2Ev,__ZN5EnemyC2Ev,__ZN4mat4C2Ev,__Z9identity4v,b6,b6,b6,__ZL13sceneOnFailedPv,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN12staticScene27vertex2C2Ev,b6,b6,__ZN4vec3C2Ev,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN7texture8useWhiteEi,b6,b6,b6,b6
,__ZN12baseresourceI7programLi512EE8tmanagerC2Ev,__ZN12baseresourceI7programLi512EE8tmanagerD2Ev,__ZN12baseresourceI7textureLi512EE8tmanagerC2Ev,__ZN12baseresourceI7textureLi512EE8tmanagerD2Ev,b6,b6,b6,b6,b6,__ZN6refptrI7programEC2Ev,___cxx_global_array_dtor,__ZN7programC2Ev,__ZN6refptrI6shaderEC2Ev,__ZN12baseresourceI7programLi512EEC2Ev,__ZN7textureC2Ev,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4vec2C2Ev,b6,b6,b6,__ZN7program3useEv,__ZN12renderstatesC2Ev,b6,b6,b6,b6,__ZL15textureOnLoadedPKc,__ZL15textureOnFailedPKc,b6,__ZN12baseresourceI7textureLi512EEC2Ev
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,b6,b6,b6,b6,b6,b6,b6,b6,_glCompileShader__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,_glLinkProgram__wrapper,b6,b6
,_glDisableVertexAttribArray__wrapper,_glDeleteShader__wrapper,_glDeleteProgram__wrapper,b6,b6,__ZN12baseresourceI6shaderLi512EE8tmanagerC2Ev,__ZN12baseresourceI6shaderLi512EE8tmanagerD2Ev,__ZN6shaderC2Ev,__ZN12baseresourceI6shaderLi512EEC2Ev,b6,b6,b6,b6,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_vii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN16memoryReadStream7seekcurEj,__ZN16memoryReadStream7seeksetEj,__ZN16memoryReadStream7seekendEj,b7,b7,b7,b7
,__ZN10filestream7seekcurEj,__ZN10filestream7seeksetEj,__ZN10filestream7seekendEj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN6refptrI12staticScene2EC2ERKS1_,__ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_,b7,b7,__ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b7,b7,__ZN8duallink10insertbackEPS_,b7,b7,b7,b7
,b7,b7,b7,b7,__ZN6refptrI12staticScene2EC2EPS0_,__ZN9trackTypeC2ERKS_,__ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_,__ZNSt3__16vectorI9trackTypeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,__ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE8allocateEj,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN6refptrI6cameraEC2EPS0_,b7,b7,b7,b7,b7,__ZN6device13setclearcolorEPf,b7,b7,__ZN6device13setProjectionER4mat4,b7,b7
,__ZN6camera6setposER4vec3,b7,__ZN6device7setViewER4mat4,b7,b7,b7,b7,__ZN5track5resetEb,b7,b7,__ZN16staticScene2Inst8setModelEP12staticScene2,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN6stream5dumptIiEEvRT_,__ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE6resizeEj,__ZN6stream5dumptIN12staticScene216staticObjectBaseEEEvRT_,__ZN6stream7dumpstlINSt3__16vectorIN12staticScene214staticInstanceENS1_9allocatorIS4_EEEEEEvRT_
,__ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE6resizeEj,__ZN6stream11dumpstlbyteINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRT_,b7,b7,b7,__ZN6stream7dumpstlINSt3__16vectorIN12staticScene210staticMeshENS1_9allocatorIS4_EEEEEEvRT_,__ZN6stream7dumpstlINSt3__16vectorIN12staticScene26vertexENS1_9allocatorIS4_EEEEEEvRT_,__ZN6stream7dumpstlINSt3__16vectorItNS1_9allocatorItEEEEEEvRT_,b7,b7,__ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE6resizeEj,b7,b7,b7,__ZN5aabb25mergeER4vec3,b7,b7,b7,b7,b7,b7,__ZN6buffer5setupC2EPS_,b7,b7,__ZN7texture3useEi,b7,b7,b7,b7,b7
,b7,b7,b7,b7,__ZN12staticScene28onLoadedER6stream,__ZNKSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE17__annotate_shrinkEj,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__114__split_bufferIN12staticScene212staticObjectERNS_9allocatorIS2_EEE18__construct_at_endEj,__ZNSt3__16vectorIN12staticScene212staticObjectENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNKSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIN12staticScene214staticInstanceERNS_9allocatorIS2_EEE18__construct_at_endEj,__ZNSt3__16vectorIN12staticScene214staticInstanceENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNSt3__114__split_bufferIN12staticScene214staticMaterialERNS_9allocatorIS2_EEE18__construct_at_endEj,__ZNSt3__16vectorIN12staticScene214staticMaterialENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEEC2ERKS5_,__ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE8allocateEj,b7,__ZNKSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIN12staticScene210staticMeshERNS_9allocatorIS2_EEE18__construct_at_endEj,__ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNKSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIN12staticScene26vertexERNS_9allocatorIS2_EEE18__construct_at_endEj
,__ZNSt3__16vectorIN12staticScene26vertexENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNKSt3__16vectorItNS_9allocatorItEEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferItRNS_9allocatorItEEE18__construct_at_endEj,__ZNSt3__16vectorItNS_9allocatorItEEE26__swap_out_circular_bufferERNS_14__split_bufferItRS2_EE,__ZNSt3__114__split_bufferIN12staticScene29material2ERNS_9allocatorIS2_EEE18__construct_at_endEj,__ZNSt3__16vectorIN12staticScene29material2ENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZN14readfilestreamC2EPKc,__ZN6stream5dumptI8charDataEEvRT_,b7,__ZN7texture9setfilterEi,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Z5errorPKcz,b7,b7,b7,b7,__ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE6rehashEj,b7,b7,b7,_glDeleteTextures__wrapper,b7
,__Z7reshapeii,b7,b7,b7,_glDeleteBuffers__wrapper,b7,_glBindBuffer__wrapper,b7,b7,b7,b7,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_glAttachShader__wrapper,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_abort_message,b7,b7,b7,__ZNSt13runtime_errorC2EPKc,__ZNSt3__118__libcpp_refstringC2EPKc,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN9peaceText10appendTextEssPcii,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_vidd = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,__ZN6camera10accumAngleEff,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_ii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN6stream6isReadEv,__ZN6streamcvbEv,b10,b10,b10,b10,b10,b10,__ZN16memoryReadStream4sizeEv,__ZN16memoryReadStream4tellEv,b10,b10
,b10,b10,b10,__ZN10filestream4sizeEv,__ZN10filestream4tellEv,__ZN10filestreamcvbEv,b10,b10,b10,__ZN14readfilestream6isReadEv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt9bad_alloc4whatEv,b10,b10,__ZNKSt13runtime_error4whatEv
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Znwj,b10,b10,b10,b10,_glGetString__wrapper,b10,b10,b10,b10,b10,b10,b10,__ZNK6refptrI6cameraEptEv
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN6refptrI12staticScene2EcvPS0_Ev,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,__Znaj,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK6refptrI6bufferEptEv,b10,__ZN6refptrI6bufferEcvPS0_Ev,b10,__ZN6refptrI7textureEcvPS0_Ev,__ZNK6refptrI7textureEptEv,b10,b10,b10,__ZN7uniformptEv,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK6refptrI7programEptEv,b10,b10,b10,__ZN27peaceSimpleTexture_portable9get_widthEv,__ZN27peaceSimpleTexture_portable10get_heightEv,b10,b10,b10,b10,b10,b10,_fclose__wrapper,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__111char_traitsIcE6lengthEPKc,b10,b10,b10,b10,__Z6getextPKc,b10,b10,b10,_glCreateShader__wrapper,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK6refptrI6shaderEptEv,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_viii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN16memoryReadStream4dumpEPvj,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,__ZN14readfilestream4dumpEPvj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__16vectorI6refptrI12staticScene2ENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_emscripten_get_canvas_size__wrapper,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZL13sceneOnLoadedPvS_i,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZmlRK9float4x3aRK4vec3,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__16vectorIN12staticScene210staticMeshENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__112__hash_tableI8charDataNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEE15__insert_uniqueERKS1_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b11,b11,b11,b11,b11,__ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_,b11,b11,b11,b11,_glGetShaderiv__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,_glGetProgramiv__wrapper,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_v = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,___cxa_pure_virtual__wrapper,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZL25default_terminate_handlerv,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__Z8mainloopv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN7texture4initEv,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,__Z16initGaragePlayerv,b12,__Z15initGarageEnemyv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b12,___cxa_end_catch__wrapper,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_viiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_iii = [b14,b14,b14,b14,b14,b14,b14,__ZN12baseresourceI12staticScene2Li512EE8tmanager4vgetEPc,b14,b14,__ZN12baseresourceI7textureLi512EE8tmanager4vgetEPc,b14,b14,__ZN12baseresourceI7programLi512EE8tmanager4vgetEPc,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN12baseresourceI6shaderLi512EE8tmanager4vgetEPc,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,__ZN12baseresourceI12staticScene2Li512EE8tmanager3getEPKc,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_printf__wrapper,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,__ZN6refptrI12staticScene2EaSEPKS0_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN4mat4ixIiEER4vec4T_,__ZN4vec4ixIiEERfT_,b14,b14,b14,b14,b14,b14
,b14,b14,b14,__ZN12baseresourceI7textureLi512EE8tmanager3getEPKc,__ZN6refptrI7textureEaSEPKS0_,b14,b14,b14,b14,b14,b14,__ZN6refptrI7textureEaSERKS1_,b14,b14,b14,b14,b14,__ZN6refptrI6bufferEaSEPKS0_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN12baseresourceI7programLi512EE8tmanager3getEPKc,__ZN6refptrI7programEaSEPKS0_,b14,__ZN7program10getUniformEPKc,__ZN7program12getAttributeEPKc,b14,b14,b14,b14,b14,b14,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,_fopen__wrapper,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_strchr,b14,b14,__Z11strcmplowerPKcS0_,b14,b14,b14,b14,b14,b14,b14,b14,__ZN12baseresourceI6shaderLi512EE8tmanager3getEPKc,__ZN6refptrI6shaderEaSEPKS0_,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_vidiiddi = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__Z18perspectiveMatrixXfiiffb,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b16,b16,b16,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b16,b16,b16,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,___assert_fail__wrapper,__ZN6bufferC2Eiii,b16,b16,__ZN6buffer7setdataEPvii,b16,b16,b16,b16,b16,b16,b16,b16,__ZN7uniform8setValueEPvji,b16
,b16,b16,b16,b16,b16,b16,b16,b16,__ZN6buffer5allocEiii,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,_glBufferData__wrapper,b16,_glBufferSubData__wrapper,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_glShaderSource__wrapper,b16,b16,_glGetShaderInfoLog__wrapper,b16,b16,b16,b16,b16,b16,b16,b16,_glGetProgramInfoLog__wrapper,b16,b16,b16,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];

  return { _strlen: _strlen, _strcat: _strcat, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, ___cxa_can_catch: ___cxa_can_catch, _memset: _memset, _malloc: _malloc, _strncpy: _strncpy, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _i64Subtract: _i64Subtract, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_game_cpp: __GLOBAL__sub_I_game_cpp, __GLOBAL__sub_I_device_cpp: __GLOBAL__sub_I_device_cpp, __GLOBAL__sub_I_staticScene2_cpp: __GLOBAL__sub_I_staticScene2_cpp, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viddd: dynCall_viddd, dynCall_iiii: dynCall_iiii, dynCall_d: dynCall_d, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_vidd: dynCall_vidd, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_vidiiddi: dynCall_vidiiddi, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_device_cpp = asm["__GLOBAL__sub_I_device_cpp"]; asm["__GLOBAL__sub_I_device_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_device_cpp.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real___GLOBAL__sub_I_staticScene2_cpp = asm["__GLOBAL__sub_I_staticScene2_cpp"]; asm["__GLOBAL__sub_I_staticScene2_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_staticScene2_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real___GLOBAL__sub_I_game_cpp = asm["__GLOBAL__sub_I_game_cpp"]; asm["__GLOBAL__sub_I_game_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_game_cpp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_device_cpp = Module["__GLOBAL__sub_I_device_cpp"] = asm["__GLOBAL__sub_I_device_cpp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var __GLOBAL__sub_I_staticScene2_cpp = Module["__GLOBAL__sub_I_staticScene2_cpp"] = asm["__GLOBAL__sub_I_staticScene2_cpp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var __GLOBAL__sub_I_game_cpp = Module["__GLOBAL__sub_I_game_cpp"] = asm["__GLOBAL__sub_I_game_cpp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_d = Module["dynCall_d"] = asm["dynCall_d"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vidiiddi = Module["dynCall_vidiiddi"] = asm["dynCall_vidiiddi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



